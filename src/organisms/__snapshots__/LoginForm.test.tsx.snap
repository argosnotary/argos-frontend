// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<LoginForm>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "lastClassName": "eQCiFQ",
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
  background-color: ",
              [Function],
              ";
  margin: 10% auto;
  width: 20rem;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
  padding: 1.75rem 2rem 2rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-htoDjs eQCiFQ"
      >
        <styled.img
          src="images/logo.svg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "cVHLyK",
                  "rules": Array [
                    "
  height: 4.25rem;
  margin: 2rem auto 4rem;
  display: flex;
  max-width: 100%;
",
                  ],
                },
                "displayName": "styled.img",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "img",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            src="images/logo.svg"
          >
            <img
              className="sc-dnqmqq cVHLyK"
              src="images/logo.svg"
            />
          </StyledComponent>
        </styled.img>
        <Styled(styled.a)
          href="/api/oauth2/authorize/provider1?redirect_uri=/authenticated"
          key="provider0"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-iwsKbI",
                  "isStatic": false,
                  "lastClassName": "bMaXRj",
                  "rules": Array [
                    "
  ",
                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                    "
",
                    "
  display: flex;
  justify-content: left;
  align-items: center;
  box-sizing: border-box;
  width: 100%;
  font-size: 1rem;
  text-decoration: none;
  border: 1px solid ",
                    [Function],
                    ";
  background: transparent;
  color: ",
                    [Function],
                    ";
  min-height: 3.25rem;

  &:hover {
    background: transparent;
    border-left: 4px solid
      ",
                    [Function],
                    ";
  }
",
                  ],
                },
                "displayName": "Styled(styled.a)",
                "foldedComponentIds": Array [
                  "sc-bwzfXH",
                ],
                "render": [Function],
                "styledComponentId": "sc-iwsKbI",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            href="/api/oauth2/authorize/provider1?redirect_uri=/authenticated"
          >
            <a
              className="sc-bwzfXH sc-iwsKbI bMaXRj"
              href="/api/oauth2/authorize/provider1?redirect_uri=/authenticated"
            >
              <styled.span>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "lastClassName": "bOrPFB",
                        "rules": Array [],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="sc-bZQynM bOrPFB"
                  >
                    Login with 
                    name1
                  </span>
                </StyledComponent>
              </styled.span>
            </a>
          </StyledComponent>
        </Styled(styled.a)>
        <Styled(styled.a)
          href="/api/oauth2/authorize/provider2?redirect_uri=/authenticated"
          key="provider1"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-iwsKbI",
                  "isStatic": false,
                  "lastClassName": "bMaXRj",
                  "rules": Array [
                    "
  ",
                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                    [Function],
                    ";
    cursor: pointer;
  }
",
                    "
",
                    "
  display: flex;
  justify-content: left;
  align-items: center;
  box-sizing: border-box;
  width: 100%;
  font-size: 1rem;
  text-decoration: none;
  border: 1px solid ",
                    [Function],
                    ";
  background: transparent;
  color: ",
                    [Function],
                    ";
  min-height: 3.25rem;

  &:hover {
    background: transparent;
    border-left: 4px solid
      ",
                    [Function],
                    ";
  }
",
                  ],
                },
                "displayName": "Styled(styled.a)",
                "foldedComponentIds": Array [
                  "sc-bwzfXH",
                ],
                "render": [Function],
                "styledComponentId": "sc-iwsKbI",
                "target": "a",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            href="/api/oauth2/authorize/provider2?redirect_uri=/authenticated"
          >
            <a
              className="sc-bwzfXH sc-iwsKbI bMaXRj"
              href="/api/oauth2/authorize/provider2?redirect_uri=/authenticated"
            >
              <styled.img
                src="http://localhost/icon.svg"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-EHOje",
                        "isStatic": false,
                        "lastClassName": "ipfkto",
                        "rules": Array [
                          "
  width: 1.5rem;
",
                        ],
                      },
                      "displayName": "styled.img",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-EHOje",
                      "target": "img",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  src="http://localhost/icon.svg"
                >
                  <img
                    className="sc-EHOje ipfkto"
                    src="http://localhost/icon.svg"
                  />
                </StyledComponent>
              </styled.img>
              <styled.span>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "hBgfiF",
                        "rules": Array [
                          "
  border-right: 1px solid ",
                          [Function],
                          ";
  width: 1px;
  height: 1rem;
  margin: 0 1rem;
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="sc-gzVnrw hBgfiF"
                  />
                </StyledComponent>
              </styled.span>
              <styled.span>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "lastClassName": "bOrPFB",
                        "rules": Array [],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <span
                    className="sc-bZQynM bOrPFB"
                  >
                    Login with 
                    name2
                  </span>
                </StyledComponent>
              </styled.span>
            </a>
          </StyledComponent>
        </Styled(styled.a)>
      </div>
    </StyledComponent>
  </styled.div>
</LoginForm>
`;

exports[`renders correctly error 1`] = `
<LoginForm>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "lastClassName": "eQCiFQ",
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
  background-color: ",
              [Function],
              ";
  margin: 10% auto;
  width: 20rem;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
  padding: 1.75rem 2rem 2rem;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-htoDjs eQCiFQ"
      >
        <styled.img
          src="images/logo.svg"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "lastClassName": "cVHLyK",
                  "rules": Array [
                    "
  height: 4.25rem;
  margin: 2rem auto 4rem;
  display: flex;
  max-width: 100%;
",
                  ],
                },
                "displayName": "styled.img",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "img",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            src="images/logo.svg"
          >
            <img
              className="sc-dnqmqq cVHLyK"
              src="images/logo.svg"
            />
          </StyledComponent>
        </styled.img>
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "lastClassName": "ckgOdz",
                  "rules": Array [
                    "
  text-align: center;
  background-color: ",
                    [Function],
                    ";
  color: ",
                    [Function],
                    ";
  padding: 0.25rem 1rem;

  animation: ",
                    "8",
                    "s ",
                    Keyframes {
                      "id": "sc-keyframes-eXqJEs",
                      "inject": [Function],
                      "name": "eXqJEs",
                      "rules": Array [
                        "@-webkit-keyframes eXqJEs{0%{opacity:0;}10%{opacity:100;}90%{opacity:100;}100%{opacity:0;}}",
                        "@keyframes eXqJEs{0%{opacity:0;}10%{opacity:100;}90%{opacity:100;}100%{opacity:0;}}",
                      ],
                      "toString": [Function],
                    },
                    " ease-in-out forwards;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-ifAKCX ckgOdz"
            >
              Connection error try again later
            </p>
          </StyledComponent>
        </styled.p>
      </div>
    </StyledComponent>
  </styled.div>
</LoginForm>
`;
