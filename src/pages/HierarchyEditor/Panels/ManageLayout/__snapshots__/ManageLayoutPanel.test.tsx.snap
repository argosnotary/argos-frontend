// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`add authorized key to layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "lastClassName": "cxdaOh",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-gzVnrw cxdaOh"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "isiUEp",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: ",
                      [Function],
                      ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-dnqmqq cpDgSY"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jYrlHi",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-iwsKbI jYrlHi"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "gMTTkT",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-gZMcBi gMTTkT"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "jFZBXo",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-htoDjs gcwhQU"
              >
                <PanelBreadCrumb
                  breadcrumb="label / "
                  node={
                    Object {
                      "hasChildren": false,
                      "name": "layout",
                      "parentId": "",
                      "referenceId": "supplyChainId",
                      "type": "SUPPLY_CHAIN",
                    }
                  }
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ibxdXY",
                            "isStatic": false,
                            "lastClassName": "eefExt",
                            "rules": Array [
                              "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ibxdXY",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-ibxdXY eefExt"
                      >
                        Selected: 
                        label / 
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-RefOD",
                                  "isStatic": false,
                                  "lastClassName": "ewapal",
                                  "rules": Array [
                                    "
  color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-RefOD",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-RefOD ewapal"
                            >
                               / 
                              layout
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.hr>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "jLEqym",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.hr",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-bdVaJa jLEqym"
                      />
                    </StyledComponent>
                  </styled.hr>
                </PanelBreadCrumb>
                <Layout>
                  <styled.section
                    data-testhook-id="layout-edit"
                  >
                    <StyledComponent
                      data-testhook-id="layout-edit"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwCtUz",
                            "isStatic": false,
                            "lastClassName": "gccGwq",
                            "rules": Array [
                              "
  width: 100%;
  margin: 0 0 1rem;
",
                            ],
                          },
                          "displayName": "styled.section",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwCtUz",
                          "target": "section",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <section
                        className="sc-bwCtUz gccGwq"
                        data-testhook-id="layout-edit"
                      >
                        <Styled(styled.header)
                          active={true}
                          clickable={false}
                        >
                          <StyledComponent
                            active={true}
                            clickable={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iQKALj",
                                  "isStatic": false,
                                  "lastClassName": "ghZrqH",
                                  "rules": Array [
                                    "
  border: 1px solid
    ",
                                    [Function],
                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                    [Function],
                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                    ".sc-VigVT",
                                    " {
    margin: 0;
  }

  ",
                                    ".sc-jTzLTM",
                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "Styled(styled.header)",
                                "foldedComponentIds": Array [
                                  "sc-ckVGcZ",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-iQKALj",
                                "target": "header",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <header
                              className="sc-ckVGcZ sc-iQKALj ghZrqH"
                            >
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dxgOiQ",
                                        "isStatic": false,
                                        "lastClassName": "fMWTVD",
                                        "rules": Array [
                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dxgOiQ",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-dxgOiQ fMWTVD"
                                  >
                                    Layout
                                  </span>
                                </StyledComponent>
                              </styled.span>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jzJRlG",
                                        "isStatic": false,
                                        "lastClassName": "fswDQX",
                                        "rules": Array [
                                          "
  display: flex;
  align-items: center;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jzJRlG",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jzJRlG fswDQX"
                                  >
                                    <Styled(styled.button)
                                      data-testhook-id="show-layout-json"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="show-layout-json"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="show-layout-json"
                                          onClick={[Function]}
                                        >
                                          <JsonIcon
                                            color="#1779ba"
                                            size={26}
                                          >
                                            <svg
                                              height={26}
                                              version="1.1"
                                              viewBox="0 0 8.4667 8.4667"
                                              width={26}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <g
                                                aria-label="{;}"
                                              >
                                                <path
                                                  d="m7.2453 2.9003h-0.12058q-0.30317 0-0.43925 0.12058-0.13608 0.11886-0.13608 0.42547v0.25321q0 0.32728-0.19982 0.49609-0.19809 0.17053-0.53227 0.17053h-0.47198v-0.38585h0.19637q0.10335 0 0.18603-0.015503 0.084405-0.015503 0.14125-0.058566 0.058566-0.044786 0.08785-0.13091 0.029283-0.084405 0.029283-0.21876v-0.18776q0-0.24116 0.13436-0.40308 0.13608-0.16192 0.38585-0.25666v-0.041341q-0.24977-0.09474-0.38585-0.25666-0.13436-0.16192-0.13436-0.40308v-0.18776q0-0.13436-0.029283-0.21876-0.029284-0.086127-0.08785-0.13091-0.056844-0.043064-0.14125-0.058566-0.082682-0.015503-0.18603-0.015503h-0.19637v-0.38585h0.47198q0.33417 0 0.53227 0.17053 0.19982 0.16881 0.19982 0.49609v0.25321q0 0.30661 0.13608 0.42719 0.13608 0.11886 0.43925 0.11886h0.12058zm-2.6338-0.46681h-0.64423v-0.67696h0.64423zm0.10508 0.5805-0.62012 1.3143h-0.38413l0.33934-1.3143zm-1.4831 1.3522h-0.47198q-0.33417 0-0.53399-0.17053-0.19809-0.16881-0.19809-0.49609v-0.25321q0-0.30661-0.13608-0.42547-0.13608-0.12058-0.43925-0.12058h-0.12058v-0.42375h0.12058q0.30317 0 0.43925-0.11886 0.13608-0.12058 0.13608-0.42719v-0.25321q0-0.32728 0.19809-0.49609 0.19982-0.17053 0.53399-0.17053h0.47198v0.38585h-0.19637q-0.10335 0-0.18776 0.015503-0.082682 0.015503-0.13953 0.058566-0.058566 0.044786-0.08785 0.13091-0.029283 0.084405-0.029283 0.21876v0.18776q0 0.24116-0.13608 0.40308-0.13436 0.16192-0.38413 0.25666v0.041341q0.24977 0.09474 0.38413 0.25666 0.13608 0.16192 0.13608 0.40308v0.18776q0 0.13436 0.029283 0.21876 0.029283 0.086127 0.08785 0.13091 0.055121 0.044786 0.13953 0.058566 0.084405 0.015503 0.18776 0.015503h0.19637z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <g
                                                aria-label="JSON"
                                                transform="scale(1.0126 .98752)"
                                              >
                                                <path
                                                  d="m7.6325 7.8697h-0.44741l-0.76423-1.2358v1.2358h-0.42564v-1.8005h0.55503l0.65661 1.0315v-1.0315h0.42564zm-1.9904-0.89966q0 0.43048-0.24668 0.68442-0.24668 0.25273-0.682 0.25273-0.43411 0-0.68079-0.25273-0.24668-0.25394-0.24668-0.68442 0-0.43411 0.24668-0.68563 0.24668-0.25273 0.68079-0.25273 0.4329 0 0.68079 0.25273 0.24789 0.25152 0.24789 0.68563zm-0.61549 0.45588q0.067716-0.082227 0.10037-0.19348 0.032649-0.11246 0.032649-0.26361 0-0.16204-0.037486-0.2757t-0.097947-0.1838q-0.06167-0.072553-0.14269-0.1052-0.079808-0.032649-0.16687-0.032649-0.088273 0-0.16687 0.03144-0.07739 0.03144-0.14269 0.10399-0.060461 0.067716-0.099156 0.18743-0.037486 0.1185-0.037486 0.2757 0 0.16083 0.036277 0.27449 0.037486 0.11246 0.097947 0.1838 0.060461 0.071344 0.14148 0.1052 0.081018 0.033858 0.1705 0.033858 0.089482 0 0.1705-0.033858 0.081018-0.035067 0.14148-0.10762zm-1.4547-0.12213q0 0.26603-0.22612 0.4329-0.22491 0.16566-0.61186 0.16566-0.22371 0-0.39058-0.038695-0.16566-0.039904-0.31077-0.10037v-0.43169h0.050787q0.1439 0.11488 0.32165 0.17655 0.17896 0.06167 0.34342 0.06167 0.042323 0 0.11125-0.00726 0.068926-0.00726 0.11246-0.024184 0.053206-0.021766 0.087064-0.054415 0.035067-0.032649 0.035067-0.096737 0-0.059252-0.050787-0.10157-0.049578-0.043528-0.14632-0.066503-0.10157-0.024184-0.21524-0.044741-0.11246-0.021766-0.21161-0.054415-0.22733-0.073762-0.3277-0.19952-0.099156-0.12697-0.099156-0.3144 0-0.25152 0.22491-0.40993 0.22612-0.15962 0.58042-0.15962 0.17776 0 0.35067 0.035067 0.17413 0.033858 0.3011 0.085854v0.41476h-0.049578q-0.10883-0.087063-0.26724-0.14511-0.1572-0.059252-0.32165-0.059252-0.058042 0-0.11608 0.00846-0.056833 0.00726-0.11004 0.029021-0.047159 0.018138-0.081018 0.055624-0.033858 0.036277-0.033858 0.083436 0 0.071344 0.054415 0.11004 0.054415 0.037486 0.20557 0.068925 0.099156 0.020557 0.18985 0.039904 0.091901 0.019347 0.1971 0.053206 0.20678 0.067716 0.30472 0.18501 0.099156 0.11608 0.099156 0.3023zm-1.8767 0.037486q0 0.1185-0.042323 0.2225-0.042323 0.10278-0.12576 0.17413-0.088273 0.076181-0.21282 0.1185-0.12455 0.041114-0.30835 0.041114-0.12455 0-0.23459-0.00967-0.11004-0.00846-0.19348-0.025394v-0.36519h0.043532q0.058042 0.021766 0.12092 0.041113 0.062879 0.018138 0.16083 0.018138 0.12697 0 0.19468-0.033858 0.068925-0.033858 0.097947-0.094319 0.027812-0.059252 0.03144-0.12939 0.00363-0.071344 0.00363-0.18138v-0.71707h-0.41235v-0.33133h0.87668z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <path
                                                d="m0.12976 0.12976h8.2072v8.2072h-8.2072zm-0.12955 5.2942 8.4663 0.013173"
                                                fill="none"
                                                stroke="#1779ba"
                                                strokeWidth=".8"
                                              />
                                            </svg>
                                          </JsonIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      data-testhook-id="edit-layout"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="edit-layout"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="edit-layout"
                                          onClick={[Function]}
                                        >
                                          <EditIcon
                                            color="#1779ba"
                                            size={31}
                                          >
                                            <svg
                                              height={31}
                                              version="1.1"
                                              viewBox="0 0 24 24"
                                              width={31}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                fill="#1779ba"
                                              />
                                            </svg>
                                          </EditIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </header>
                          </StyledComponent>
                        </Styled(styled.header)>
                      </section>
                    </StyledComponent>
                  </styled.section>
                </Layout>
                <LayoutJsonEditor />
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-fMiknA",
                              "isStatic": false,
                              "lastClassName": "djoooY",
                              "rules": Array [
                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                [Function],
                                ";

  background: ",
                                [Function],
                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                "
  margin: 1rem 0 0.5rem;
  min-height: 18.8rem;
  padding: 0 1rem;
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-fjdhpX",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-fMiknA",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-fjdhpX sc-fMiknA djoooY"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-chPdSV",
                                    "isStatic": false,
                                    "lastClassName": "bBFivD",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-chPdSV",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-chPdSV bBFivD"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dVhcbM",
                                          "isStatic": false,
                                          "lastClassName": "fScVQR",
                                          "rules": Array [
                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-kgoBCf",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-dVhcbM",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-kgoBCf sc-dVhcbM fScVQR"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eqIVtm",
                                          "isStatic": false,
                                          "lastClassName": "emMCro",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                            [Function],
                                            "
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-kAzzGY",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-eqIVtm",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-kAzzGY sc-eqIVtm emMCro"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kpOJdX",
                                    "isStatic": false,
                                    "lastClassName": "idQdSz",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kpOJdX",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kpOJdX idQdSz"
                              />
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eTuwsz",
                          "isStatic": false,
                          "lastClassName": "cdixMS",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-eTuwsz",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-bdVaJa sc-eTuwsz cdixMS"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <JsonSignAndSubmit>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kkGfuU",
                            "isStatic": false,
                            "lastClassName": "hWfVhn",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kkGfuU",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kkGfuU hWfVhn"
                      >
                        <LoaderButton
                          buttonType="button"
                          dataTesthookId="layout-json-form-submit-button"
                          onClick={[Function]}
                        >
                          <styled.button
                            data-testhook-id="layout-json-form-submit-button"
                            onClick={[Function]}
                            type="button"
                          >
                            <StyledComponent
                              data-testhook-id="layout-json-form-submit-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iAyFgw",
                                    "isStatic": false,
                                    "lastClassName": "kuBZXY",
                                    "rules": Array [
                                      "
  ",
                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: pointer;
  }
",
                                      "

  background-color: ",
                                      [Function],
                                      ";

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: ",
                                      [Function],
                                      "
  }
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-iAyFgw",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="sc-iAyFgw kuBZXY"
                                data-testhook-id="layout-json-form-submit-button"
                                onClick={[Function]}
                                type="button"
                              >
                                Sign and Submit
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </LoaderButton>
                        <Styled(Styled(styled.button))
                          data-testhook="cancel-button"
                          onMouseDown={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            data-testhook="cancel-button"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jqCOkK",
                                  "isStatic": false,
                                  "lastClassName": "jrhpuB",
                                  "rules": Array [
                                    "
  ",
                                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "

  background-color: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: ",
                                    [Function],
                                    "
  }
",
                                    "
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  border: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    color: ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "
  margin-left: 1rem;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(styled.button))",
                                "foldedComponentIds": Array [
                                  "sc-iAyFgw",
                                  "sc-cvbbAY",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jqCOkK",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onMouseDown={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-iAyFgw sc-cvbbAY sc-jqCOkK jrhpuB"
                              data-testhook="cancel-button"
                              onMouseDown={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </Styled(Styled(styled.button))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </JsonSignAndSubmit>
                <LayoutSigner>
                  <PassphraseDialogBox
                    onCancel={[Function]}
                    onConfirm={[Function]}
                    passphrase=""
                    showCryptoExceptionMessage={false}
                    showDialog={false}
                    showInvalidPassphraseMessage={false}
                  />
                </LayoutSigner>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title=""
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gzVnrw",
                "isStatic": false,
                "lastClassName": "cxdaOh",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gzVnrw",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-gzVnrw cxdaOh"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "isiUEp",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: ",
                        [Function],
                        ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-dnqmqq isiUEp"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iwsKbI",
                            "isStatic": false,
                            "lastClassName": "jYrlHi",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iwsKbI",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-iwsKbI jYrlHi"
                      />
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "jFZBXo",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-htoDjs jFZBXo"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kIPQKe",
                            "isStatic": false,
                            "lastClassName": "jgMiIX",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kIPQKe",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kIPQKe jgMiIX"
                      >
                        <LayoutAuthorizedAccountEditor>
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bbmXgH",
                                    "isStatic": false,
                                    "lastClassName": "kRCzco",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-bbmXgH",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-bbmXgH kRCzco"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-gGBfsJ",
                                                "isStatic": false,
                                                "lastClassName": "iWHpie",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-gGBfsJ",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-gGBfsJ iWHpie"
                                          >
                                            Authorized Accounts
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-item"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-item"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jnlKLf",
                                                "isStatic": false,
                                                "lastClassName": "gWEUFB",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-jnlKLf",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-jnlKLf gWEUFB"
                                            data-testhook-id="add-item"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    >
                                      <li
                                        key="item-row-0"
                                      >
                                        <Styled(styled.header)
                                          clickable={false}
                                        >
                                          <StyledComponent
                                            clickable={false}
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-fYxtnH",
                                                  "isStatic": false,
                                                  "lastClassName": "fTEzbr",
                                                  "rules": Array [
                                                    "
  border: 1px solid
    ",
                                                    [Function],
                                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                    [Function],
                                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                    ".sc-VigVT",
                                                    " {
    margin: 0;
  }

  ",
                                                    ".sc-jTzLTM",
                                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.header)",
                                                "foldedComponentIds": Array [
                                                  "sc-ckVGcZ",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-fYxtnH",
                                                "target": "header",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <header
                                              className="sc-ckVGcZ sc-fYxtnH fTEzbr"
                                            >
                                              <styled.span>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-dxgOiQ",
                                                        "isStatic": false,
                                                        "lastClassName": "fMWTVD",
                                                        "rules": Array [
                                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.span",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-dxgOiQ",
                                                      "target": "span",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <span
                                                    className="sc-dxgOiQ fMWTVD"
                                                  >
                                                    <styled.span
                                                      active={true}
                                                    >
                                                      <StyledComponent
                                                        active={true}
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-uJMKN",
                                                              "isStatic": false,
                                                              "lastClassName": "fsYqXw",
                                                              "rules": Array [
                                                                "
  color: ",
                                                                [Function],
                                                                ";
  padding: 0 0.5rem;
  border: 2px solid
    ",
                                                                [Function],
                                                                ";
  margin: 0 0.5rem 0 0;
  font-size: 0.9rem;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.span",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-uJMKN",
                                                            "target": "span",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <span
                                                          className="sc-uJMKN fsYqXw"
                                                        >
                                                          active key
                                                        </span>
                                                      </StyledComponent>
                                                    </styled.span>
                                                    accountName
                                                  </span>
                                                </StyledComponent>
                                              </styled.span>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-jzJRlG",
                                                        "isStatic": false,
                                                        "lastClassName": "fswDQX",
                                                        "rules": Array [
                                                          "
  display: flex;
  align-items: center;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-jzJRlG",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-jzJRlG fswDQX"
                                                  >
                                                    <Styled(styled.button)
                                                      data-testhook-id="delete-item-0"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="delete-item-0"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-tilXH",
                                                              "isStatic": false,
                                                              "lastClassName": "jTwnJG",
                                                              "rules": Array [
                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-cSHVUG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-tilXH",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-cSHVUG sc-tilXH jTwnJG"
                                                          data-testhook-id="delete-item-0"
                                                          onClick={[Function]}
                                                        >
                                                          <RemoveIcon
                                                            color="#1779ba"
                                                            size={24}
                                                          >
                                                            <svg
                                                              height={24}
                                                              version="1.1"
                                                              viewBox="0 0 32 32"
                                                              width={24}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <title>
                                                                trash
                                                              </title>
                                                              <path
                                                                d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </RemoveIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </header>
                                          </StyledComponent>
                                        </Styled(styled.header)>
                                      </li>
                                    </ul>
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </LayoutAuthorizedAccountEditor>
                        <RuleEditor
                          addAction={21}
                          editAction={23}
                          removeAction={22}
                          title="Expected End Products"
                        >
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-btzYZH",
                                    "isStatic": false,
                                    "lastClassName": "jvrdbY",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                      "
  li ~ ",
                                      ".sc-jDwBTQ",
                                      " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                      ".sc-jDwBTQ",
                                      " {
    margin-top: 0;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-btzYZH",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-btzYZH jvrdbY"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-lhVmIH",
                                                "isStatic": false,
                                                "lastClassName": "eHyLYd",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-lhVmIH",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                          >
                                            Expected End Products
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-rule"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-rule"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bYSBpT",
                                                "isStatic": false,
                                                "lastClassName": "ftOxhC",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-bYSBpT",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                            data-testhook-id="add-rule"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    />
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </RuleEditor>
                        <ArtifactCollectorEditor
                          artifactCollectorSpecifications={Array []}
                          title="Release collectors"
                        >
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-hEsumM",
                                    "isStatic": false,
                                    "lastClassName": "eAVtxg",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-hEsumM",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-hEsumM eAVtxg"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ktHwxA",
                                                "isStatic": false,
                                                "lastClassName": "eqTlvr",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-ktHwxA",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-ktHwxA eqTlvr"
                                          >
                                            Release collectors
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-collector"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-collector"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cIShpX",
                                                "isStatic": false,
                                                "lastClassName": "feHJYR",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-cIShpX",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-cIShpX feHJYR"
                                            data-testhook-id="add-collector"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    />
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </ArtifactCollectorEditor>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;

exports[`renders correctly with existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "lastClassName": "cxdaOh",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-gzVnrw cxdaOh"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "isiUEp",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: ",
                      [Function],
                      ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-dnqmqq cpDgSY"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jYrlHi",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-iwsKbI jYrlHi"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "gMTTkT",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-gZMcBi gMTTkT"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "jFZBXo",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-htoDjs gcwhQU"
              >
                <PanelBreadCrumb
                  breadcrumb="label / "
                  node={
                    Object {
                      "hasChildren": false,
                      "name": "layout",
                      "parentId": "",
                      "referenceId": "supplyChainId",
                      "type": "SUPPLY_CHAIN",
                    }
                  }
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ibxdXY",
                            "isStatic": false,
                            "lastClassName": "eefExt",
                            "rules": Array [
                              "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ibxdXY",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-ibxdXY eefExt"
                      >
                        Selected: 
                        label / 
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-RefOD",
                                  "isStatic": false,
                                  "lastClassName": "ewapal",
                                  "rules": Array [
                                    "
  color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-RefOD",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-RefOD ewapal"
                            >
                               / 
                              layout
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.hr>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "jLEqym",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.hr",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-bdVaJa jLEqym"
                      />
                    </StyledComponent>
                  </styled.hr>
                </PanelBreadCrumb>
                <Layout>
                  <styled.section
                    data-testhook-id="layout-edit"
                  >
                    <StyledComponent
                      data-testhook-id="layout-edit"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwCtUz",
                            "isStatic": false,
                            "lastClassName": "gccGwq",
                            "rules": Array [
                              "
  width: 100%;
  margin: 0 0 1rem;
",
                            ],
                          },
                          "displayName": "styled.section",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwCtUz",
                          "target": "section",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <section
                        className="sc-bwCtUz gccGwq"
                        data-testhook-id="layout-edit"
                      >
                        <Styled(styled.header)
                          active={false}
                          clickable={false}
                        >
                          <StyledComponent
                            active={false}
                            clickable={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iQKALj",
                                  "isStatic": false,
                                  "lastClassName": "eFVgFL",
                                  "rules": Array [
                                    "
  border: 1px solid
    ",
                                    [Function],
                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                    [Function],
                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                    ".sc-VigVT",
                                    " {
    margin: 0;
  }

  ",
                                    ".sc-jTzLTM",
                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "Styled(styled.header)",
                                "foldedComponentIds": Array [
                                  "sc-ckVGcZ",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-iQKALj",
                                "target": "header",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <header
                              className="sc-ckVGcZ sc-iQKALj eFVgFL"
                            >
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dxgOiQ",
                                        "isStatic": false,
                                        "lastClassName": "fMWTVD",
                                        "rules": Array [
                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dxgOiQ",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-dxgOiQ fMWTVD"
                                  >
                                    Layout
                                  </span>
                                </StyledComponent>
                              </styled.span>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jzJRlG",
                                        "isStatic": false,
                                        "lastClassName": "fswDQX",
                                        "rules": Array [
                                          "
  display: flex;
  align-items: center;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jzJRlG",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jzJRlG fswDQX"
                                  >
                                    <Styled(styled.button)
                                      data-testhook-id="show-layout-json"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="show-layout-json"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="show-layout-json"
                                          onClick={[Function]}
                                        >
                                          <JsonIcon
                                            color="#1779ba"
                                            size={26}
                                          >
                                            <svg
                                              height={26}
                                              version="1.1"
                                              viewBox="0 0 8.4667 8.4667"
                                              width={26}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <g
                                                aria-label="{;}"
                                              >
                                                <path
                                                  d="m7.2453 2.9003h-0.12058q-0.30317 0-0.43925 0.12058-0.13608 0.11886-0.13608 0.42547v0.25321q0 0.32728-0.19982 0.49609-0.19809 0.17053-0.53227 0.17053h-0.47198v-0.38585h0.19637q0.10335 0 0.18603-0.015503 0.084405-0.015503 0.14125-0.058566 0.058566-0.044786 0.08785-0.13091 0.029283-0.084405 0.029283-0.21876v-0.18776q0-0.24116 0.13436-0.40308 0.13608-0.16192 0.38585-0.25666v-0.041341q-0.24977-0.09474-0.38585-0.25666-0.13436-0.16192-0.13436-0.40308v-0.18776q0-0.13436-0.029283-0.21876-0.029284-0.086127-0.08785-0.13091-0.056844-0.043064-0.14125-0.058566-0.082682-0.015503-0.18603-0.015503h-0.19637v-0.38585h0.47198q0.33417 0 0.53227 0.17053 0.19982 0.16881 0.19982 0.49609v0.25321q0 0.30661 0.13608 0.42719 0.13608 0.11886 0.43925 0.11886h0.12058zm-2.6338-0.46681h-0.64423v-0.67696h0.64423zm0.10508 0.5805-0.62012 1.3143h-0.38413l0.33934-1.3143zm-1.4831 1.3522h-0.47198q-0.33417 0-0.53399-0.17053-0.19809-0.16881-0.19809-0.49609v-0.25321q0-0.30661-0.13608-0.42547-0.13608-0.12058-0.43925-0.12058h-0.12058v-0.42375h0.12058q0.30317 0 0.43925-0.11886 0.13608-0.12058 0.13608-0.42719v-0.25321q0-0.32728 0.19809-0.49609 0.19982-0.17053 0.53399-0.17053h0.47198v0.38585h-0.19637q-0.10335 0-0.18776 0.015503-0.082682 0.015503-0.13953 0.058566-0.058566 0.044786-0.08785 0.13091-0.029283 0.084405-0.029283 0.21876v0.18776q0 0.24116-0.13608 0.40308-0.13436 0.16192-0.38413 0.25666v0.041341q0.24977 0.09474 0.38413 0.25666 0.13608 0.16192 0.13608 0.40308v0.18776q0 0.13436 0.029283 0.21876 0.029283 0.086127 0.08785 0.13091 0.055121 0.044786 0.13953 0.058566 0.084405 0.015503 0.18776 0.015503h0.19637z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <g
                                                aria-label="JSON"
                                                transform="scale(1.0126 .98752)"
                                              >
                                                <path
                                                  d="m7.6325 7.8697h-0.44741l-0.76423-1.2358v1.2358h-0.42564v-1.8005h0.55503l0.65661 1.0315v-1.0315h0.42564zm-1.9904-0.89966q0 0.43048-0.24668 0.68442-0.24668 0.25273-0.682 0.25273-0.43411 0-0.68079-0.25273-0.24668-0.25394-0.24668-0.68442 0-0.43411 0.24668-0.68563 0.24668-0.25273 0.68079-0.25273 0.4329 0 0.68079 0.25273 0.24789 0.25152 0.24789 0.68563zm-0.61549 0.45588q0.067716-0.082227 0.10037-0.19348 0.032649-0.11246 0.032649-0.26361 0-0.16204-0.037486-0.2757t-0.097947-0.1838q-0.06167-0.072553-0.14269-0.1052-0.079808-0.032649-0.16687-0.032649-0.088273 0-0.16687 0.03144-0.07739 0.03144-0.14269 0.10399-0.060461 0.067716-0.099156 0.18743-0.037486 0.1185-0.037486 0.2757 0 0.16083 0.036277 0.27449 0.037486 0.11246 0.097947 0.1838 0.060461 0.071344 0.14148 0.1052 0.081018 0.033858 0.1705 0.033858 0.089482 0 0.1705-0.033858 0.081018-0.035067 0.14148-0.10762zm-1.4547-0.12213q0 0.26603-0.22612 0.4329-0.22491 0.16566-0.61186 0.16566-0.22371 0-0.39058-0.038695-0.16566-0.039904-0.31077-0.10037v-0.43169h0.050787q0.1439 0.11488 0.32165 0.17655 0.17896 0.06167 0.34342 0.06167 0.042323 0 0.11125-0.00726 0.068926-0.00726 0.11246-0.024184 0.053206-0.021766 0.087064-0.054415 0.035067-0.032649 0.035067-0.096737 0-0.059252-0.050787-0.10157-0.049578-0.043528-0.14632-0.066503-0.10157-0.024184-0.21524-0.044741-0.11246-0.021766-0.21161-0.054415-0.22733-0.073762-0.3277-0.19952-0.099156-0.12697-0.099156-0.3144 0-0.25152 0.22491-0.40993 0.22612-0.15962 0.58042-0.15962 0.17776 0 0.35067 0.035067 0.17413 0.033858 0.3011 0.085854v0.41476h-0.049578q-0.10883-0.087063-0.26724-0.14511-0.1572-0.059252-0.32165-0.059252-0.058042 0-0.11608 0.00846-0.056833 0.00726-0.11004 0.029021-0.047159 0.018138-0.081018 0.055624-0.033858 0.036277-0.033858 0.083436 0 0.071344 0.054415 0.11004 0.054415 0.037486 0.20557 0.068925 0.099156 0.020557 0.18985 0.039904 0.091901 0.019347 0.1971 0.053206 0.20678 0.067716 0.30472 0.18501 0.099156 0.11608 0.099156 0.3023zm-1.8767 0.037486q0 0.1185-0.042323 0.2225-0.042323 0.10278-0.12576 0.17413-0.088273 0.076181-0.21282 0.1185-0.12455 0.041114-0.30835 0.041114-0.12455 0-0.23459-0.00967-0.11004-0.00846-0.19348-0.025394v-0.36519h0.043532q0.058042 0.021766 0.12092 0.041113 0.062879 0.018138 0.16083 0.018138 0.12697 0 0.19468-0.033858 0.068925-0.033858 0.097947-0.094319 0.027812-0.059252 0.03144-0.12939 0.00363-0.071344 0.00363-0.18138v-0.71707h-0.41235v-0.33133h0.87668z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <path
                                                d="m0.12976 0.12976h8.2072v8.2072h-8.2072zm-0.12955 5.2942 8.4663 0.013173"
                                                fill="none"
                                                stroke="#1779ba"
                                                strokeWidth=".8"
                                              />
                                            </svg>
                                          </JsonIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      data-testhook-id="edit-layout"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="edit-layout"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="edit-layout"
                                          onClick={[Function]}
                                        >
                                          <EditIcon
                                            color="#1779ba"
                                            size={31}
                                          >
                                            <svg
                                              height={31}
                                              version="1.1"
                                              viewBox="0 0 24 24"
                                              width={31}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                fill="#1779ba"
                                              />
                                            </svg>
                                          </EditIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </header>
                          </StyledComponent>
                        </Styled(styled.header)>
                      </section>
                    </StyledComponent>
                  </styled.section>
                </Layout>
                <LayoutJsonEditor />
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-fMiknA",
                              "isStatic": false,
                              "lastClassName": "djoooY",
                              "rules": Array [
                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                [Function],
                                ";

  background: ",
                                [Function],
                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                "
  margin: 1rem 0 0.5rem;
  min-height: 18.8rem;
  padding: 0 1rem;
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-fjdhpX",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-fMiknA",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-fjdhpX sc-fMiknA djoooY"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-chPdSV",
                                    "isStatic": false,
                                    "lastClassName": "bBFivD",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-chPdSV",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-chPdSV bBFivD"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dVhcbM",
                                          "isStatic": false,
                                          "lastClassName": "fScVQR",
                                          "rules": Array [
                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-kgoBCf",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-dVhcbM",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-kgoBCf sc-dVhcbM fScVQR"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eqIVtm",
                                          "isStatic": false,
                                          "lastClassName": "emMCro",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                            [Function],
                                            "
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-kAzzGY",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-eqIVtm",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-kAzzGY sc-eqIVtm emMCro"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kpOJdX",
                                    "isStatic": false,
                                    "lastClassName": "idQdSz",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kpOJdX",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kpOJdX idQdSz"
                              >
                                <Segment
                                  index={0}
                                  key="jenkins"
                                  segment={
                                    Object {
                                      "name": "jenkins",
                                      "steps": Array [
                                        Object {
                                          "name": "approve",
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <styled.li>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-fBuWsC",
                                            "isStatic": false,
                                            "lastClassName": "eJQgBo",
                                            "rules": Array [
                                              "
  width: 100%;
  margin: 0 0 1rem;
",
                                            ],
                                          },
                                          "displayName": "styled.li",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-fBuWsC",
                                          "target": "li",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <li
                                        className="sc-fBuWsC eJQgBo"
                                      >
                                        <Styled(styled.header)
                                          clickable={true}
                                          data-testhook-id="segment0-edit"
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            clickable={true}
                                            data-testhook-id="segment0-edit"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-hzDkRC",
                                                  "isStatic": false,
                                                  "lastClassName": "bfJpUs",
                                                  "rules": Array [
                                                    "
  border: 1px solid
    ",
                                                    [Function],
                                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                    [Function],
                                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                    ".sc-VigVT",
                                                    " {
    margin: 0;
  }

  ",
                                                    ".sc-jTzLTM",
                                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                    [Function],
                                                    ";
    border: 1px solid ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.header)",
                                                "foldedComponentIds": Array [
                                                  "sc-ckVGcZ",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-hzDkRC",
                                                "target": "header",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <header
                                              className="sc-ckVGcZ sc-hzDkRC bfJpUs"
                                              data-testhook-id="segment0-edit"
                                              onClick={[Function]}
                                            >
                                              <styled.span>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-dxgOiQ",
                                                        "isStatic": false,
                                                        "lastClassName": "fMWTVD",
                                                        "rules": Array [
                                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.span",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-dxgOiQ",
                                                      "target": "span",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <span
                                                    className="sc-dxgOiQ fMWTVD"
                                                  >
                                                    jenkins
                                                  </span>
                                                </StyledComponent>
                                              </styled.span>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-jzJRlG",
                                                        "isStatic": false,
                                                        "lastClassName": "fswDQX",
                                                        "rules": Array [
                                                          "
  display: flex;
  align-items: center;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-jzJRlG",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-jzJRlG fswDQX"
                                                  >
                                                    <Styled(styled.button)
                                                      data-testhook-id="segment0-delete"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="segment0-delete"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-jhAzac",
                                                              "isStatic": false,
                                                              "lastClassName": "iZdpYu",
                                                              "rules": Array [
                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-cSHVUG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-jhAzac",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-cSHVUG sc-jhAzac iZdpYu"
                                                          data-testhook-id="segment0-delete"
                                                          onClick={[Function]}
                                                        >
                                                          <RemoveIcon
                                                            color="#1779ba"
                                                            size={24}
                                                          >
                                                            <svg
                                                              height={24}
                                                              version="1.1"
                                                              viewBox="0 0 32 32"
                                                              width={24}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <title>
                                                                trash
                                                              </title>
                                                              <path
                                                                d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </RemoveIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </header>
                                          </StyledComponent>
                                        </Styled(styled.header)>
                                      </li>
                                    </StyledComponent>
                                  </styled.li>
                                  <StepsContainer
                                    index={0}
                                    segment={
                                      Object {
                                        "name": "jenkins",
                                        "steps": Array [
                                          Object {
                                            "name": "approve",
                                          },
                                        ],
                                      }
                                    }
                                  >
                                    <ul>
                                      <Styled(styled.section)
                                        inverted={true}
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-csuQGl",
                                                "isStatic": false,
                                                "lastClassName": "hwOLfG",
                                                "rules": Array [
                                                  "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                  [Function],
                                                  ";

  background: ",
                                                  [Function],
                                                  ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                  "
  margin: 1rem 0;
  min-height: 18.8rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.section)",
                                              "foldedComponentIds": Array [
                                                "sc-fjdhpX",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-csuQGl",
                                              "target": "section",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          inverted={true}
                                        >
                                          <section
                                            className="sc-fjdhpX sc-csuQGl hwOLfG"
                                          >
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-chPdSV",
                                                      "isStatic": false,
                                                      "lastClassName": "bBFivD",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-chPdSV",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-chPdSV bBFivD"
                                                >
                                                  <Styled(styled.header)>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-Rmtcm",
                                                            "isStatic": false,
                                                            "lastClassName": "bVypHe",
                                                            "rules": Array [
                                                              "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: ",
                                                              [Function],
                                                              ";
  display: inline-flex;
  top: -1rem;
  margin: 0 auto;
  padding: 0.25rem 1rem;
  border: 1px solid ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.header)",
                                                          "foldedComponentIds": Array [
                                                            "sc-kGXeez",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-Rmtcm",
                                                          "target": "header",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <header
                                                        className="sc-kGXeez sc-Rmtcm bVypHe"
                                                      >
                                                        Steps
                                                      </header>
                                                    </StyledComponent>
                                                  </Styled(styled.header)>
                                                  <Styled(styled.button)
                                                    data-testhook-id="segment0-add-step"
                                                    inverted={true}
                                                    onClick={[Function]}
                                                  >
                                                    <StyledComponent
                                                      data-testhook-id="segment0-add-step"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-bRBYWo",
                                                            "isStatic": false,
                                                            "lastClassName": "cDNhcw",
                                                            "rules": Array [
                                                              "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                              [Function],
                                                              "
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.button)",
                                                          "foldedComponentIds": Array [
                                                            "sc-kAzzGY",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-bRBYWo",
                                                          "target": "button",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      inverted={true}
                                                      onClick={[Function]}
                                                    >
                                                      <button
                                                        className="sc-kAzzGY sc-bRBYWo cDNhcw"
                                                        data-testhook-id="segment0-add-step"
                                                        onClick={[Function]}
                                                      >
                                                        <PlusIcon
                                                          color="#1779ba"
                                                          size={20}
                                                        >
                                                          <svg
                                                            height={20}
                                                            version="1.1"
                                                            viewBox="0 0 32 32"
                                                            width={20}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <title>
                                                              plus
                                                            </title>
                                                            <path
                                                              d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                              fill="#1779ba"
                                                            />
                                                          </svg>
                                                        </PlusIcon>
                                                      </button>
                                                    </StyledComponent>
                                                  </Styled(styled.button)>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <Step
                                              index={0}
                                              key="stepContainer0"
                                              segment={
                                                Object {
                                                  "name": "jenkins",
                                                  "steps": Array [
                                                    Object {
                                                      "name": "approve",
                                                    },
                                                  ],
                                                }
                                              }
                                              step={
                                                Object {
                                                  "name": "approve",
                                                }
                                              }
                                            >
                                              <styled.section
                                                data-testhook-id="jenkins-0-edit-step"
                                                onClick={[Function]}
                                              >
                                                <StyledComponent
                                                  data-testhook-id="jenkins-0-edit-step"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-iRbamj",
                                                        "isStatic": false,
                                                        "lastClassName": "guFZCr",
                                                        "rules": Array [
                                                          "
  width: 100%;
  margin: 0 0 1rem;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.section",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-iRbamj",
                                                      "target": "section",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  onClick={[Function]}
                                                >
                                                  <section
                                                    className="sc-iRbamj guFZCr"
                                                    data-testhook-id="jenkins-0-edit-step"
                                                    onClick={[Function]}
                                                  >
                                                    <Styled(styled.header)
                                                      active={true}
                                                      clickable={true}
                                                    >
                                                      <StyledComponent
                                                        active={true}
                                                        clickable={true}
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gPEVay",
                                                              "isStatic": false,
                                                              "lastClassName": "gwToXx",
                                                              "rules": Array [
                                                                "
  border: 1px solid
    ",
                                                                [Function],
                                                                ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                                [Function],
                                                                ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                                ".sc-VigVT",
                                                                " {
    margin: 0;
  }

  ",
                                                                ".sc-jTzLTM",
                                                                " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                                [Function],
                                                                ";
    border: 1px solid ",
                                                                [Function],
                                                                ";
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.header)",
                                                            "foldedComponentIds": Array [
                                                              "sc-ckVGcZ",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gPEVay",
                                                            "target": "header",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <header
                                                          className="sc-ckVGcZ sc-gPEVay gwToXx"
                                                        >
                                                          <styled.span>
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-dxgOiQ",
                                                                    "isStatic": false,
                                                                    "lastClassName": "fMWTVD",
                                                                    "rules": Array [
                                                                      "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.span",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-dxgOiQ",
                                                                  "target": "span",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                            >
                                                              <span
                                                                className="sc-dxgOiQ fMWTVD"
                                                              >
                                                                approve
                                                              </span>
                                                            </StyledComponent>
                                                          </styled.span>
                                                          <styled.div>
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-jzJRlG",
                                                                    "isStatic": false,
                                                                    "lastClassName": "fswDQX",
                                                                    "rules": Array [
                                                                      "
  display: flex;
  align-items: center;
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.div",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-jzJRlG",
                                                                  "target": "div",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                            >
                                                              <div
                                                                className="sc-jzJRlG fswDQX"
                                                              >
                                                                <Styled(styled.button)
                                                                  data-testhook-id="jenkins-0-select-step"
                                                                  onClick={[Function]}
                                                                >
                                                                  <StyledComponent
                                                                    data-testhook-id="jenkins-0-select-step"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-jlyJG",
                                                                          "isStatic": false,
                                                                          "lastClassName": "cUQmju",
                                                                          "rules": Array [
                                                                            "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                          ],
                                                                        },
                                                                        "displayName": "Styled(styled.button)",
                                                                        "foldedComponentIds": Array [
                                                                          "sc-cSHVUG",
                                                                        ],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-jlyJG",
                                                                        "target": "button",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={null}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      className="sc-cSHVUG sc-jlyJG cUQmju"
                                                                      data-testhook-id="jenkins-0-select-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <EditIcon
                                                                        color="#1779ba"
                                                                        size={26}
                                                                      >
                                                                        <svg
                                                                          height={26}
                                                                          version="1.1"
                                                                          viewBox="0 0 24 24"
                                                                          width={26}
                                                                          xmlns="http://www.w3.org/2000/svg"
                                                                        >
                                                                          <path
                                                                            d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                            fill="#1779ba"
                                                                          />
                                                                        </svg>
                                                                      </EditIcon>
                                                                    </button>
                                                                  </StyledComponent>
                                                                </Styled(styled.button)>
                                                                <Styled(styled.button)
                                                                  data-testhook-id="jenkins-0-delete-step"
                                                                  onClick={[Function]}
                                                                >
                                                                  <StyledComponent
                                                                    data-testhook-id="jenkins-0-delete-step"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-gipzik",
                                                                          "isStatic": false,
                                                                          "lastClassName": "lduBUg",
                                                                          "rules": Array [
                                                                            "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                          ],
                                                                        },
                                                                        "displayName": "Styled(styled.button)",
                                                                        "foldedComponentIds": Array [
                                                                          "sc-cSHVUG",
                                                                        ],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-gipzik",
                                                                        "target": "button",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={null}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      className="sc-cSHVUG sc-gipzik lduBUg"
                                                                      data-testhook-id="jenkins-0-delete-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <RemoveIcon
                                                                        color="#1779ba"
                                                                        size={20}
                                                                      >
                                                                        <svg
                                                                          height={20}
                                                                          version="1.1"
                                                                          viewBox="0 0 32 32"
                                                                          width={20}
                                                                          xmlns="http://www.w3.org/2000/svg"
                                                                        >
                                                                          <title>
                                                                            trash
                                                                          </title>
                                                                          <path
                                                                            d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                            fill="#1779ba"
                                                                          />
                                                                        </svg>
                                                                      </RemoveIcon>
                                                                    </button>
                                                                  </StyledComponent>
                                                                </Styled(styled.button)>
                                                              </div>
                                                            </StyledComponent>
                                                          </styled.div>
                                                        </header>
                                                      </StyledComponent>
                                                    </Styled(styled.header)>
                                                  </section>
                                                </StyledComponent>
                                              </styled.section>
                                            </Step>
                                          </section>
                                        </StyledComponent>
                                      </Styled(styled.section)>
                                    </ul>
                                  </StepsContainer>
                                </Segment>
                              </ul>
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eTuwsz",
                          "isStatic": false,
                          "lastClassName": "cdixMS",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-eTuwsz",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-bdVaJa sc-eTuwsz cdixMS"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <JsonSignAndSubmit>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kkGfuU",
                            "isStatic": false,
                            "lastClassName": "hWfVhn",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kkGfuU",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kkGfuU hWfVhn"
                      >
                        <LoaderButton
                          buttonType="button"
                          dataTesthookId="layout-json-form-submit-button"
                          onClick={[Function]}
                        >
                          <styled.button
                            data-testhook-id="layout-json-form-submit-button"
                            onClick={[Function]}
                            type="button"
                          >
                            <StyledComponent
                              data-testhook-id="layout-json-form-submit-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iAyFgw",
                                    "isStatic": false,
                                    "lastClassName": "kuBZXY",
                                    "rules": Array [
                                      "
  ",
                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: pointer;
  }
",
                                      "

  background-color: ",
                                      [Function],
                                      ";

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: ",
                                      [Function],
                                      "
  }
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-iAyFgw",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="sc-iAyFgw kuBZXY"
                                data-testhook-id="layout-json-form-submit-button"
                                onClick={[Function]}
                                type="button"
                              >
                                Sign and Submit
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </LoaderButton>
                        <Styled(Styled(styled.button))
                          data-testhook="cancel-button"
                          onMouseDown={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            data-testhook="cancel-button"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jqCOkK",
                                  "isStatic": false,
                                  "lastClassName": "jrhpuB",
                                  "rules": Array [
                                    "
  ",
                                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "

  background-color: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: ",
                                    [Function],
                                    "
  }
",
                                    "
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  border: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    color: ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "
  margin-left: 1rem;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(styled.button))",
                                "foldedComponentIds": Array [
                                  "sc-iAyFgw",
                                  "sc-cvbbAY",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jqCOkK",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onMouseDown={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-iAyFgw sc-cvbbAY sc-jqCOkK jrhpuB"
                              data-testhook="cancel-button"
                              onMouseDown={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </Styled(Styled(styled.button))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </JsonSignAndSubmit>
                <LayoutSigner>
                  <PassphraseDialogBox
                    onCancel={[Function]}
                    onConfirm={[Function]}
                    passphrase=""
                    showCryptoExceptionMessage={false}
                    showDialog={false}
                    showInvalidPassphraseMessage={false}
                  />
                </LayoutSigner>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title="Edit step approve configuration"
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gzVnrw",
                "isStatic": false,
                "lastClassName": "cxdaOh",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gzVnrw",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-gzVnrw cxdaOh"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "isiUEp",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: ",
                        [Function],
                        ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-dnqmqq isiUEp"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iwsKbI",
                            "isStatic": false,
                            "lastClassName": "jYrlHi",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iwsKbI",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-iwsKbI jYrlHi"
                      >
                        Edit step approve configuration
                      </p>
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "jFZBXo",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-htoDjs jFZBXo"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kIPQKe",
                            "isStatic": false,
                            "lastClassName": "jgMiIX",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kIPQKe",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kIPQKe jgMiIX"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-eXEjpC",
                                  "isStatic": false,
                                  "lastClassName": "fuVqJC",
                                  "rules": Array [],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-eXEjpC",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-eXEjpC fuVqJC"
                            >
                              <RequiredNumberOfLinks>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dqBHgY",
                                          "isStatic": false,
                                          "lastClassName": "eEOMaY",
                                          "rules": Array [
                                            "
  margin: 0 0 1rem;

  ",
                                            ".sc-VigVT",
                                            " {
    margin: 0;
  }

  ",
                                            ".sc-jTzLTM",
                                            " {
    margin: 0;
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-dqBHgY",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-dqBHgY eEOMaY"
                                    >
                                      <Styled(styled.div)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jDwBTQ",
                                                "isStatic": false,
                                                "lastClassName": "jBdFgw",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: column;
",
                                                  "
  display: flex;
  flex-direction: column;
  width: 100%;

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.div)",
                                              "foldedComponentIds": Array [
                                                "sc-bwzfXH",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-jDwBTQ",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-bwzfXH sc-jDwBTQ jBdFgw"
                                          >
                                            <form
                                              data-testhook-id="required-number-of-links-form"
                                              onBlur={[Function]}
                                              onSubmit={[Function]}
                                            >
                                              <FormInput
                                                dataTesthookId="required-number-of-links-form-field-0"
                                                disabled={false}
                                                formType="text"
                                                innerRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-VigVT cBJosH"
                                                      data-testhook-id="required-number-of-links-form-field-0"
                                                      name="requiredNumberOfLinks"
                                                      type="text"
                                                      value=""
                                                    />,
                                                  }
                                                }
                                                labelValue="Required Number Of Links*"
                                                name="requiredNumberOfLinks"
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                value=""
                                              >
                                                <styled.div>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-eNQAEJ",
                                                          "isStatic": false,
                                                          "lastClassName": "gXOgPQ",
                                                          "rules": Array [
                                                            "
  display: flex;
  flex-direction: column;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-eNQAEJ",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <div
                                                      className="sc-eNQAEJ gXOgPQ"
                                                    >
                                                      <styled.label>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-jKJlTe",
                                                                "isStatic": false,
                                                                "lastClassName": "jKKzGO",
                                                                "rules": Array [
                                                                  "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                                  [Function],
                                                                  ";
",
                                                                ],
                                                              },
                                                              "displayName": "styled.label",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-jKJlTe",
                                                              "target": "label",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <label
                                                            className="sc-jKJlTe jKKzGO"
                                                          >
                                                            Required Number Of Links*
                                                          </label>
                                                        </StyledComponent>
                                                      </styled.label>
                                                      <styled.input
                                                        data-testhook-id="required-number-of-links-form-field-0"
                                                        disabled={false}
                                                        name="requiredNumberOfLinks"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <StyledComponent
                                                          data-testhook-id="required-number-of-links-form-field-0"
                                                          disabled={false}
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-VigVT",
                                                                "isStatic": false,
                                                                "lastClassName": "cBJosH",
                                                                "rules": Array [
                                                                  "
  ",
                                                                  "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                  [Function],
                                                                  ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                                  [Function],
                                                                  ";
  border-radius: 0;
  background-color: ",
                                                                  [Function],
                                                                  ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                                  [Function],
                                                                  ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                  [Function],
                                                                  ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                  [Function],
                                                                  ";
    box-shadow: 0 0 5px ",
                                                                  [Function],
                                                                  ";
  }
",
                                                                  "
",
                                                                ],
                                                              },
                                                              "displayName": "styled.input",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-VigVT",
                                                              "target": "input",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={
                                                            Object {
                                                              "current": <input
                                                                class="sc-VigVT cBJosH"
                                                                data-testhook-id="required-number-of-links-form-field-0"
                                                                name="requiredNumberOfLinks"
                                                                type="text"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          name="requiredNumberOfLinks"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <input
                                                            className="sc-VigVT cBJosH"
                                                            data-testhook-id="required-number-of-links-form-field-0"
                                                            disabled={false}
                                                            name="requiredNumberOfLinks"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </StyledComponent>
                                                      </styled.input>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                              </FormInput>
                                            </form>
                                          </div>
                                        </StyledComponent>
                                      </Styled(styled.div)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </RequiredNumberOfLinks>
                              <ApprovalConfigEditor>
                                <ArtifactCollectorEditor
                                  artifactCollectorSpecifications={
                                    Array [
                                      Object {
                                        "context": Object {
                                          "applicationName": "appName",
                                        },
                                        "name": "collector1",
                                        "type": "XLDEPLOY",
                                        "uri": "http://collecet:454/service",
                                      },
                                    ]
                                  }
                                  title="Approval collectors"
                                >
                                  <Styled(styled.section)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hEsumM",
                                            "isStatic": false,
                                            "lastClassName": "eAVtxg",
                                            "rules": Array [
                                              "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                              [Function],
                                              ";

  background: ",
                                              [Function],
                                              ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.section)",
                                          "foldedComponentIds": Array [
                                            "sc-fjdhpX",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-hEsumM",
                                          "target": "section",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <section
                                        className="sc-fjdhpX sc-hEsumM eAVtxg"
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-chPdSV",
                                                  "isStatic": false,
                                                  "lastClassName": "bBFivD",
                                                  "rules": Array [
                                                    "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-chPdSV",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-chPdSV bBFivD"
                                            >
                                              <Styled(styled.header)>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ktHwxA",
                                                        "isStatic": false,
                                                        "lastClassName": "eqTlvr",
                                                        "rules": Array [
                                                          "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                          [Function],
                                                          ";
  background-color: ",
                                                          [Function],
                                                          ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                        ],
                                                      },
                                                      "displayName": "Styled(styled.header)",
                                                      "foldedComponentIds": Array [
                                                        "sc-kgoBCf",
                                                      ],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ktHwxA",
                                                      "target": "header",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <header
                                                    className="sc-kgoBCf sc-ktHwxA eqTlvr"
                                                  >
                                                    Approval collectors
                                                  </header>
                                                </StyledComponent>
                                              </Styled(styled.header)>
                                              <Styled(styled.button)
                                                data-testhook-id="add-collector"
                                                onClick={[Function]}
                                              >
                                                <StyledComponent
                                                  data-testhook-id="add-collector"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-cIShpX",
                                                        "isStatic": false,
                                                        "lastClassName": "feHJYR",
                                                        "rules": Array [
                                                          "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                          [Function],
                                                          "
",
                                                        ],
                                                      },
                                                      "displayName": "Styled(styled.button)",
                                                      "foldedComponentIds": Array [
                                                        "sc-kAzzGY",
                                                      ],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-cIShpX",
                                                      "target": "button",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  onClick={[Function]}
                                                >
                                                  <button
                                                    className="sc-kAzzGY sc-cIShpX feHJYR"
                                                    data-testhook-id="add-collector"
                                                    onClick={[Function]}
                                                  >
                                                    <PlusIcon
                                                      color="#1779ba"
                                                      size={24}
                                                    >
                                                      <svg
                                                        height={24}
                                                        version="1.1"
                                                        viewBox="0 0 32 32"
                                                        width={24}
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <title>
                                                          plus
                                                        </title>
                                                        <path
                                                          d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                          fill="#1779ba"
                                                        />
                                                      </svg>
                                                    </PlusIcon>
                                                  </button>
                                                </StyledComponent>
                                              </Styled(styled.button)>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                        <styled.ul>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-kpOJdX",
                                                  "isStatic": false,
                                                  "lastClassName": "idQdSz",
                                                  "rules": Array [
                                                    "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                  ],
                                                },
                                                "displayName": "styled.ul",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-kpOJdX",
                                                "target": "ul",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <ul
                                              className="sc-kpOJdX idQdSz"
                                            >
                                              <li
                                                key="collector-row-0"
                                              >
                                                <styled.section>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-feJyhm",
                                                          "isStatic": false,
                                                          "lastClassName": "dBBDPo",
                                                          "rules": Array [
                                                            "
  width: 100%;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.section",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-feJyhm",
                                                        "target": "section",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <section
                                                      className="sc-feJyhm dBBDPo"
                                                    >
                                                      <Styled(styled.header)
                                                        clickable={false}
                                                      >
                                                        <StyledComponent
                                                          clickable={false}
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-kafWEX",
                                                                "isStatic": false,
                                                                "lastClassName": "fqIkvz",
                                                                "rules": Array [
                                                                  "
  border: 1px solid
    ",
                                                                  [Function],
                                                                  ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                                  [Function],
                                                                  ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                                  ".sc-VigVT",
                                                                  " {
    margin: 0;
  }

  ",
                                                                  ".sc-jTzLTM",
                                                                  " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                                  [Function],
                                                                  ";
    border: 1px solid ",
                                                                  [Function],
                                                                  ";
  }
",
                                                                ],
                                                              },
                                                              "displayName": "Styled(styled.header)",
                                                              "foldedComponentIds": Array [
                                                                "sc-ckVGcZ",
                                                              ],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-kafWEX",
                                                              "target": "header",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <header
                                                            className="sc-ckVGcZ sc-kafWEX fqIkvz"
                                                          >
                                                            <styled.span>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-dxgOiQ",
                                                                      "isStatic": false,
                                                                      "lastClassName": "fMWTVD",
                                                                      "rules": Array [
                                                                        "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.span",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-dxgOiQ",
                                                                    "target": "span",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <span
                                                                  className="sc-dxgOiQ fMWTVD"
                                                                >
                                                                  collector1
                                                                   - 
                                                                  xldeploy
                                                                   -
                                                                   
                                                                  http://collecet:454/service
                                                                </span>
                                                              </StyledComponent>
                                                            </styled.span>
                                                            <styled.div>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-jzJRlG",
                                                                      "isStatic": false,
                                                                      "lastClassName": "fswDQX",
                                                                      "rules": Array [
                                                                        "
  display: flex;
  align-items: center;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.div",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-jzJRlG",
                                                                    "target": "div",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <div
                                                                  className="sc-jzJRlG fswDQX"
                                                                >
                                                                  <Styled(styled.button)
                                                                    data-testhook-id="edit-collector-0"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <StyledComponent
                                                                      data-testhook-id="edit-collector-0"
                                                                      forwardedComponent={
                                                                        Object {
                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                          "attrs": Array [],
                                                                          "componentStyle": ComponentStyle {
                                                                            "componentId": "sc-iELTvK",
                                                                            "isStatic": false,
                                                                            "lastClassName": "eXzmba",
                                                                            "rules": Array [
                                                                              "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                            ],
                                                                          },
                                                                          "displayName": "Styled(styled.button)",
                                                                          "foldedComponentIds": Array [
                                                                            "sc-cSHVUG",
                                                                          ],
                                                                          "render": [Function],
                                                                          "styledComponentId": "sc-iELTvK",
                                                                          "target": "button",
                                                                          "toString": [Function],
                                                                          "warnTooManyClasses": [Function],
                                                                          "withComponent": [Function],
                                                                        }
                                                                      }
                                                                      forwardedRef={null}
                                                                      onClick={[Function]}
                                                                    >
                                                                      <button
                                                                        className="sc-cSHVUG sc-iELTvK eXzmba"
                                                                        data-testhook-id="edit-collector-0"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <EditIcon
                                                                          color="#1779ba"
                                                                          size={26}
                                                                        >
                                                                          <svg
                                                                            height={26}
                                                                            version="1.1"
                                                                            viewBox="0 0 24 24"
                                                                            width={26}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <path
                                                                              d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                              fill="#1779ba"
                                                                            />
                                                                          </svg>
                                                                        </EditIcon>
                                                                      </button>
                                                                    </StyledComponent>
                                                                  </Styled(styled.button)>
                                                                  <Styled(styled.button)
                                                                    data-testhook-id="delete-collector-0"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <StyledComponent
                                                                      data-testhook-id="delete-collector-0"
                                                                      forwardedComponent={
                                                                        Object {
                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                          "attrs": Array [],
                                                                          "componentStyle": ComponentStyle {
                                                                            "componentId": "sc-jwKygS",
                                                                            "isStatic": false,
                                                                            "lastClassName": "dabqks",
                                                                            "rules": Array [
                                                                              "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                            ],
                                                                          },
                                                                          "displayName": "Styled(styled.button)",
                                                                          "foldedComponentIds": Array [
                                                                            "sc-cSHVUG",
                                                                          ],
                                                                          "render": [Function],
                                                                          "styledComponentId": "sc-jwKygS",
                                                                          "target": "button",
                                                                          "toString": [Function],
                                                                          "warnTooManyClasses": [Function],
                                                                          "withComponent": [Function],
                                                                        }
                                                                      }
                                                                      forwardedRef={null}
                                                                      onClick={[Function]}
                                                                    >
                                                                      <button
                                                                        className="sc-cSHVUG sc-jwKygS dabqks"
                                                                        data-testhook-id="delete-collector-0"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <RemoveIcon
                                                                          color="#1779ba"
                                                                          size={24}
                                                                        >
                                                                          <svg
                                                                            height={24}
                                                                            version="1.1"
                                                                            viewBox="0 0 32 32"
                                                                            width={24}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <title>
                                                                              trash
                                                                            </title>
                                                                            <path
                                                                              d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                              fill="#1779ba"
                                                                            />
                                                                          </svg>
                                                                        </RemoveIcon>
                                                                      </button>
                                                                    </StyledComponent>
                                                                  </Styled(styled.button)>
                                                                </div>
                                                              </StyledComponent>
                                                            </styled.div>
                                                          </header>
                                                        </StyledComponent>
                                                      </Styled(styled.header)>
                                                    </section>
                                                  </StyledComponent>
                                                </styled.section>
                                              </li>
                                            </ul>
                                          </StyledComponent>
                                        </styled.ul>
                                      </section>
                                    </StyledComponent>
                                  </Styled(styled.section)>
                                </ArtifactCollectorEditor>
                              </ApprovalConfigEditor>
                              <StepAuthorizedAccountEditor>
                                <Styled(styled.section)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dfVpRl",
                                          "isStatic": false,
                                          "lastClassName": "czegfj",
                                          "rules": Array [
                                            "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                            [Function],
                                            ";

  background: ",
                                            [Function],
                                            ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.section)",
                                        "foldedComponentIds": Array [
                                          "sc-fjdhpX",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-dfVpRl",
                                        "target": "section",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <section
                                      className="sc-fjdhpX sc-dfVpRl czegfj"
                                    >
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-chPdSV",
                                                "isStatic": false,
                                                "lastClassName": "bBFivD",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-chPdSV",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-chPdSV bBFivD"
                                          >
                                            <Styled(styled.header)>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-gzOgki",
                                                      "isStatic": false,
                                                      "lastClassName": "gdmeaY",
                                                      "rules": Array [
                                                        "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                        [Function],
                                                        ";
  background-color: ",
                                                        [Function],
                                                        ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.header)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kgoBCf",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-gzOgki",
                                                    "target": "header",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <header
                                                  className="sc-kgoBCf sc-gzOgki gdmeaY"
                                                >
                                                  Authorized Personal Accounts
                                                </header>
                                              </StyledComponent>
                                            </Styled(styled.header)>
                                            <Styled(styled.button)
                                              data-testhook-id="add-key"
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                data-testhook-id="add-key"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-iyvyFf",
                                                      "isStatic": false,
                                                      "lastClassName": "jkOiXL",
                                                      "rules": Array [
                                                        "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                        [Function],
                                                        "
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.button)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kAzzGY",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-iyvyFf",
                                                    "target": "button",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="sc-kAzzGY sc-iyvyFf jkOiXL"
                                                  data-testhook-id="add-key"
                                                  onClick={[Function]}
                                                >
                                                  <PlusIcon
                                                    color="#1779ba"
                                                    size={24}
                                                  >
                                                    <svg
                                                      height={24}
                                                      version="1.1"
                                                      viewBox="0 0 32 32"
                                                      width={24}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <title>
                                                        plus
                                                      </title>
                                                      <path
                                                        d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                        fill="#1779ba"
                                                      />
                                                    </svg>
                                                  </PlusIcon>
                                                </button>
                                              </StyledComponent>
                                            </Styled(styled.button)>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.ul>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kpOJdX",
                                                "isStatic": false,
                                                "lastClassName": "idQdSz",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.ul",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kpOJdX",
                                              "target": "ul",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <ul
                                            className="sc-kpOJdX idQdSz"
                                          />
                                        </StyledComponent>
                                      </styled.ul>
                                    </section>
                                  </StyledComponent>
                                </Styled(styled.section)>
                              </StepAuthorizedAccountEditor>
                              <RuleEditor
                                addAction={27}
                                editAction={29}
                                removeAction={28}
                                title="Expected Materials"
                              >
                                <Styled(styled.section)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-btzYZH",
                                          "isStatic": false,
                                          "lastClassName": "jvrdbY",
                                          "rules": Array [
                                            "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                            [Function],
                                            ";

  background: ",
                                            [Function],
                                            ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                            "
  li ~ ",
                                            ".sc-jDwBTQ",
                                            " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                            ".sc-jDwBTQ",
                                            " {
    margin-top: 0;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.section)",
                                        "foldedComponentIds": Array [
                                          "sc-fjdhpX",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-btzYZH",
                                        "target": "section",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <section
                                      className="sc-fjdhpX sc-btzYZH jvrdbY"
                                    >
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-chPdSV",
                                                "isStatic": false,
                                                "lastClassName": "bBFivD",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-chPdSV",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-chPdSV bBFivD"
                                          >
                                            <Styled(styled.header)>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-lhVmIH",
                                                      "isStatic": false,
                                                      "lastClassName": "eHyLYd",
                                                      "rules": Array [
                                                        "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                        [Function],
                                                        ";
  background-color: ",
                                                        [Function],
                                                        ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.header)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kgoBCf",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-lhVmIH",
                                                    "target": "header",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <header
                                                  className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                                >
                                                  Expected Materials
                                                </header>
                                              </StyledComponent>
                                            </Styled(styled.header)>
                                            <Styled(styled.button)
                                              data-testhook-id="add-rule"
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                data-testhook-id="add-rule"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-bYSBpT",
                                                      "isStatic": false,
                                                      "lastClassName": "ftOxhC",
                                                      "rules": Array [
                                                        "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                        [Function],
                                                        "
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.button)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kAzzGY",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-bYSBpT",
                                                    "target": "button",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                                  data-testhook-id="add-rule"
                                                  onClick={[Function]}
                                                >
                                                  <PlusIcon
                                                    color="#1779ba"
                                                    size={24}
                                                  >
                                                    <svg
                                                      height={24}
                                                      version="1.1"
                                                      viewBox="0 0 32 32"
                                                      width={24}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <title>
                                                        plus
                                                      </title>
                                                      <path
                                                        d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                        fill="#1779ba"
                                                      />
                                                    </svg>
                                                  </PlusIcon>
                                                </button>
                                              </StyledComponent>
                                            </Styled(styled.button)>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.ul>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kpOJdX",
                                                "isStatic": false,
                                                "lastClassName": "idQdSz",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.ul",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kpOJdX",
                                              "target": "ul",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <ul
                                            className="sc-kpOJdX idQdSz"
                                          />
                                        </StyledComponent>
                                      </styled.ul>
                                    </section>
                                  </StyledComponent>
                                </Styled(styled.section)>
                              </RuleEditor>
                              <RuleEditor
                                addAction={24}
                                editAction={26}
                                removeAction={25}
                                title="Expected Products"
                              >
                                <Styled(styled.section)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-btzYZH",
                                          "isStatic": false,
                                          "lastClassName": "jvrdbY",
                                          "rules": Array [
                                            "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                            [Function],
                                            ";

  background: ",
                                            [Function],
                                            ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                            "
  li ~ ",
                                            ".sc-jDwBTQ",
                                            " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                            ".sc-jDwBTQ",
                                            " {
    margin-top: 0;
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.section)",
                                        "foldedComponentIds": Array [
                                          "sc-fjdhpX",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-btzYZH",
                                        "target": "section",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <section
                                      className="sc-fjdhpX sc-btzYZH jvrdbY"
                                    >
                                      <styled.div>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-chPdSV",
                                                "isStatic": false,
                                                "lastClassName": "bBFivD",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-chPdSV",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-chPdSV bBFivD"
                                          >
                                            <Styled(styled.header)>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-lhVmIH",
                                                      "isStatic": false,
                                                      "lastClassName": "eHyLYd",
                                                      "rules": Array [
                                                        "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                        [Function],
                                                        ";
  background-color: ",
                                                        [Function],
                                                        ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.header)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kgoBCf",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-lhVmIH",
                                                    "target": "header",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <header
                                                  className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                                >
                                                  Expected Products
                                                </header>
                                              </StyledComponent>
                                            </Styled(styled.header)>
                                            <Styled(styled.button)
                                              data-testhook-id="add-rule"
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                data-testhook-id="add-rule"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-bYSBpT",
                                                      "isStatic": false,
                                                      "lastClassName": "ftOxhC",
                                                      "rules": Array [
                                                        "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                        [Function],
                                                        "
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.button)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kAzzGY",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-bYSBpT",
                                                    "target": "button",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                                  data-testhook-id="add-rule"
                                                  onClick={[Function]}
                                                >
                                                  <PlusIcon
                                                    color="#1779ba"
                                                    size={24}
                                                  >
                                                    <svg
                                                      height={24}
                                                      version="1.1"
                                                      viewBox="0 0 32 32"
                                                      width={24}
                                                      xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                      <title>
                                                        plus
                                                      </title>
                                                      <path
                                                        d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                        fill="#1779ba"
                                                      />
                                                    </svg>
                                                  </PlusIcon>
                                                </button>
                                              </StyledComponent>
                                            </Styled(styled.button)>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.ul>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kpOJdX",
                                                "isStatic": false,
                                                "lastClassName": "idQdSz",
                                                "rules": Array [
                                                  "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                ],
                                              },
                                              "displayName": "styled.ul",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kpOJdX",
                                              "target": "ul",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <ul
                                            className="sc-kpOJdX idQdSz"
                                          />
                                        </StyledComponent>
                                      </styled.ul>
                                    </section>
                                  </StyledComponent>
                                </Styled(styled.section)>
                              </RuleEditor>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;

exports[`renders correctly with existing layout without crypto support 1`] = `
<NoCryptoWarning>
  <Warning
    message="The web crypto api is not present in the browser your using.
        Argos Notary layout signing and key management is only supported by a recent version of Chrome, Firefox, Safari or Edge."
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "lastClassName": "frPGAT",
              "rules": Array [
                "
  display: flex;
  align-items: center;
  border: 1px solid ",
                [Function],
                ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-ifAKCX frPGAT"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bZQynM",
                    "isStatic": false,
                    "lastClassName": "hKJZMA",
                    "rules": Array [
                      "
  margin: 0 2rem 0 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bZQynM",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-bZQynM hKJZMA"
              >
                <WarningIcon
                  color="red"
                  size={48}
                >
                  <svg
                    height={48}
                    version="1.1"
                    viewBox="0 0 32 32"
                    width={48}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <title>
                      warning
                    </title>
                    <path
                      d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                      fill="red"
                    />
                     
                    <path
                      d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                      fill="red"
                    />
                     
                    <path
                      d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                      fill="red"
                    />
                  </svg>
                </WarningIcon>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-EHOje",
                    "isStatic": false,
                    "lastClassName": "jqcrHf",
                    "rules": Array [
                      "
  color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-EHOje",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-EHOje jqcrHf"
              >
                The web crypto api is not present in the browser your using.
        Argos Notary layout signing and key management is only supported by a recent version of Chrome, Firefox, Safari or Edge.
              </p>
            </StyledComponent>
          </styled.p>
        </section>
      </StyledComponent>
    </styled.section>
  </Warning>
</NoCryptoWarning>
`;

exports[`renders correctly with existing layout: withLayoutDetailsEditor 1`] = `
<LayoutAuthorizedAccountEditor>
  <Styled(styled.section)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bbmXgH",
            "isStatic": false,
            "lastClassName": "kRCzco",
            "rules": Array [
              "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
              [Function],
              ";

  background: ",
              [Function],
              ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
            ],
          },
          "displayName": "Styled(styled.section)",
          "foldedComponentIds": Array [
            "sc-fjdhpX",
          ],
          "render": [Function],
          "styledComponentId": "sc-bbmXgH",
          "target": "section",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <section
        className="sc-fjdhpX sc-bbmXgH kRCzco"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": false,
                  "lastClassName": "bBFivD",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-chPdSV bBFivD"
            >
              <Styled(styled.header)>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gGBfsJ",
                        "isStatic": false,
                        "lastClassName": "iWHpie",
                        "rules": Array [
                          "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                          [Function],
                          ";
  background-color: ",
                          [Function],
                          ";
  padding: 0.25rem 2rem 0.4rem;
",
                        ],
                      },
                      "displayName": "Styled(styled.header)",
                      "foldedComponentIds": Array [
                        "sc-kgoBCf",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-gGBfsJ",
                      "target": "header",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <header
                    className="sc-kgoBCf sc-gGBfsJ iWHpie"
                  >
                    Authorized Accounts
                  </header>
                </StyledComponent>
              </Styled(styled.header)>
              <Styled(styled.button)
                data-testhook-id="add-item"
                onClick={[Function]}
              >
                <StyledComponent
                  data-testhook-id="add-item"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-jnlKLf",
                        "isStatic": false,
                        "lastClassName": "gWEUFB",
                        "rules": Array [
                          "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "Styled(styled.button)",
                      "foldedComponentIds": Array [
                        "sc-kAzzGY",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-jnlKLf",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[Function]}
                >
                  <button
                    className="sc-kAzzGY sc-jnlKLf gWEUFB"
                    data-testhook-id="add-item"
                    onClick={[Function]}
                  >
                    <PlusIcon
                      color="#1779ba"
                      size={24}
                    >
                      <svg
                        height={24}
                        version="1.1"
                        viewBox="0 0 32 32"
                        width={24}
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <title>
                          plus
                        </title>
                        <path
                          d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                          fill="#1779ba"
                        />
                      </svg>
                    </PlusIcon>
                  </button>
                </StyledComponent>
              </Styled(styled.button)>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.ul>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-kpOJdX",
                  "isStatic": false,
                  "lastClassName": "idQdSz",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                  ],
                },
                "displayName": "styled.ul",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-kpOJdX",
                "target": "ul",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <ul
              className="sc-kpOJdX idQdSz"
            >
              <li
                key="item-row-0"
              >
                <Styled(styled.header)
                  clickable={false}
                >
                  <StyledComponent
                    clickable={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-fYxtnH",
                          "isStatic": false,
                          "lastClassName": "fTEzbr",
                          "rules": Array [
                            "
  border: 1px solid
    ",
                            [Function],
                            ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                            [Function],
                            ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                            ".sc-VigVT",
                            " {
    margin: 0;
  }

  ",
                            ".sc-jTzLTM",
                            " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                            [Function],
                            ";
    border: 1px solid ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.header)",
                        "foldedComponentIds": Array [
                          "sc-ckVGcZ",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-fYxtnH",
                        "target": "header",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <header
                      className="sc-ckVGcZ sc-fYxtnH fTEzbr"
                    >
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-dxgOiQ",
                                "isStatic": false,
                                "lastClassName": "fMWTVD",
                                "rules": Array [
                                  "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-dxgOiQ",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-dxgOiQ fMWTVD"
                          >
                            <styled.span
                              active={true}
                            >
                              <StyledComponent
                                active={true}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-uJMKN",
                                      "isStatic": false,
                                      "lastClassName": "fqkCgf",
                                      "rules": Array [
                                        "
  color: ",
                                        [Function],
                                        ";
  padding: 0 0.5rem;
  border: 2px solid
    ",
                                        [Function],
                                        ";
  margin: 0 0.5rem 0 0;
  font-size: 0.9rem;
",
                                      ],
                                    },
                                    "displayName": "styled.span",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-uJMKN",
                                    "target": "span",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <span
                                  className="sc-uJMKN fsYqXw"
                                >
                                  active key
                                </span>
                              </StyledComponent>
                            </styled.span>
                            account 1
                          </span>
                        </StyledComponent>
                      </styled.span>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jzJRlG",
                                "isStatic": false,
                                "lastClassName": "fswDQX",
                                "rules": Array [
                                  "
  display: flex;
  align-items: center;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jzJRlG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-jzJRlG fswDQX"
                          >
                            <Styled(styled.button)
                              data-testhook-id="delete-item-0"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                data-testhook-id="delete-item-0"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-tilXH",
                                      "isStatic": false,
                                      "lastClassName": "jTwnJG",
                                      "rules": Array [
                                        "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.button)",
                                    "foldedComponentIds": Array [
                                      "sc-cSHVUG",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-tilXH",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <button
                                  className="sc-cSHVUG sc-tilXH jTwnJG"
                                  data-testhook-id="delete-item-0"
                                  onClick={[Function]}
                                >
                                  <RemoveIcon
                                    color="#1779ba"
                                    size={24}
                                  >
                                    <svg
                                      height={24}
                                      version="1.1"
                                      viewBox="0 0 32 32"
                                      width={24}
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <title>
                                        trash
                                      </title>
                                      <path
                                        d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                        fill="#1779ba"
                                      />
                                    </svg>
                                  </RemoveIcon>
                                </button>
                              </StyledComponent>
                            </Styled(styled.button)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </header>
                  </StyledComponent>
                </Styled(styled.header)>
              </li>
              <li
                key="item-row-1"
              >
                <Styled(styled.header)
                  clickable={false}
                >
                  <StyledComponent
                    clickable={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-fYxtnH",
                          "isStatic": false,
                          "lastClassName": "fTEzbr",
                          "rules": Array [
                            "
  border: 1px solid
    ",
                            [Function],
                            ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                            [Function],
                            ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                            ".sc-VigVT",
                            " {
    margin: 0;
  }

  ",
                            ".sc-jTzLTM",
                            " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                            [Function],
                            ";
    border: 1px solid ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "Styled(styled.header)",
                        "foldedComponentIds": Array [
                          "sc-ckVGcZ",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-fYxtnH",
                        "target": "header",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <header
                      className="sc-ckVGcZ sc-fYxtnH fTEzbr"
                    >
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-dxgOiQ",
                                "isStatic": false,
                                "lastClassName": "fMWTVD",
                                "rules": Array [
                                  "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-dxgOiQ",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-dxgOiQ fMWTVD"
                          >
                            <styled.span
                              active={false}
                            >
                              <StyledComponent
                                active={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-uJMKN",
                                      "isStatic": false,
                                      "lastClassName": "fqkCgf",
                                      "rules": Array [
                                        "
  color: ",
                                        [Function],
                                        ";
  padding: 0 0.5rem;
  border: 2px solid
    ",
                                        [Function],
                                        ";
  margin: 0 0.5rem 0 0;
  font-size: 0.9rem;
",
                                      ],
                                    },
                                    "displayName": "styled.span",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-uJMKN",
                                    "target": "span",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <span
                                  className="sc-uJMKN fqkCgf"
                                >
                                  inactive key
                                </span>
                              </StyledComponent>
                            </styled.span>
                            account 2
                          </span>
                        </StyledComponent>
                      </styled.span>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jzJRlG",
                                "isStatic": false,
                                "lastClassName": "fswDQX",
                                "rules": Array [
                                  "
  display: flex;
  align-items: center;
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-jzJRlG",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-jzJRlG fswDQX"
                          >
                            <Styled(styled.button)
                              data-testhook-id="delete-item-1"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                data-testhook-id="delete-item-1"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-tilXH",
                                      "isStatic": false,
                                      "lastClassName": "jTwnJG",
                                      "rules": Array [
                                        "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.button)",
                                    "foldedComponentIds": Array [
                                      "sc-cSHVUG",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-tilXH",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <button
                                  className="sc-cSHVUG sc-tilXH jTwnJG"
                                  data-testhook-id="delete-item-1"
                                  onClick={[Function]}
                                >
                                  <RemoveIcon
                                    color="#1779ba"
                                    size={24}
                                  >
                                    <svg
                                      height={24}
                                      version="1.1"
                                      viewBox="0 0 32 32"
                                      width={24}
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <title>
                                        trash
                                      </title>
                                      <path
                                        d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                        fill="#1779ba"
                                      />
                                    </svg>
                                  </RemoveIcon>
                                </button>
                              </StyledComponent>
                            </Styled(styled.button)>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </header>
                  </StyledComponent>
                </Styled(styled.header)>
              </li>
            </ul>
          </StyledComponent>
        </styled.ul>
      </section>
    </StyledComponent>
  </Styled(styled.section)>
</LayoutAuthorizedAccountEditor>
`;

exports[`renders correctly with non existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "lastClassName": "cxdaOh",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-gzVnrw cxdaOh"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "isiUEp",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: ",
                      [Function],
                      ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-dnqmqq cpDgSY"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jYrlHi",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-iwsKbI jYrlHi"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "gMTTkT",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-gZMcBi gMTTkT"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "jFZBXo",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-htoDjs gcwhQU"
              >
                <PanelBreadCrumb
                  breadcrumb="label / "
                  node={
                    Object {
                      "hasChildren": false,
                      "name": "layout",
                      "parentId": "",
                      "referenceId": "supplyChainId",
                      "type": "SUPPLY_CHAIN",
                    }
                  }
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ibxdXY",
                            "isStatic": false,
                            "lastClassName": "eefExt",
                            "rules": Array [
                              "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ibxdXY",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-ibxdXY eefExt"
                      >
                        Selected: 
                        label / 
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-RefOD",
                                  "isStatic": false,
                                  "lastClassName": "ewapal",
                                  "rules": Array [
                                    "
  color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-RefOD",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-RefOD ewapal"
                            >
                               / 
                              layout
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.hr>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "jLEqym",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.hr",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-bdVaJa jLEqym"
                      />
                    </StyledComponent>
                  </styled.hr>
                </PanelBreadCrumb>
                <Layout>
                  <styled.section
                    data-testhook-id="layout-edit"
                  >
                    <StyledComponent
                      data-testhook-id="layout-edit"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwCtUz",
                            "isStatic": false,
                            "lastClassName": "gccGwq",
                            "rules": Array [
                              "
  width: 100%;
  margin: 0 0 1rem;
",
                            ],
                          },
                          "displayName": "styled.section",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwCtUz",
                          "target": "section",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <section
                        className="sc-bwCtUz gccGwq"
                        data-testhook-id="layout-edit"
                      >
                        <Styled(styled.header)
                          active={true}
                          clickable={false}
                        >
                          <StyledComponent
                            active={true}
                            clickable={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iQKALj",
                                  "isStatic": false,
                                  "lastClassName": "ghZrqH",
                                  "rules": Array [
                                    "
  border: 1px solid
    ",
                                    [Function],
                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                    [Function],
                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                    ".sc-VigVT",
                                    " {
    margin: 0;
  }

  ",
                                    ".sc-jTzLTM",
                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "Styled(styled.header)",
                                "foldedComponentIds": Array [
                                  "sc-ckVGcZ",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-iQKALj",
                                "target": "header",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <header
                              className="sc-ckVGcZ sc-iQKALj ghZrqH"
                            >
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dxgOiQ",
                                        "isStatic": false,
                                        "lastClassName": "fMWTVD",
                                        "rules": Array [
                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dxgOiQ",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-dxgOiQ fMWTVD"
                                  >
                                    Layout
                                  </span>
                                </StyledComponent>
                              </styled.span>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jzJRlG",
                                        "isStatic": false,
                                        "lastClassName": "fswDQX",
                                        "rules": Array [
                                          "
  display: flex;
  align-items: center;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jzJRlG",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jzJRlG fswDQX"
                                  >
                                    <Styled(styled.button)
                                      data-testhook-id="show-layout-json"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="show-layout-json"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="show-layout-json"
                                          onClick={[Function]}
                                        >
                                          <JsonIcon
                                            color="#1779ba"
                                            size={26}
                                          >
                                            <svg
                                              height={26}
                                              version="1.1"
                                              viewBox="0 0 8.4667 8.4667"
                                              width={26}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <g
                                                aria-label="{;}"
                                              >
                                                <path
                                                  d="m7.2453 2.9003h-0.12058q-0.30317 0-0.43925 0.12058-0.13608 0.11886-0.13608 0.42547v0.25321q0 0.32728-0.19982 0.49609-0.19809 0.17053-0.53227 0.17053h-0.47198v-0.38585h0.19637q0.10335 0 0.18603-0.015503 0.084405-0.015503 0.14125-0.058566 0.058566-0.044786 0.08785-0.13091 0.029283-0.084405 0.029283-0.21876v-0.18776q0-0.24116 0.13436-0.40308 0.13608-0.16192 0.38585-0.25666v-0.041341q-0.24977-0.09474-0.38585-0.25666-0.13436-0.16192-0.13436-0.40308v-0.18776q0-0.13436-0.029283-0.21876-0.029284-0.086127-0.08785-0.13091-0.056844-0.043064-0.14125-0.058566-0.082682-0.015503-0.18603-0.015503h-0.19637v-0.38585h0.47198q0.33417 0 0.53227 0.17053 0.19982 0.16881 0.19982 0.49609v0.25321q0 0.30661 0.13608 0.42719 0.13608 0.11886 0.43925 0.11886h0.12058zm-2.6338-0.46681h-0.64423v-0.67696h0.64423zm0.10508 0.5805-0.62012 1.3143h-0.38413l0.33934-1.3143zm-1.4831 1.3522h-0.47198q-0.33417 0-0.53399-0.17053-0.19809-0.16881-0.19809-0.49609v-0.25321q0-0.30661-0.13608-0.42547-0.13608-0.12058-0.43925-0.12058h-0.12058v-0.42375h0.12058q0.30317 0 0.43925-0.11886 0.13608-0.12058 0.13608-0.42719v-0.25321q0-0.32728 0.19809-0.49609 0.19982-0.17053 0.53399-0.17053h0.47198v0.38585h-0.19637q-0.10335 0-0.18776 0.015503-0.082682 0.015503-0.13953 0.058566-0.058566 0.044786-0.08785 0.13091-0.029283 0.084405-0.029283 0.21876v0.18776q0 0.24116-0.13608 0.40308-0.13436 0.16192-0.38413 0.25666v0.041341q0.24977 0.09474 0.38413 0.25666 0.13608 0.16192 0.13608 0.40308v0.18776q0 0.13436 0.029283 0.21876 0.029283 0.086127 0.08785 0.13091 0.055121 0.044786 0.13953 0.058566 0.084405 0.015503 0.18776 0.015503h0.19637z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <g
                                                aria-label="JSON"
                                                transform="scale(1.0126 .98752)"
                                              >
                                                <path
                                                  d="m7.6325 7.8697h-0.44741l-0.76423-1.2358v1.2358h-0.42564v-1.8005h0.55503l0.65661 1.0315v-1.0315h0.42564zm-1.9904-0.89966q0 0.43048-0.24668 0.68442-0.24668 0.25273-0.682 0.25273-0.43411 0-0.68079-0.25273-0.24668-0.25394-0.24668-0.68442 0-0.43411 0.24668-0.68563 0.24668-0.25273 0.68079-0.25273 0.4329 0 0.68079 0.25273 0.24789 0.25152 0.24789 0.68563zm-0.61549 0.45588q0.067716-0.082227 0.10037-0.19348 0.032649-0.11246 0.032649-0.26361 0-0.16204-0.037486-0.2757t-0.097947-0.1838q-0.06167-0.072553-0.14269-0.1052-0.079808-0.032649-0.16687-0.032649-0.088273 0-0.16687 0.03144-0.07739 0.03144-0.14269 0.10399-0.060461 0.067716-0.099156 0.18743-0.037486 0.1185-0.037486 0.2757 0 0.16083 0.036277 0.27449 0.037486 0.11246 0.097947 0.1838 0.060461 0.071344 0.14148 0.1052 0.081018 0.033858 0.1705 0.033858 0.089482 0 0.1705-0.033858 0.081018-0.035067 0.14148-0.10762zm-1.4547-0.12213q0 0.26603-0.22612 0.4329-0.22491 0.16566-0.61186 0.16566-0.22371 0-0.39058-0.038695-0.16566-0.039904-0.31077-0.10037v-0.43169h0.050787q0.1439 0.11488 0.32165 0.17655 0.17896 0.06167 0.34342 0.06167 0.042323 0 0.11125-0.00726 0.068926-0.00726 0.11246-0.024184 0.053206-0.021766 0.087064-0.054415 0.035067-0.032649 0.035067-0.096737 0-0.059252-0.050787-0.10157-0.049578-0.043528-0.14632-0.066503-0.10157-0.024184-0.21524-0.044741-0.11246-0.021766-0.21161-0.054415-0.22733-0.073762-0.3277-0.19952-0.099156-0.12697-0.099156-0.3144 0-0.25152 0.22491-0.40993 0.22612-0.15962 0.58042-0.15962 0.17776 0 0.35067 0.035067 0.17413 0.033858 0.3011 0.085854v0.41476h-0.049578q-0.10883-0.087063-0.26724-0.14511-0.1572-0.059252-0.32165-0.059252-0.058042 0-0.11608 0.00846-0.056833 0.00726-0.11004 0.029021-0.047159 0.018138-0.081018 0.055624-0.033858 0.036277-0.033858 0.083436 0 0.071344 0.054415 0.11004 0.054415 0.037486 0.20557 0.068925 0.099156 0.020557 0.18985 0.039904 0.091901 0.019347 0.1971 0.053206 0.20678 0.067716 0.30472 0.18501 0.099156 0.11608 0.099156 0.3023zm-1.8767 0.037486q0 0.1185-0.042323 0.2225-0.042323 0.10278-0.12576 0.17413-0.088273 0.076181-0.21282 0.1185-0.12455 0.041114-0.30835 0.041114-0.12455 0-0.23459-0.00967-0.11004-0.00846-0.19348-0.025394v-0.36519h0.043532q0.058042 0.021766 0.12092 0.041113 0.062879 0.018138 0.16083 0.018138 0.12697 0 0.19468-0.033858 0.068925-0.033858 0.097947-0.094319 0.027812-0.059252 0.03144-0.12939 0.00363-0.071344 0.00363-0.18138v-0.71707h-0.41235v-0.33133h0.87668z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <path
                                                d="m0.12976 0.12976h8.2072v8.2072h-8.2072zm-0.12955 5.2942 8.4663 0.013173"
                                                fill="none"
                                                stroke="#1779ba"
                                                strokeWidth=".8"
                                              />
                                            </svg>
                                          </JsonIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      data-testhook-id="edit-layout"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="edit-layout"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="edit-layout"
                                          onClick={[Function]}
                                        >
                                          <EditIcon
                                            color="#1779ba"
                                            size={31}
                                          >
                                            <svg
                                              height={31}
                                              version="1.1"
                                              viewBox="0 0 24 24"
                                              width={31}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                fill="#1779ba"
                                              />
                                            </svg>
                                          </EditIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </header>
                          </StyledComponent>
                        </Styled(styled.header)>
                      </section>
                    </StyledComponent>
                  </styled.section>
                </Layout>
                <LayoutJsonEditor />
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-fMiknA",
                              "isStatic": false,
                              "lastClassName": "djoooY",
                              "rules": Array [
                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                [Function],
                                ";

  background: ",
                                [Function],
                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                "
  margin: 1rem 0 0.5rem;
  min-height: 18.8rem;
  padding: 0 1rem;
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-fjdhpX",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-fMiknA",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-fjdhpX sc-fMiknA djoooY"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-chPdSV",
                                    "isStatic": false,
                                    "lastClassName": "bBFivD",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-chPdSV",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-chPdSV bBFivD"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dVhcbM",
                                          "isStatic": false,
                                          "lastClassName": "fScVQR",
                                          "rules": Array [
                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-kgoBCf",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-dVhcbM",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-kgoBCf sc-dVhcbM fScVQR"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eqIVtm",
                                          "isStatic": false,
                                          "lastClassName": "emMCro",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                            [Function],
                                            "
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-kAzzGY",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-eqIVtm",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-kAzzGY sc-eqIVtm emMCro"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kpOJdX",
                                    "isStatic": false,
                                    "lastClassName": "idQdSz",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kpOJdX",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kpOJdX idQdSz"
                              />
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eTuwsz",
                          "isStatic": false,
                          "lastClassName": "cdixMS",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-eTuwsz",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-bdVaJa sc-eTuwsz cdixMS"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <JsonSignAndSubmit>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kkGfuU",
                            "isStatic": false,
                            "lastClassName": "hWfVhn",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kkGfuU",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kkGfuU hWfVhn"
                      >
                        <LoaderButton
                          buttonType="button"
                          dataTesthookId="layout-json-form-submit-button"
                          onClick={[Function]}
                        >
                          <styled.button
                            data-testhook-id="layout-json-form-submit-button"
                            onClick={[Function]}
                            type="button"
                          >
                            <StyledComponent
                              data-testhook-id="layout-json-form-submit-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iAyFgw",
                                    "isStatic": false,
                                    "lastClassName": "kuBZXY",
                                    "rules": Array [
                                      "
  ",
                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: pointer;
  }
",
                                      "

  background-color: ",
                                      [Function],
                                      ";

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: ",
                                      [Function],
                                      "
  }
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-iAyFgw",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="sc-iAyFgw kuBZXY"
                                data-testhook-id="layout-json-form-submit-button"
                                onClick={[Function]}
                                type="button"
                              >
                                Sign and Submit
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </LoaderButton>
                        <Styled(Styled(styled.button))
                          data-testhook="cancel-button"
                          onMouseDown={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            data-testhook="cancel-button"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jqCOkK",
                                  "isStatic": false,
                                  "lastClassName": "jrhpuB",
                                  "rules": Array [
                                    "
  ",
                                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "

  background-color: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: ",
                                    [Function],
                                    "
  }
",
                                    "
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  border: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    color: ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "
  margin-left: 1rem;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(styled.button))",
                                "foldedComponentIds": Array [
                                  "sc-iAyFgw",
                                  "sc-cvbbAY",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jqCOkK",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onMouseDown={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-iAyFgw sc-cvbbAY sc-jqCOkK jrhpuB"
                              data-testhook="cancel-button"
                              onMouseDown={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </Styled(Styled(styled.button))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </JsonSignAndSubmit>
                <LayoutSigner>
                  <PassphraseDialogBox
                    onCancel={[Function]}
                    onConfirm={[Function]}
                    passphrase=""
                    showCryptoExceptionMessage={false}
                    showDialog={false}
                    showInvalidPassphraseMessage={false}
                  />
                </LayoutSigner>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title=""
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gzVnrw",
                "isStatic": false,
                "lastClassName": "cxdaOh",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gzVnrw",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-gzVnrw cxdaOh"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "isiUEp",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: ",
                        [Function],
                        ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-dnqmqq isiUEp"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iwsKbI",
                            "isStatic": false,
                            "lastClassName": "jYrlHi",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iwsKbI",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-iwsKbI jYrlHi"
                      />
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "jFZBXo",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-htoDjs jFZBXo"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kIPQKe",
                            "isStatic": false,
                            "lastClassName": "jgMiIX",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kIPQKe",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kIPQKe jgMiIX"
                      >
                        <LayoutAuthorizedAccountEditor>
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bbmXgH",
                                    "isStatic": false,
                                    "lastClassName": "kRCzco",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-bbmXgH",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-bbmXgH kRCzco"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-gGBfsJ",
                                                "isStatic": false,
                                                "lastClassName": "iWHpie",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-gGBfsJ",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-gGBfsJ iWHpie"
                                          >
                                            Authorized Accounts
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-item"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-item"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jnlKLf",
                                                "isStatic": false,
                                                "lastClassName": "gWEUFB",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-jnlKLf",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-jnlKLf gWEUFB"
                                            data-testhook-id="add-item"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    />
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </LayoutAuthorizedAccountEditor>
                        <RuleEditor
                          addAction={21}
                          editAction={23}
                          removeAction={22}
                          title="Expected End Products"
                        >
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-btzYZH",
                                    "isStatic": false,
                                    "lastClassName": "jvrdbY",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                      "
  li ~ ",
                                      ".sc-jDwBTQ",
                                      " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                      ".sc-jDwBTQ",
                                      " {
    margin-top: 0;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-btzYZH",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-btzYZH jvrdbY"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-lhVmIH",
                                                "isStatic": false,
                                                "lastClassName": "eHyLYd",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-lhVmIH",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                          >
                                            Expected End Products
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-rule"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-rule"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-bYSBpT",
                                                "isStatic": false,
                                                "lastClassName": "ftOxhC",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-bYSBpT",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                            data-testhook-id="add-rule"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    />
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </RuleEditor>
                        <ArtifactCollectorEditor
                          artifactCollectorSpecifications={Array []}
                          title="Release collectors"
                        >
                          <Styled(styled.section)>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-hEsumM",
                                    "isStatic": false,
                                    "lastClassName": "eAVtxg",
                                    "rules": Array [
                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                      [Function],
                                      ";

  background: ",
                                      [Function],
                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.section)",
                                  "foldedComponentIds": Array [
                                    "sc-fjdhpX",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-hEsumM",
                                  "target": "section",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <section
                                className="sc-fjdhpX sc-hEsumM eAVtxg"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-chPdSV",
                                          "isStatic": false,
                                          "lastClassName": "bBFivD",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-chPdSV",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-chPdSV bBFivD"
                                    >
                                      <Styled(styled.header)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ktHwxA",
                                                "isStatic": false,
                                                "lastClassName": "eqTlvr",
                                                "rules": Array [
                                                  "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                  [Function],
                                                  ";
  background-color: ",
                                                  [Function],
                                                  ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.header)",
                                              "foldedComponentIds": Array [
                                                "sc-kgoBCf",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-ktHwxA",
                                              "target": "header",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <header
                                            className="sc-kgoBCf sc-ktHwxA eqTlvr"
                                          >
                                            Release collectors
                                          </header>
                                        </StyledComponent>
                                      </Styled(styled.header)>
                                      <Styled(styled.button)
                                        data-testhook-id="add-collector"
                                        onClick={[Function]}
                                      >
                                        <StyledComponent
                                          data-testhook-id="add-collector"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cIShpX",
                                                "isStatic": false,
                                                "lastClassName": "feHJYR",
                                                "rules": Array [
                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                  [Function],
                                                  "
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.button)",
                                              "foldedComponentIds": Array [
                                                "sc-kAzzGY",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-cIShpX",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          onClick={[Function]}
                                        >
                                          <button
                                            className="sc-kAzzGY sc-cIShpX feHJYR"
                                            data-testhook-id="add-collector"
                                            onClick={[Function]}
                                          >
                                            <PlusIcon
                                              color="#1779ba"
                                              size={24}
                                            >
                                              <svg
                                                height={24}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={24}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  plus
                                                </title>
                                                <path
                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                  fill="#1779ba"
                                                />
                                              </svg>
                                            </PlusIcon>
                                          </button>
                                        </StyledComponent>
                                      </Styled(styled.button)>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.ul>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kpOJdX",
                                          "isStatic": false,
                                          "lastClassName": "idQdSz",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                          ],
                                        },
                                        "displayName": "styled.ul",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kpOJdX",
                                        "target": "ul",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <ul
                                      className="sc-kpOJdX idQdSz"
                                    />
                                  </StyledComponent>
                                </styled.ul>
                              </section>
                            </StyledComponent>
                          </Styled(styled.section)>
                        </ArtifactCollectorEditor>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;

exports[`sign layout happy flow 1`] = `
<HierarchyEditorTestWrapper
  mockedDispatch={[MockFunction]}
>
  <ThemeProvider
    theme={
      Object {
        "PageHeader": Object {
          "bottomBorderColor": "#bbb",
        },
        "alerts": Object {
          "warning": Object {
            "color": "red",
          },
        },
        "alternateLoader": Object {
          "color": "#808080",
        },
        "button": Object {
          "bgColor": "#1779ba",
          "disabledBgColor": "#e0e0e0",
          "textColor": "#fff",
        },
        "cancelButton": Object {
          "bgColor": "transparent",
          "borderColor": "#8D99AE",
          "hover": Object {
            "bgColor": "#8D99AE",
            "borderColor": "transparent",
            "textColor": "#fff",
          },
          "textColor": "#8D99AE",
        },
        "collapsibleContainer": Object {
          "bodyBorderColor": "#e0e0e0",
          "headerBgColor": "#e0e0e0",
          "iconColor": "gray",
        },
        "collection": Object {
          "borderColor": "#1779ba",
          "buttonInvertedBgColor": "#f1f1f1",
          "buttonInvertedBorderColor": "#1779ba",
          "cardActiveBorderColor": "#1779ba",
          "cardBgColor": "#fff",
          "cardHoverBorderColor": "#1779ba",
          "invertedBgColor": "#e0e0e0",
          "smallTitleBgColor": "#f1f1f1",
          "smallTitleBorderColor": "#1779ba",
          "titleBgColor": "#1779ba",
          "titleTextColor": "#fff",
        },
        "connectionError": Object {
          "bgColor": "red",
          "textColor": "#fff",
        },
        "copyInput": Object {
          "bgColor": "#e0e0e0",
        },
        "dashboardLayout": Object {
          "bgColor": "#e0e0e0",
        },
        "dashboardNavBar": Object {
          "link": Object {
            "hover": Object {
              "bgColor": "#e8feff",
            },
            "textColor": "#2e2e2e",
          },
        },
        "dashboardPage": Object {
          "avatar": Object {
            "borderColor": "#1779ba",
          },
          "contextMenu": Object {
            "bgColor": "#fff",
            "borderColor": "#e5e5e5",
            "dividerBgColor": "#dfdfdf",
            "menuItemBgColor": "#fff",
            "menuItemHoverBgColor": "#eee",
            "menuItemTextColor": "#2e2e2e",
          },
        },
        "dataCheckbox": Object {
          "loaderColor": "#1779ba",
        },
        "fontFamily": "'Fira Sans'",
        "fontFile": "/fonts/fira-sans-v10-latin-regular",
        "forms": Object {
          "alternateBgColor": "#e0e0e0",
        },
        "homePage": Object {
          "bgColor": "#eee",
          "navigation": Object {
            "bgColor": "#fff",
            "loginButton": Object {
              "default": Object {
                "loginButtonBgColor": "#fff",
                "loginButtonBorderColor": "#1779ba",
                "loginButtonTextColor": "#1779ba",
              },
              "hover": Object {
                "loginButtonBgColor": "#1779ba",
                "loginButtonBorderColor": "#1779ba",
                "loginButtonTextColor": "#fff",
              },
            },
          },
        },
        "input": Object {
          "bgColor": "#fefefe",
          "borderColor": "#cacaca",
          "disabledBgColor": "#e0e0e0",
          "focusBorderColor": "#8a8a8a",
          "focusBoxShadowColor": "#cacaca",
          "textColor": "#0a0a0a",
        },
        "inputLabel": Object {
          "textColor": "#0a0a0a",
        },
        "keyManagementPage": Object {
          "iconColor": "#1779ba",
          "noActiveKeyWarning": Object {
            "borderColor": "orange",
            "textColor": "orange",
          },
          "passwordBgColor": "#fff",
          "passwordColor": "orange",
        },
        "labels": Object {
          "active": "green",
          "inactive": "red",
        },
        "layoutBuilder": Object {
          "iconColor": "#1779ba",
        },
        "layoutPage": Object {
          "panel": Object {
            "bgColor": "#f1f1f1",
            "borderColor": "#e0e0e0",
            "contentSeparator": "#ccc",
            "headerBgColor": "#fff",
          },
        },
        "loaderButton": Object {
          "loadingColor": "#fff",
        },
        "loaderIcon": Object {
          "color": "#1779ba",
        },
        "loginForm": Object {
          "bgColor": "#fff",
        },
        "loginPage": Object {
          "bgColor": "#eee",
        },
        "modal": Object {
          "bgColor": "#fff",
          "button": Object {
            "default": Object {
              "color": "#1779ba",
            },
            "hover": Object {
              "color": "#1779ba",
            },
          },
        },
        "notificationsList": Object {
          "colors": Object {
            "ERROR": "red",
            "SUCCESS": "green",
            "WARNING": "orange",
          },
          "iconColor": "#fff",
          "iconSize": 22,
          "notificationBgColor": "#fff",
        },
        "panel": Object {
          "icons": Object {
            "enlargeIcon": Object {
              "color": "#1779ba",
            },
            "shrinkIcon": Object {
              "color": "#1779ba",
            },
          },
        },
        "passwordView": Object {
          "clipboardIcon": Object {
            "color": "#8D99AE",
            "hoverBgColor": "#e8feff",
          },
        },
        "ruleEditor": Object {
          "selectionContainer": Object {
            "bgColor": "#e0e0e0",
          },
        },
        "searchInput": Object {
          "loaderIconColor": "#1779ba",
          "searchResultEntryHoverBg": "#e8feff",
          "searchResultsBgColor": "#fff",
          "searchResultsBorderColor": "#e0e0e0",
          "selectedEntryBorderColor": "#e0e0e0",
        },
        "selectList": Object {
          "defaultItemBgColor": "#fff",
          "iconColor": "#8d99ae",
          "selectedItemBgColor": "#e8feff",
        },
        "transparentButton": Object {
          "default": Object {
            "transparentButtonBgColor": "#fff",
            "transparentButtonBorderColor": "#1779ba",
            "transparentButtonTextColor": "#1779ba",
          },
          "hover": Object {
            "transparentButtonBgColor": "#1779ba",
            "transparentButtonBorderColor": "#1779ba",
            "transparentButtonTextColor": "#fff",
          },
          "iconColor": "#fff",
        },
        "treeEditor": Object {
          "bgColor": "#f1f1f1",
          "borderColor": "#e0e0e0",
          "breadCrumb": Object {
            "textColor": "#1779ba",
          },
          "iconColors": Object {
            "addRootNode": "#1779ba",
            "chain": "#8D99AE",
            "expandNode": "#1779ba",
            "label": "#8D99AE",
            "robot": "#8D99AE",
          },
          "lastBreadCrumb": Object {
            "textColor": "#000",
          },
          "loaders": Object {
            "onFetchChildren": Object {
              "color": "#1779ba",
            },
            "onPageLoad": Object {
              "color": "#1779ba",
            },
          },
          "nodeContextMenuContainer": Object {
            "bgColor": "fff",
            "borderColor": "#e5e5e5",
          },
          "nodeContextMenuIconSeparator": Object {
            "borderColor": "#8D99AE",
          },
          "nodeContextMenuItem": Object {
            "bgColor": "#fff",
            "hover": Object {
              "bgColor": "#e8feff",
            },
            "iconColor": "#8D99AE",
          },
          "nodeContextMenuItemSeparator": Object {
            "borderColor": "#e5e5e5",
          },
          "textColor": "#2e2e2e",
          "treeHeadLabel": Object {
            "bgColor": "#e8feff",
          },
        },
        "userSettingsPage": Object {
          "bgColor": "#f1f1f1",
          "sidePanel": Object {
            "bgColor": "#e0e0e0",
            "sidePanelItem": Object {
              "activeBgColor": "#f1f1f1",
              "bgColor": "#c7c7c7",
              "fontColor": "#2E2E30",
              "highlightColor": "#1779ba",
            },
          },
        },
      }
    }
  >
    <ManageLayoutPanel>
      <Panel
        resizable={true}
        title="Manage layout"
        width="37.5vw"
      >
        <styled.section
          shrink={false}
          width="37.5vw"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": false,
                  "lastClassName": "cxdaOh",
                  "rules": Array [
                    "
  flex: ",
                    [Function],
                    ";
  flex-grow: ",
                    [Function],
                    ";
  ",
                    [Function],
                    ";
  max-width: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.section",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            shrink={false}
            width="37.5vw"
          >
            <section
              className="sc-gzVnrw cxdaOh"
              width="37.5vw"
            >
              <styled.header>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-dnqmqq",
                        "isStatic": false,
                        "lastClassName": "isiUEp",
                        "rules": Array [
                          "
  margin: ",
                          [Function],
                          ";
  padding: 0.5rem 1rem;
  background-color: ",
                          [Function],
                          ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                        ],
                      },
                      "displayName": "styled.header",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-dnqmqq",
                      "target": "header",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <header
                    className="sc-dnqmqq cpDgSY"
                  >
                    <styled.p>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-iwsKbI",
                              "isStatic": false,
                              "lastClassName": "jYrlHi",
                              "rules": Array [
                                "
  justify-self: center;
",
                              ],
                            },
                            "displayName": "styled.p",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-iwsKbI",
                            "target": "p",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <p
                          className="sc-iwsKbI jYrlHi"
                        >
                          Manage layout
                        </p>
                      </StyledComponent>
                    </styled.p>
                    <styled.div
                      onClick={[Function]}
                      shrink={false}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-gZMcBi",
                              "isStatic": false,
                              "lastClassName": "gMTTkT",
                              "rules": Array [
                                "
  padding: ",
                                [Function],
                                ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-gZMcBi",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                        shrink={false}
                      >
                        <div
                          className="sc-gZMcBi gMTTkT"
                          onClick={[Function]}
                        >
                          <ShrinkIcon
                            color="#1779ba"
                            size={16}
                          >
                            <svg
                              height={16}
                              version="1.1"
                              viewBox="0 0 32 32"
                              width={16}
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                                fill="#1779ba"
                              />
                            </svg>
                          </ShrinkIcon>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </header>
                </StyledComponent>
              </styled.header>
              <styled.main
                shrink={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "jFZBXo",
                        "rules": Array [
                          "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.main",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "main",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  shrink={false}
                >
                  <main
                    className="sc-htoDjs gcwhQU"
                  >
                    <PanelBreadCrumb
                      breadcrumb="label / "
                      node={
                        Object {
                          "hasChildren": false,
                          "name": "layout",
                          "parentId": "",
                          "referenceId": "supplyChainId",
                          "type": "SUPPLY_CHAIN",
                        }
                      }
                    >
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ibxdXY",
                                "isStatic": false,
                                "lastClassName": "eefExt",
                                "rules": Array [
                                  "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-ibxdXY",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="sc-ibxdXY eefExt"
                          >
                            Selected: 
                            label / 
                            <styled.span>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-RefOD",
                                      "isStatic": false,
                                      "lastClassName": "ewapal",
                                      "rules": Array [
                                        "
  color: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.span",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-RefOD",
                                    "target": "span",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <span
                                  className="sc-RefOD ewapal"
                                >
                                   / 
                                  layout
                                </span>
                              </StyledComponent>
                            </styled.span>
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <styled.hr>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "jLEqym",
                                "rules": Array [
                                  "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.hr",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "hr",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <hr
                            className="sc-bdVaJa jLEqym"
                          />
                        </StyledComponent>
                      </styled.hr>
                    </PanelBreadCrumb>
                    <Layout>
                      <styled.section
                        data-testhook-id="layout-edit"
                      >
                        <StyledComponent
                          data-testhook-id="layout-edit"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwCtUz",
                                "isStatic": false,
                                "lastClassName": "gccGwq",
                                "rules": Array [
                                  "
  width: 100%;
  margin: 0 0 1rem;
",
                                ],
                              },
                              "displayName": "styled.section",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwCtUz",
                              "target": "section",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <section
                            className="sc-bwCtUz gccGwq"
                            data-testhook-id="layout-edit"
                          >
                            <Styled(styled.header)
                              active={false}
                              clickable={false}
                            >
                              <StyledComponent
                                active={false}
                                clickable={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-iQKALj",
                                      "isStatic": false,
                                      "lastClassName": "eFVgFL",
                                      "rules": Array [
                                        "
  border: 1px solid
    ",
                                        [Function],
                                        ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                        [Function],
                                        ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                        ".sc-VigVT",
                                        " {
    margin: 0;
  }

  ",
                                        ".sc-jTzLTM",
                                        " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
  }
",
                                      ],
                                    },
                                    "displayName": "Styled(styled.header)",
                                    "foldedComponentIds": Array [
                                      "sc-ckVGcZ",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-iQKALj",
                                    "target": "header",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <header
                                  className="sc-ckVGcZ sc-iQKALj eFVgFL"
                                >
                                  <styled.span>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dxgOiQ",
                                            "isStatic": false,
                                            "lastClassName": "fMWTVD",
                                            "rules": Array [
                                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                            ],
                                          },
                                          "displayName": "styled.span",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dxgOiQ",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <span
                                        className="sc-dxgOiQ fMWTVD"
                                      >
                                        Layout
                                      </span>
                                    </StyledComponent>
                                  </styled.span>
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jzJRlG",
                                            "isStatic": false,
                                            "lastClassName": "fswDQX",
                                            "rules": Array [
                                              "
  display: flex;
  align-items: center;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-jzJRlG",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-jzJRlG fswDQX"
                                      >
                                        <Styled(styled.button)
                                          data-testhook-id="show-layout-json"
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            data-testhook-id="show-layout-json"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-hrWEMg",
                                                  "isStatic": false,
                                                  "lastClassName": "jlNwFI",
                                                  "rules": Array [
                                                    "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.button)",
                                                "foldedComponentIds": Array [
                                                  "sc-cSHVUG",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-hrWEMg",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                              data-testhook-id="show-layout-json"
                                              onClick={[Function]}
                                            >
                                              <JsonIcon
                                                color="#1779ba"
                                                size={26}
                                              >
                                                <svg
                                                  height={26}
                                                  version="1.1"
                                                  viewBox="0 0 8.4667 8.4667"
                                                  width={26}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <g
                                                    aria-label="{;}"
                                                  >
                                                    <path
                                                      d="m7.2453 2.9003h-0.12058q-0.30317 0-0.43925 0.12058-0.13608 0.11886-0.13608 0.42547v0.25321q0 0.32728-0.19982 0.49609-0.19809 0.17053-0.53227 0.17053h-0.47198v-0.38585h0.19637q0.10335 0 0.18603-0.015503 0.084405-0.015503 0.14125-0.058566 0.058566-0.044786 0.08785-0.13091 0.029283-0.084405 0.029283-0.21876v-0.18776q0-0.24116 0.13436-0.40308 0.13608-0.16192 0.38585-0.25666v-0.041341q-0.24977-0.09474-0.38585-0.25666-0.13436-0.16192-0.13436-0.40308v-0.18776q0-0.13436-0.029283-0.21876-0.029284-0.086127-0.08785-0.13091-0.056844-0.043064-0.14125-0.058566-0.082682-0.015503-0.18603-0.015503h-0.19637v-0.38585h0.47198q0.33417 0 0.53227 0.17053 0.19982 0.16881 0.19982 0.49609v0.25321q0 0.30661 0.13608 0.42719 0.13608 0.11886 0.43925 0.11886h0.12058zm-2.6338-0.46681h-0.64423v-0.67696h0.64423zm0.10508 0.5805-0.62012 1.3143h-0.38413l0.33934-1.3143zm-1.4831 1.3522h-0.47198q-0.33417 0-0.53399-0.17053-0.19809-0.16881-0.19809-0.49609v-0.25321q0-0.30661-0.13608-0.42547-0.13608-0.12058-0.43925-0.12058h-0.12058v-0.42375h0.12058q0.30317 0 0.43925-0.11886 0.13608-0.12058 0.13608-0.42719v-0.25321q0-0.32728 0.19809-0.49609 0.19982-0.17053 0.53399-0.17053h0.47198v0.38585h-0.19637q-0.10335 0-0.18776 0.015503-0.082682 0.015503-0.13953 0.058566-0.058566 0.044786-0.08785 0.13091-0.029283 0.084405-0.029283 0.21876v0.18776q0 0.24116-0.13608 0.40308-0.13436 0.16192-0.38413 0.25666v0.041341q0.24977 0.09474 0.38413 0.25666 0.13608 0.16192 0.13608 0.40308v0.18776q0 0.13436 0.029283 0.21876 0.029283 0.086127 0.08785 0.13091 0.055121 0.044786 0.13953 0.058566 0.084405 0.015503 0.18776 0.015503h0.19637z"
                                                      fill="#1779ba"
                                                    />
                                                  </g>
                                                  <g
                                                    aria-label="JSON"
                                                    transform="scale(1.0126 .98752)"
                                                  >
                                                    <path
                                                      d="m7.6325 7.8697h-0.44741l-0.76423-1.2358v1.2358h-0.42564v-1.8005h0.55503l0.65661 1.0315v-1.0315h0.42564zm-1.9904-0.89966q0 0.43048-0.24668 0.68442-0.24668 0.25273-0.682 0.25273-0.43411 0-0.68079-0.25273-0.24668-0.25394-0.24668-0.68442 0-0.43411 0.24668-0.68563 0.24668-0.25273 0.68079-0.25273 0.4329 0 0.68079 0.25273 0.24789 0.25152 0.24789 0.68563zm-0.61549 0.45588q0.067716-0.082227 0.10037-0.19348 0.032649-0.11246 0.032649-0.26361 0-0.16204-0.037486-0.2757t-0.097947-0.1838q-0.06167-0.072553-0.14269-0.1052-0.079808-0.032649-0.16687-0.032649-0.088273 0-0.16687 0.03144-0.07739 0.03144-0.14269 0.10399-0.060461 0.067716-0.099156 0.18743-0.037486 0.1185-0.037486 0.2757 0 0.16083 0.036277 0.27449 0.037486 0.11246 0.097947 0.1838 0.060461 0.071344 0.14148 0.1052 0.081018 0.033858 0.1705 0.033858 0.089482 0 0.1705-0.033858 0.081018-0.035067 0.14148-0.10762zm-1.4547-0.12213q0 0.26603-0.22612 0.4329-0.22491 0.16566-0.61186 0.16566-0.22371 0-0.39058-0.038695-0.16566-0.039904-0.31077-0.10037v-0.43169h0.050787q0.1439 0.11488 0.32165 0.17655 0.17896 0.06167 0.34342 0.06167 0.042323 0 0.11125-0.00726 0.068926-0.00726 0.11246-0.024184 0.053206-0.021766 0.087064-0.054415 0.035067-0.032649 0.035067-0.096737 0-0.059252-0.050787-0.10157-0.049578-0.043528-0.14632-0.066503-0.10157-0.024184-0.21524-0.044741-0.11246-0.021766-0.21161-0.054415-0.22733-0.073762-0.3277-0.19952-0.099156-0.12697-0.099156-0.3144 0-0.25152 0.22491-0.40993 0.22612-0.15962 0.58042-0.15962 0.17776 0 0.35067 0.035067 0.17413 0.033858 0.3011 0.085854v0.41476h-0.049578q-0.10883-0.087063-0.26724-0.14511-0.1572-0.059252-0.32165-0.059252-0.058042 0-0.11608 0.00846-0.056833 0.00726-0.11004 0.029021-0.047159 0.018138-0.081018 0.055624-0.033858 0.036277-0.033858 0.083436 0 0.071344 0.054415 0.11004 0.054415 0.037486 0.20557 0.068925 0.099156 0.020557 0.18985 0.039904 0.091901 0.019347 0.1971 0.053206 0.20678 0.067716 0.30472 0.18501 0.099156 0.11608 0.099156 0.3023zm-1.8767 0.037486q0 0.1185-0.042323 0.2225-0.042323 0.10278-0.12576 0.17413-0.088273 0.076181-0.21282 0.1185-0.12455 0.041114-0.30835 0.041114-0.12455 0-0.23459-0.00967-0.11004-0.00846-0.19348-0.025394v-0.36519h0.043532q0.058042 0.021766 0.12092 0.041113 0.062879 0.018138 0.16083 0.018138 0.12697 0 0.19468-0.033858 0.068925-0.033858 0.097947-0.094319 0.027812-0.059252 0.03144-0.12939 0.00363-0.071344 0.00363-0.18138v-0.71707h-0.41235v-0.33133h0.87668z"
                                                      fill="#1779ba"
                                                    />
                                                  </g>
                                                  <path
                                                    d="m0.12976 0.12976h8.2072v8.2072h-8.2072zm-0.12955 5.2942 8.4663 0.013173"
                                                    fill="none"
                                                    stroke="#1779ba"
                                                    strokeWidth=".8"
                                                  />
                                                </svg>
                                              </JsonIcon>
                                            </button>
                                          </StyledComponent>
                                        </Styled(styled.button)>
                                        <Styled(styled.button)
                                          data-testhook-id="edit-layout"
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            data-testhook-id="edit-layout"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-hrWEMg",
                                                  "isStatic": false,
                                                  "lastClassName": "jlNwFI",
                                                  "rules": Array [
                                                    "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.button)",
                                                "foldedComponentIds": Array [
                                                  "sc-cSHVUG",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-hrWEMg",
                                                "target": "button",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                              data-testhook-id="edit-layout"
                                              onClick={[Function]}
                                            >
                                              <EditIcon
                                                color="#1779ba"
                                                size={31}
                                              >
                                                <svg
                                                  height={31}
                                                  version="1.1"
                                                  viewBox="0 0 24 24"
                                                  width={31}
                                                  xmlns="http://www.w3.org/2000/svg"
                                                >
                                                  <path
                                                    d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                    fill="#1779ba"
                                                  />
                                                </svg>
                                              </EditIcon>
                                            </button>
                                          </StyledComponent>
                                        </Styled(styled.button)>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </header>
                              </StyledComponent>
                            </Styled(styled.header)>
                          </section>
                        </StyledComponent>
                      </styled.section>
                    </Layout>
                    <LayoutJsonEditor>
                      <Styled(styled.div)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-jDwBTQ",
                                "isStatic": false,
                                "lastClassName": "jYrklC",
                                "rules": Array [
                                  "
  display: flex;
  flex-direction: column;
",
                                  "
  display: flex;
  flex-direction: column;
  width: 100%;

  ",
                                  [Function],
                                  "
",
                                ],
                              },
                              "displayName": "Styled(styled.div)",
                              "foldedComponentIds": Array [
                                "sc-bwzfXH",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-jDwBTQ",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-bwzfXH sc-jDwBTQ jBdFgw"
                          >
                            <form
                              data-testhook-id="layout-json-form"
                              onBlur={[Function]}
                              onSubmit={[Function]}
                            >
                              <FormInput
                                dataTesthookId="layout-json-form-field-0"
                                disabled={false}
                                formType="textArea"
                                height="25rem"
                                innerRef={
                                  Object {
                                    "current": <textarea
                                      class="sc-hMqMXs bTRjzC"
                                      data-testhook-id="layout-json-form-field-0"
                                      height="25rem"
                                      name="layout"
                                    >
                                      {
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve",
          "authorizedKeyIds": [],
          "expectedMaterials": [],
          "expectedProducts": []
        }
      ]
    }
  ]
}
                                    </textarea>,
                                  }
                                }
                                labelValue="Layout*"
                                name="layout"
                                onBlur={[Function]}
                                onChange={[Function]}
                                value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\",
          \\"authorizedKeyIds\\": [],
          \\"expectedMaterials\\": [],
          \\"expectedProducts\\": []
        }
      ]
    }
  ]
}"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kEYyzF",
                                          "isStatic": false,
                                          "lastClassName": "koCczG",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kEYyzF",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-kEYyzF koCczG"
                                    >
                                      <styled.label>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jKJlTe",
                                                "isStatic": false,
                                                "lastClassName": "jKKzGO",
                                                "rules": Array [
                                                  "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.label",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-jKJlTe",
                                              "target": "label",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <label
                                            className="sc-jKJlTe jKKzGO"
                                          >
                                            Layout*
                                          </label>
                                        </StyledComponent>
                                      </styled.label>
                                      <styled.textarea
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\",
          \\"authorizedKeyIds\\": [],
          \\"expectedMaterials\\": [],
          \\"expectedProducts\\": []
        }
      ]
    }
  ]
}"
                                      >
                                        <StyledComponent
                                          data-testhook-id="layout-json-form-field-0"
                                          disabled={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-hMqMXs",
                                                "isStatic": false,
                                                "lastClassName": "bTRjzC",
                                                "rules": Array [
                                                  "
  ",
                                                  "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                  [Function],
                                                  ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  border-radius: 0;
  background-color: ",
                                                  [Function],
                                                  ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                  [Function],
                                                  ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                  [Function],
                                                  ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                  [Function],
                                                  ";
    box-shadow: 0 0 5px ",
                                                  [Function],
                                                  ";
  }
",
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.textarea",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-hMqMXs",
                                              "target": "textarea",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={
                                            Object {
                                              "current": <textarea
                                                class="sc-hMqMXs bTRjzC"
                                                data-testhook-id="layout-json-form-field-0"
                                                height="25rem"
                                                name="layout"
                                              >
                                                {
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve",
          "authorizedKeyIds": [],
          "expectedMaterials": [],
          "expectedProducts": []
        }
      ]
    }
  ]
}
                                              </textarea>,
                                            }
                                          }
                                          height="25rem"
                                          name="layout"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\",
          \\"authorizedKeyIds\\": [],
          \\"expectedMaterials\\": [],
          \\"expectedProducts\\": []
        }
      ]
    }
  ]
}"
                                        >
                                          <textarea
                                            className="sc-hMqMXs bTRjzC"
                                            data-testhook-id="layout-json-form-field-0"
                                            disabled={false}
                                            height="25rem"
                                            name="layout"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\",
          \\"authorizedKeyIds\\": [],
          \\"expectedMaterials\\": [],
          \\"expectedProducts\\": []
        }
      ]
    }
  ]
}"
                                          />
                                        </StyledComponent>
                                      </styled.textarea>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </FormInput>
                            </form>
                          </div>
                        </StyledComponent>
                      </Styled(styled.div)>
                    </LayoutJsonEditor>
                    <SegmentsContainer>
                      <ul>
                        <Styled(styled.section)>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-fMiknA",
                                  "isStatic": false,
                                  "lastClassName": "djoooY",
                                  "rules": Array [
                                    "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                    [Function],
                                    ";

  background: ",
                                    [Function],
                                    ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                    "
  margin: 1rem 0 0.5rem;
  min-height: 18.8rem;
  padding: 0 1rem;
",
                                  ],
                                },
                                "displayName": "Styled(styled.section)",
                                "foldedComponentIds": Array [
                                  "sc-fjdhpX",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-fMiknA",
                                "target": "section",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <section
                              className="sc-fjdhpX sc-fMiknA djoooY"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-chPdSV",
                                        "isStatic": false,
                                        "lastClassName": "bBFivD",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-chPdSV",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-chPdSV bBFivD"
                                  >
                                    <Styled(styled.header)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-dVhcbM",
                                              "isStatic": false,
                                              "lastClassName": "fScVQR",
                                              "rules": Array [
                                                "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                [Function],
                                                ";
  background-color: ",
                                                [Function],
                                                ";
  padding: 0.25rem 2rem 0.4rem;
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.header)",
                                            "foldedComponentIds": Array [
                                              "sc-kgoBCf",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-dVhcbM",
                                            "target": "header",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <header
                                          className="sc-kgoBCf sc-dVhcbM fScVQR"
                                        >
                                          Segments
                                        </header>
                                      </StyledComponent>
                                    </Styled(styled.header)>
                                    <Styled(styled.button)
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="add-segment"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-eqIVtm",
                                              "isStatic": false,
                                              "lastClassName": "emMCro",
                                              "rules": Array [
                                                "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                [Function],
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-kAzzGY",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-eqIVtm",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-kAzzGY sc-eqIVtm emMCro"
                                          data-testhook-id="add-segment"
                                          onClick={[Function]}
                                        >
                                          <PlusIcon
                                            color="#1779ba"
                                            size={24}
                                          >
                                            <svg
                                              height={24}
                                              version="1.1"
                                              viewBox="0 0 32 32"
                                              width={24}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <title>
                                                plus
                                              </title>
                                              <path
                                                d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                fill="#1779ba"
                                              />
                                            </svg>
                                          </PlusIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.ul>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-kpOJdX",
                                        "isStatic": false,
                                        "lastClassName": "idQdSz",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                        ],
                                      },
                                      "displayName": "styled.ul",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-kpOJdX",
                                      "target": "ul",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <ul
                                    className="sc-kpOJdX idQdSz"
                                  >
                                    <Segment
                                      index={0}
                                      key="jenkins"
                                      segment={
                                        Object {
                                          "name": "jenkins",
                                          "steps": Array [
                                            Object {
                                              "authorizedKeyIds": Array [],
                                              "expectedMaterials": Array [],
                                              "expectedProducts": Array [],
                                              "name": "approve",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <styled.li>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-fBuWsC",
                                                "isStatic": false,
                                                "lastClassName": "eJQgBo",
                                                "rules": Array [
                                                  "
  width: 100%;
  margin: 0 0 1rem;
",
                                                ],
                                              },
                                              "displayName": "styled.li",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-fBuWsC",
                                              "target": "li",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <li
                                            className="sc-fBuWsC eJQgBo"
                                          >
                                            <Styled(styled.header)
                                              clickable={true}
                                              data-testhook-id="segment0-edit"
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                clickable={true}
                                                data-testhook-id="segment0-edit"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-hzDkRC",
                                                      "isStatic": false,
                                                      "lastClassName": "bfJpUs",
                                                      "rules": Array [
                                                        "
  border: 1px solid
    ",
                                                        [Function],
                                                        ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                        [Function],
                                                        ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                        ".sc-VigVT",
                                                        " {
    margin: 0;
  }

  ",
                                                        ".sc-jTzLTM",
                                                        " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                        [Function],
                                                        ";
    border: 1px solid ",
                                                        [Function],
                                                        ";
  }
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.header)",
                                                    "foldedComponentIds": Array [
                                                      "sc-ckVGcZ",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-hzDkRC",
                                                    "target": "header",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <header
                                                  className="sc-ckVGcZ sc-hzDkRC bfJpUs"
                                                  data-testhook-id="segment0-edit"
                                                  onClick={[Function]}
                                                >
                                                  <styled.span>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-dxgOiQ",
                                                            "isStatic": false,
                                                            "lastClassName": "fMWTVD",
                                                            "rules": Array [
                                                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.span",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-dxgOiQ",
                                                          "target": "span",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <span
                                                        className="sc-dxgOiQ fMWTVD"
                                                      >
                                                        jenkins
                                                      </span>
                                                    </StyledComponent>
                                                  </styled.span>
                                                  <styled.div>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-jzJRlG",
                                                            "isStatic": false,
                                                            "lastClassName": "fswDQX",
                                                            "rules": Array [
                                                              "
  display: flex;
  align-items: center;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-jzJRlG",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="sc-jzJRlG fswDQX"
                                                      >
                                                        <Styled(styled.button)
                                                          data-testhook-id="segment0-delete"
                                                          onClick={[Function]}
                                                        >
                                                          <StyledComponent
                                                            data-testhook-id="segment0-delete"
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-jhAzac",
                                                                  "isStatic": false,
                                                                  "lastClassName": "iZdpYu",
                                                                  "rules": Array [
                                                                    "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                  ],
                                                                },
                                                                "displayName": "Styled(styled.button)",
                                                                "foldedComponentIds": Array [
                                                                  "sc-cSHVUG",
                                                                ],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-jhAzac",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              className="sc-cSHVUG sc-jhAzac iZdpYu"
                                                              data-testhook-id="segment0-delete"
                                                              onClick={[Function]}
                                                            >
                                                              <RemoveIcon
                                                                color="#1779ba"
                                                                size={24}
                                                              >
                                                                <svg
                                                                  height={24}
                                                                  version="1.1"
                                                                  viewBox="0 0 32 32"
                                                                  width={24}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <title>
                                                                    trash
                                                                  </title>
                                                                  <path
                                                                    d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                    fill="#1779ba"
                                                                  />
                                                                </svg>
                                                              </RemoveIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </Styled(styled.button)>
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </header>
                                              </StyledComponent>
                                            </Styled(styled.header)>
                                          </li>
                                        </StyledComponent>
                                      </styled.li>
                                      <StepsContainer
                                        index={0}
                                        segment={
                                          Object {
                                            "name": "jenkins",
                                            "steps": Array [
                                              Object {
                                                "authorizedKeyIds": Array [],
                                                "expectedMaterials": Array [],
                                                "expectedProducts": Array [],
                                                "name": "approve",
                                              },
                                            ],
                                          }
                                        }
                                      >
                                        <ul>
                                          <Styled(styled.section)
                                            inverted={true}
                                          >
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-csuQGl",
                                                    "isStatic": false,
                                                    "lastClassName": "hwOLfG",
                                                    "rules": Array [
                                                      "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                      [Function],
                                                      ";

  background: ",
                                                      [Function],
                                                      ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                      "
  margin: 1rem 0;
  min-height: 18.8rem;
",
                                                    ],
                                                  },
                                                  "displayName": "Styled(styled.section)",
                                                  "foldedComponentIds": Array [
                                                    "sc-fjdhpX",
                                                  ],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-csuQGl",
                                                  "target": "section",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              inverted={true}
                                            >
                                              <section
                                                className="sc-fjdhpX sc-csuQGl hwOLfG"
                                              >
                                                <styled.div>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-chPdSV",
                                                          "isStatic": false,
                                                          "lastClassName": "bBFivD",
                                                          "rules": Array [
                                                            "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-chPdSV",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <div
                                                      className="sc-chPdSV bBFivD"
                                                    >
                                                      <Styled(styled.header)>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-Rmtcm",
                                                                "isStatic": false,
                                                                "lastClassName": "bVypHe",
                                                                "rules": Array [
                                                                  "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: ",
                                                                  [Function],
                                                                  ";
  display: inline-flex;
  top: -1rem;
  margin: 0 auto;
  padding: 0.25rem 1rem;
  border: 1px solid ",
                                                                  [Function],
                                                                  ";
",
                                                                ],
                                                              },
                                                              "displayName": "Styled(styled.header)",
                                                              "foldedComponentIds": Array [
                                                                "sc-kGXeez",
                                                              ],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-Rmtcm",
                                                              "target": "header",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <header
                                                            className="sc-kGXeez sc-Rmtcm bVypHe"
                                                          >
                                                            Steps
                                                          </header>
                                                        </StyledComponent>
                                                      </Styled(styled.header)>
                                                      <Styled(styled.button)
                                                        data-testhook-id="segment0-add-step"
                                                        inverted={true}
                                                        onClick={[Function]}
                                                      >
                                                        <StyledComponent
                                                          data-testhook-id="segment0-add-step"
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-bRBYWo",
                                                                "isStatic": false,
                                                                "lastClassName": "cDNhcw",
                                                                "rules": Array [
                                                                  "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                                  [Function],
                                                                  "
",
                                                                ],
                                                              },
                                                              "displayName": "Styled(styled.button)",
                                                              "foldedComponentIds": Array [
                                                                "sc-kAzzGY",
                                                              ],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-bRBYWo",
                                                              "target": "button",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                          inverted={true}
                                                          onClick={[Function]}
                                                        >
                                                          <button
                                                            className="sc-kAzzGY sc-bRBYWo cDNhcw"
                                                            data-testhook-id="segment0-add-step"
                                                            onClick={[Function]}
                                                          >
                                                            <PlusIcon
                                                              color="#1779ba"
                                                              size={20}
                                                            >
                                                              <svg
                                                                height={20}
                                                                version="1.1"
                                                                viewBox="0 0 32 32"
                                                                width={20}
                                                                xmlns="http://www.w3.org/2000/svg"
                                                              >
                                                                <title>
                                                                  plus
                                                                </title>
                                                                <path
                                                                  d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                                  fill="#1779ba"
                                                                />
                                                              </svg>
                                                            </PlusIcon>
                                                          </button>
                                                        </StyledComponent>
                                                      </Styled(styled.button)>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                                <Step
                                                  index={0}
                                                  key="stepContainer0"
                                                  segment={
                                                    Object {
                                                      "name": "jenkins",
                                                      "steps": Array [
                                                        Object {
                                                          "authorizedKeyIds": Array [],
                                                          "expectedMaterials": Array [],
                                                          "expectedProducts": Array [],
                                                          "name": "approve",
                                                        },
                                                      ],
                                                    }
                                                  }
                                                  step={
                                                    Object {
                                                      "authorizedKeyIds": Array [],
                                                      "expectedMaterials": Array [],
                                                      "expectedProducts": Array [],
                                                      "name": "approve",
                                                    }
                                                  }
                                                >
                                                  <styled.section
                                                    data-testhook-id="jenkins-0-edit-step"
                                                    onClick={[Function]}
                                                  >
                                                    <StyledComponent
                                                      data-testhook-id="jenkins-0-edit-step"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-iRbamj",
                                                            "isStatic": false,
                                                            "lastClassName": "guFZCr",
                                                            "rules": Array [
                                                              "
  width: 100%;
  margin: 0 0 1rem;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.section",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-iRbamj",
                                                          "target": "section",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onClick={[Function]}
                                                    >
                                                      <section
                                                        className="sc-iRbamj guFZCr"
                                                        data-testhook-id="jenkins-0-edit-step"
                                                        onClick={[Function]}
                                                      >
                                                        <Styled(styled.header)
                                                          active={true}
                                                          clickable={true}
                                                        >
                                                          <StyledComponent
                                                            active={true}
                                                            clickable={true}
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-gPEVay",
                                                                  "isStatic": false,
                                                                  "lastClassName": "gwToXx",
                                                                  "rules": Array [
                                                                    "
  border: 1px solid
    ",
                                                                    [Function],
                                                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                                                    [Function],
                                                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                                    ".sc-VigVT",
                                                                    " {
    margin: 0;
  }

  ",
                                                                    ".sc-jTzLTM",
                                                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                                                    [Function],
                                                                    ";
    border: 1px solid ",
                                                                    [Function],
                                                                    ";
  }
",
                                                                  ],
                                                                },
                                                                "displayName": "Styled(styled.header)",
                                                                "foldedComponentIds": Array [
                                                                  "sc-ckVGcZ",
                                                                ],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-gPEVay",
                                                                "target": "header",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <header
                                                              className="sc-ckVGcZ sc-gPEVay gwToXx"
                                                            >
                                                              <styled.span>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-dxgOiQ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "fMWTVD",
                                                                        "rules": Array [
                                                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.span",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-dxgOiQ",
                                                                      "target": "span",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <span
                                                                    className="sc-dxgOiQ fMWTVD"
                                                                  >
                                                                    approve
                                                                  </span>
                                                                </StyledComponent>
                                                              </styled.span>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-jzJRlG",
                                                                        "isStatic": false,
                                                                        "lastClassName": "fswDQX",
                                                                        "rules": Array [
                                                                          "
  display: flex;
  align-items: center;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-jzJRlG",
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
                                                                    className="sc-jzJRlG fswDQX"
                                                                  >
                                                                    <Styled(styled.button)
                                                                      data-testhook-id="jenkins-0-select-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <StyledComponent
                                                                        data-testhook-id="jenkins-0-select-step"
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-jlyJG",
                                                                              "isStatic": false,
                                                                              "lastClassName": "cUQmju",
                                                                              "rules": Array [
                                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "Styled(styled.button)",
                                                                            "foldedComponentIds": Array [
                                                                              "sc-cSHVUG",
                                                                            ],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-jlyJG",
                                                                            "target": "button",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                        onClick={[Function]}
                                                                      >
                                                                        <button
                                                                          className="sc-cSHVUG sc-jlyJG cUQmju"
                                                                          data-testhook-id="jenkins-0-select-step"
                                                                          onClick={[Function]}
                                                                        >
                                                                          <EditIcon
                                                                            color="#1779ba"
                                                                            size={26}
                                                                          >
                                                                            <svg
                                                                              height={26}
                                                                              version="1.1"
                                                                              viewBox="0 0 24 24"
                                                                              width={26}
                                                                              xmlns="http://www.w3.org/2000/svg"
                                                                            >
                                                                              <path
                                                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                                fill="#1779ba"
                                                                              />
                                                                            </svg>
                                                                          </EditIcon>
                                                                        </button>
                                                                      </StyledComponent>
                                                                    </Styled(styled.button)>
                                                                    <Styled(styled.button)
                                                                      data-testhook-id="jenkins-0-delete-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <StyledComponent
                                                                        data-testhook-id="jenkins-0-delete-step"
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-gipzik",
                                                                              "isStatic": false,
                                                                              "lastClassName": "lduBUg",
                                                                              "rules": Array [
                                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "Styled(styled.button)",
                                                                            "foldedComponentIds": Array [
                                                                              "sc-cSHVUG",
                                                                            ],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-gipzik",
                                                                            "target": "button",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                        onClick={[Function]}
                                                                      >
                                                                        <button
                                                                          className="sc-cSHVUG sc-gipzik lduBUg"
                                                                          data-testhook-id="jenkins-0-delete-step"
                                                                          onClick={[Function]}
                                                                        >
                                                                          <RemoveIcon
                                                                            color="#1779ba"
                                                                            size={20}
                                                                          >
                                                                            <svg
                                                                              height={20}
                                                                              version="1.1"
                                                                              viewBox="0 0 32 32"
                                                                              width={20}
                                                                              xmlns="http://www.w3.org/2000/svg"
                                                                            >
                                                                              <title>
                                                                                trash
                                                                              </title>
                                                                              <path
                                                                                d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                                fill="#1779ba"
                                                                              />
                                                                            </svg>
                                                                          </RemoveIcon>
                                                                        </button>
                                                                      </StyledComponent>
                                                                    </Styled(styled.button)>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                            </header>
                                                          </StyledComponent>
                                                        </Styled(styled.header)>
                                                      </section>
                                                    </StyledComponent>
                                                  </styled.section>
                                                </Step>
                                              </section>
                                            </StyledComponent>
                                          </Styled(styled.section)>
                                        </ul>
                                      </StepsContainer>
                                    </Segment>
                                  </ul>
                                </StyledComponent>
                              </styled.ul>
                            </section>
                          </StyledComponent>
                        </Styled(styled.section)>
                      </ul>
                    </SegmentsContainer>
                    <Styled(styled.hr)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-eTuwsz",
                              "isStatic": false,
                              "lastClassName": "cdixMS",
                              "rules": Array [
                                "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                [Function],
                                ";
",
                                "
  margin: 0.7rem 0 1rem;
",
                              ],
                            },
                            "displayName": "Styled(styled.hr)",
                            "foldedComponentIds": Array [
                              "sc-bdVaJa",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-eTuwsz",
                            "target": "hr",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <hr
                          className="sc-bdVaJa sc-eTuwsz cdixMS"
                        />
                      </StyledComponent>
                    </Styled(styled.hr)>
                    <JsonSignAndSubmit>
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-kkGfuU",
                                "isStatic": false,
                                "lastClassName": "hWfVhn",
                                "rules": Array [
                                  "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-kkGfuU",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-kkGfuU hWfVhn"
                          >
                            <LoaderButton
                              buttonType="button"
                              dataTesthookId="layout-json-form-submit-button"
                              onClick={[Function]}
                            >
                              <styled.button
                                data-testhook-id="layout-json-form-submit-button"
                                onClick={[Function]}
                                type="button"
                              >
                                <StyledComponent
                                  data-testhook-id="layout-json-form-submit-button"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-iAyFgw",
                                        "isStatic": false,
                                        "lastClassName": "kuBZXY",
                                        "rules": Array [
                                          "
  ",
                                          "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                          [Function],
                                          ";
  color: ",
                                          [Function],
                                          ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                          [Function],
                                          ";
    cursor: pointer;
  }
",
                                          "

  background-color: ",
                                          [Function],
                                          ";

  &:hover {
    background-color: ",
                                          [Function],
                                          ";
    cursor: ",
                                          [Function],
                                          "
  }
",
                                        ],
                                      },
                                      "displayName": "styled.button",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-iAyFgw",
                                      "target": "button",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    className="sc-iAyFgw kuBZXY"
                                    data-testhook-id="layout-json-form-submit-button"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Sign and Submit
                                  </button>
                                </StyledComponent>
                              </styled.button>
                            </LoaderButton>
                            <Styled(Styled(styled.button))
                              data-testhook="cancel-button"
                              onMouseDown={[Function]}
                              type="button"
                            >
                              <StyledComponent
                                data-testhook="cancel-button"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-jqCOkK",
                                      "isStatic": false,
                                      "lastClassName": "jrhpuB",
                                      "rules": Array [
                                        "
  ",
                                        "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                        [Function],
                                        ";
    cursor: pointer;
  }
",
                                        "

  background-color: ",
                                        [Function],
                                        ";

  &:hover {
    background-color: ",
                                        [Function],
                                        ";
    cursor: ",
                                        [Function],
                                        "
  }
",
                                        "
  background-color: ",
                                        [Function],
                                        ";
  color: ",
                                        [Function],
                                        ";
  border: ",
                                        [Function],
                                        ";

  &:hover {
    background-color: ",
                                        [Function],
                                        ";
    color: ",
                                        [Function],
                                        ";
    border: 1px solid ",
                                        [Function],
                                        ";
    cursor: pointer;
  }
",
                                        "
  margin-left: 1rem;
",
                                      ],
                                    },
                                    "displayName": "Styled(Styled(styled.button))",
                                    "foldedComponentIds": Array [
                                      "sc-iAyFgw",
                                      "sc-cvbbAY",
                                    ],
                                    "render": [Function],
                                    "styledComponentId": "sc-jqCOkK",
                                    "target": "button",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onMouseDown={[Function]}
                                type="button"
                              >
                                <button
                                  className="sc-iAyFgw sc-cvbbAY sc-jqCOkK jrhpuB"
                                  data-testhook="cancel-button"
                                  onMouseDown={[Function]}
                                  type="button"
                                >
                                  Cancel
                                </button>
                              </StyledComponent>
                            </Styled(Styled(styled.button))>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </JsonSignAndSubmit>
                    <LayoutSigner>
                      <PassphraseDialogBox
                        onCancel={[Function]}
                        onConfirm={[Function]}
                        passphrase=""
                        showCryptoExceptionMessage={false}
                        showDialog={false}
                        showInvalidPassphraseMessage={false}
                      />
                    </LayoutSigner>
                  </main>
                </StyledComponent>
              </styled.main>
            </section>
          </StyledComponent>
        </styled.section>
      </Panel>
      <LayoutEditorDetailsPane>
        <Panel
          last={true}
          title="Edit step approve configuration"
          width="37.5vw"
        >
          <styled.section
            shrink={false}
            width="37.5vw"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "cxdaOh",
                    "rules": Array [
                      "
  flex: ",
                      [Function],
                      ";
  flex-grow: ",
                      [Function],
                      ";
  ",
                      [Function],
                      ";
  max-width: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.section",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "section",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
              width="37.5vw"
            >
              <section
                className="sc-gzVnrw cxdaOh"
                width="37.5vw"
              >
                <styled.header
                  last={true}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "isiUEp",
                          "rules": Array [
                            "
  margin: ",
                            [Function],
                            ";
  padding: 0.5rem 1rem;
  background-color: ",
                            [Function],
                            ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                          ],
                        },
                        "displayName": "styled.header",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "header",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    last={true}
                  >
                    <header
                      className="sc-dnqmqq isiUEp"
                    >
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-iwsKbI",
                                "isStatic": false,
                                "lastClassName": "jYrlHi",
                                "rules": Array [
                                  "
  justify-self: center;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-iwsKbI",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="sc-iwsKbI jYrlHi"
                          >
                            Edit step approve configuration
                          </p>
                        </StyledComponent>
                      </styled.p>
                    </header>
                  </StyledComponent>
                </styled.header>
                <styled.main
                  last={true}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "jFZBXo",
                          "rules": Array [
                            "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                            [Function],
                            ";
  margin: ",
                            [Function],
                            ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                            [Function],
                            ";
  }
",
                          ],
                        },
                        "displayName": "styled.main",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "main",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    last={true}
                    shrink={false}
                  >
                    <main
                      className="sc-htoDjs jFZBXo"
                    >
                      <styled.div>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-kIPQKe",
                                "isStatic": false,
                                "lastClassName": "jgMiIX",
                                "rules": Array [],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-kIPQKe",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-kIPQKe jgMiIX"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-eXEjpC",
                                      "isStatic": false,
                                      "lastClassName": "fuVqJC",
                                      "rules": Array [],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-eXEjpC",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-eXEjpC fuVqJC"
                                >
                                  <RequiredNumberOfLinks>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-dqBHgY",
                                              "isStatic": false,
                                              "lastClassName": "eEOMaY",
                                              "rules": Array [
                                                "
  margin: 0 0 1rem;

  ",
                                                ".sc-VigVT",
                                                " {
    margin: 0;
  }

  ",
                                                ".sc-jTzLTM",
                                                " {
    margin: 0;
  }
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-dqBHgY",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-dqBHgY eEOMaY"
                                        >
                                          <Styled(styled.div)>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-jDwBTQ",
                                                    "isStatic": false,
                                                    "lastClassName": "jYrklC",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: column;
",
                                                      "
  display: flex;
  flex-direction: column;
  width: 100%;

  ",
                                                      [Function],
                                                      "
",
                                                    ],
                                                  },
                                                  "displayName": "Styled(styled.div)",
                                                  "foldedComponentIds": Array [
                                                    "sc-bwzfXH",
                                                  ],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-jDwBTQ",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-bwzfXH sc-jDwBTQ jBdFgw"
                                              >
                                                <form
                                                  data-testhook-id="required-number-of-links-form"
                                                  onBlur={[Function]}
                                                  onSubmit={[Function]}
                                                >
                                                  <FormInput
                                                    dataTesthookId="required-number-of-links-form-field-0"
                                                    disabled={false}
                                                    formType="text"
                                                    innerRef={
                                                      Object {
                                                        "current": <input
                                                          class="sc-VigVT cBJosH"
                                                          data-testhook-id="required-number-of-links-form-field-0"
                                                          name="requiredNumberOfLinks"
                                                          type="text"
                                                          value=""
                                                        />,
                                                      }
                                                    }
                                                    labelValue="Required Number Of Links*"
                                                    name="requiredNumberOfLinks"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    value=""
                                                  >
                                                    <styled.div>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-eNQAEJ",
                                                              "isStatic": false,
                                                              "lastClassName": "gXOgPQ",
                                                              "rules": Array [
                                                                "
  display: flex;
  flex-direction: column;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.div",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-eNQAEJ",
                                                            "target": "div",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <div
                                                          className="sc-eNQAEJ gXOgPQ"
                                                        >
                                                          <styled.label>
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-jKJlTe",
                                                                    "isStatic": false,
                                                                    "lastClassName": "jKKzGO",
                                                                    "rules": Array [
                                                                      "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                                      [Function],
                                                                      ";
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.label",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-jKJlTe",
                                                                  "target": "label",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                            >
                                                              <label
                                                                className="sc-jKJlTe jKKzGO"
                                                              >
                                                                Required Number Of Links*
                                                              </label>
                                                            </StyledComponent>
                                                          </styled.label>
                                                          <styled.input
                                                            data-testhook-id="required-number-of-links-form-field-0"
                                                            disabled={false}
                                                            name="requiredNumberOfLinks"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            type="text"
                                                            value=""
                                                          >
                                                            <StyledComponent
                                                              data-testhook-id="required-number-of-links-form-field-0"
                                                              disabled={false}
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-VigVT",
                                                                    "isStatic": false,
                                                                    "lastClassName": "cBJosH",
                                                                    "rules": Array [
                                                                      "
  ",
                                                                      "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                      [Function],
                                                                      ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                                      [Function],
                                                                      ";
  border-radius: 0;
  background-color: ",
                                                                      [Function],
                                                                      ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                                      [Function],
                                                                      ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                      [Function],
                                                                      ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                      [Function],
                                                                      ";
    box-shadow: 0 0 5px ",
                                                                      [Function],
                                                                      ";
  }
",
                                                                      "
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.input",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-VigVT",
                                                                  "target": "input",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={
                                                                Object {
                                                                  "current": <input
                                                                    class="sc-VigVT cBJosH"
                                                                    data-testhook-id="required-number-of-links-form-field-0"
                                                                    name="requiredNumberOfLinks"
                                                                    type="text"
                                                                    value=""
                                                                  />,
                                                                }
                                                              }
                                                              name="requiredNumberOfLinks"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              type="text"
                                                              value=""
                                                            >
                                                              <input
                                                                className="sc-VigVT cBJosH"
                                                                data-testhook-id="required-number-of-links-form-field-0"
                                                                disabled={false}
                                                                name="requiredNumberOfLinks"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                type="text"
                                                                value=""
                                                              />
                                                            </StyledComponent>
                                                          </styled.input>
                                                        </div>
                                                      </StyledComponent>
                                                    </styled.div>
                                                  </FormInput>
                                                </form>
                                              </div>
                                            </StyledComponent>
                                          </Styled(styled.div)>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </RequiredNumberOfLinks>
                                  <ApprovalConfigEditor>
                                    <ArtifactCollectorEditor
                                      artifactCollectorSpecifications={Array []}
                                      title="Approval collectors"
                                    >
                                      <Styled(styled.section)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-hEsumM",
                                                "isStatic": false,
                                                "lastClassName": "eAVtxg",
                                                "rules": Array [
                                                  "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                  [Function],
                                                  ";

  background: ",
                                                  [Function],
                                                  ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.section)",
                                              "foldedComponentIds": Array [
                                                "sc-fjdhpX",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-hEsumM",
                                              "target": "section",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <section
                                            className="sc-fjdhpX sc-hEsumM eAVtxg"
                                          >
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-chPdSV",
                                                      "isStatic": false,
                                                      "lastClassName": "bBFivD",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-chPdSV",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-chPdSV bBFivD"
                                                >
                                                  <Styled(styled.header)>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-ktHwxA",
                                                            "isStatic": false,
                                                            "lastClassName": "eqTlvr",
                                                            "rules": Array [
                                                              "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                              [Function],
                                                              ";
  background-color: ",
                                                              [Function],
                                                              ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.header)",
                                                          "foldedComponentIds": Array [
                                                            "sc-kgoBCf",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-ktHwxA",
                                                          "target": "header",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <header
                                                        className="sc-kgoBCf sc-ktHwxA eqTlvr"
                                                      >
                                                        Approval collectors
                                                      </header>
                                                    </StyledComponent>
                                                  </Styled(styled.header)>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <styled.ul>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-kpOJdX",
                                                      "isStatic": false,
                                                      "lastClassName": "idQdSz",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.ul",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-kpOJdX",
                                                    "target": "ul",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <ul
                                                  className="sc-kpOJdX idQdSz"
                                                >
                                                  <li
                                                    key="collector-row-0"
                                                  >
                                                    <EditorForm
                                                      collector={Object {}}
                                                    >
                                                      <styled.section>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-brqgnP",
                                                                "isStatic": false,
                                                                "lastClassName": "bXyrXF",
                                                                "rules": Array [
                                                                  "
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
  padding: 1rem;

  ",
                                                                  ".sc-jWBwVP",
                                                                  " {
    margin: 0 0 0 1rem;
  }

  background-color: ",
                                                                  [Function],
                                                                  ";
",
                                                                ],
                                                              },
                                                              "displayName": "styled.section",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-brqgnP",
                                                              "target": "section",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <section
                                                            className="sc-brqgnP bXyrXF"
                                                          >
                                                            <label
                                                              htmlFor="collectorType"
                                                            >
                                                              Collector type:
                                                            </label>
                                                            <styled.select
                                                              id="collectorType"
                                                              name="collectorType"
                                                              onChange={[Function]}
                                                              value="XLDEPLOY"
                                                            >
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-jWBwVP",
                                                                      "isStatic": false,
                                                                      "lastClassName": "jqkIu",
                                                                      "rules": Array [
                                                                        "
  ",
                                                                        "
  &::-ms-expand {
    display: none;
  }

  margin: 0 0 1rem;
  display: flex;
  box-sizing: border-box;
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  padding: 0.5rem 2rem 0.5rem 0.5rem;
  border: 1px solid ",
                                                                        [Function],
                                                                        ";
  border-radius: 0;
  font: inherit;
  line-height: inherit;
  appearance: none;
  background-repeat: no-repeat;
  background-image: linear-gradient(45deg, transparent 50%, currentColor 50%),
    linear-gradient(135deg, currentColor 50%, transparent 50%);
  background-position: right 15px top 1em, right 10px top 1em;
  background-size: 5px 5px, 5px 5px;

  background-color: ",
                                                                        [Function],
                                                                        ";
  &:hover {
    cursor: ",
                                                                        [Function],
                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                        [Function],
                                                                        ";
    box-shadow: 0 0 5px ",
                                                                        [Function],
                                                                        ";
  }
",
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.select",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-jWBwVP",
                                                                    "target": "select",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                                id="collectorType"
                                                                name="collectorType"
                                                                onChange={[Function]}
                                                                value="XLDEPLOY"
                                                              >
                                                                <select
                                                                  className="sc-jWBwVP jqkIu"
                                                                  id="collectorType"
                                                                  name="collectorType"
                                                                  onChange={[Function]}
                                                                  value="XLDEPLOY"
                                                                >
                                                                  <option
                                                                    value="select"
                                                                  >
                                                                    select...
                                                                  </option>
                                                                  <option
                                                                    value="XLDEPLOY"
                                                                  >
                                                                    XL deploy
                                                                  </option>
                                                                  <option
                                                                    value="GIT"
                                                                  >
                                                                    git
                                                                  </option>
                                                                </select>
                                                              </StyledComponent>
                                                            </styled.select>
                                                          </section>
                                                        </StyledComponent>
                                                      </styled.section>
                                                      <Styled(styled.section)>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-cmTdod",
                                                                "isStatic": false,
                                                                "lastClassName": "bJZghm",
                                                                "rules": Array [
                                                                  "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                                  [Function],
                                                                  ";

  background: ",
                                                                  [Function],
                                                                  ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                                  "
  margin: 0;
  padding: 0;
  border: 0;
  flex-direction: column;
  min-height: 10rem;
  background-color: ",
                                                                  [Function],
                                                                  ";
",
                                                                ],
                                                              },
                                                              "displayName": "Styled(styled.section)",
                                                              "foldedComponentIds": Array [
                                                                "sc-fjdhpX",
                                                              ],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-cmTdod",
                                                              "target": "section",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <section
                                                            className="sc-fjdhpX sc-cmTdod bJZghm"
                                                          >
                                                            <Styled(styled.div)
                                                              alternateStyling={true}
                                                            >
                                                              <StyledComponent
                                                                alternateStyling={true}
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-jDwBTQ",
                                                                      "isStatic": false,
                                                                      "lastClassName": "jYrklC",
                                                                      "rules": Array [
                                                                        "
  display: flex;
  flex-direction: column;
",
                                                                        "
  display: flex;
  flex-direction: column;
  width: 100%;

  ",
                                                                        [Function],
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "Styled(styled.div)",
                                                                    "foldedComponentIds": Array [
                                                                      "sc-bwzfXH",
                                                                    ],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-jDwBTQ",
                                                                    "target": "div",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <div
                                                                  className="sc-bwzfXH sc-jDwBTQ jYrklC"
                                                                >
                                                                  <form
                                                                    data-testhook-id="collector-edit-form"
                                                                    onBlur={[Function]}
                                                                    onSubmit={[Function]}
                                                                  >
                                                                    <FormInput
                                                                      dataTesthookId="collector-edit-form-field-0"
                                                                      disabled={false}
                                                                      formType="text"
                                                                      innerRef={
                                                                        Object {
                                                                          "current": <input
                                                                            class="sc-VigVT cBJosH"
                                                                            data-testhook-id="collector-edit-form-field-0"
                                                                            name="name"
                                                                            type="text"
                                                                            value="xlCollect"
                                                                          />,
                                                                        }
                                                                      }
                                                                      labelValue="Name*"
                                                                      name="name"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      value="xlCollect"
                                                                    >
                                                                      <styled.div>
                                                                        <StyledComponent
                                                                          forwardedComponent={
                                                                            Object {
                                                                              "$$typeof": Symbol(react.forward_ref),
                                                                              "attrs": Array [],
                                                                              "componentStyle": ComponentStyle {
                                                                                "componentId": "sc-eNQAEJ",
                                                                                "isStatic": false,
                                                                                "lastClassName": "gXOgPQ",
                                                                                "rules": Array [
                                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                                ],
                                                                              },
                                                                              "displayName": "styled.div",
                                                                              "foldedComponentIds": Array [],
                                                                              "render": [Function],
                                                                              "styledComponentId": "sc-eNQAEJ",
                                                                              "target": "div",
                                                                              "toString": [Function],
                                                                              "warnTooManyClasses": [Function],
                                                                              "withComponent": [Function],
                                                                            }
                                                                          }
                                                                          forwardedRef={null}
                                                                        >
                                                                          <div
                                                                            className="sc-eNQAEJ gXOgPQ"
                                                                          >
                                                                            <styled.label>
                                                                              <StyledComponent
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-jKJlTe",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "jKKzGO",
                                                                                      "rules": Array [
                                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                                                        [Function],
                                                                                        ";
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.label",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-jKJlTe",
                                                                                    "target": "label",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                              >
                                                                                <label
                                                                                  className="sc-jKJlTe jKKzGO"
                                                                                >
                                                                                  Name*
                                                                                </label>
                                                                              </StyledComponent>
                                                                            </styled.label>
                                                                            <styled.input
                                                                              data-testhook-id="collector-edit-form-field-0"
                                                                              disabled={false}
                                                                              name="name"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              type="text"
                                                                              value="xlCollect"
                                                                            >
                                                                              <StyledComponent
                                                                                data-testhook-id="collector-edit-form-field-0"
                                                                                disabled={false}
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-VigVT",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "cBJosH",
                                                                                      "rules": Array [
                                                                                        "
  ",
                                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                                        [Function],
                                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
  border-radius: 0;
  background-color: ",
                                                                                        [Function],
                                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                                                        [Function],
                                                                                        ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                                        [Function],
                                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
    box-shadow: 0 0 5px ",
                                                                                        [Function],
                                                                                        ";
  }
",
                                                                                        "
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.input",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-VigVT",
                                                                                    "target": "input",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={
                                                                                  Object {
                                                                                    "current": <input
                                                                                      class="sc-VigVT cBJosH"
                                                                                      data-testhook-id="collector-edit-form-field-0"
                                                                                      name="name"
                                                                                      type="text"
                                                                                      value="xlCollect"
                                                                                    />,
                                                                                  }
                                                                                }
                                                                                name="name"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                type="text"
                                                                                value="xlCollect"
                                                                              >
                                                                                <input
                                                                                  className="sc-VigVT cBJosH"
                                                                                  data-testhook-id="collector-edit-form-field-0"
                                                                                  disabled={false}
                                                                                  name="name"
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  type="text"
                                                                                  value="xlCollect"
                                                                                />
                                                                              </StyledComponent>
                                                                            </styled.input>
                                                                          </div>
                                                                        </StyledComponent>
                                                                      </styled.div>
                                                                    </FormInput>
                                                                    <FormInput
                                                                      dataTesthookId="collector-edit-form-field-1"
                                                                      disabled={false}
                                                                      formType="text"
                                                                      labelValue="Service URL*"
                                                                      name="uri"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      value="https://collect.org"
                                                                    >
                                                                      <styled.div>
                                                                        <StyledComponent
                                                                          forwardedComponent={
                                                                            Object {
                                                                              "$$typeof": Symbol(react.forward_ref),
                                                                              "attrs": Array [],
                                                                              "componentStyle": ComponentStyle {
                                                                                "componentId": "sc-eNQAEJ",
                                                                                "isStatic": false,
                                                                                "lastClassName": "gXOgPQ",
                                                                                "rules": Array [
                                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                                ],
                                                                              },
                                                                              "displayName": "styled.div",
                                                                              "foldedComponentIds": Array [],
                                                                              "render": [Function],
                                                                              "styledComponentId": "sc-eNQAEJ",
                                                                              "target": "div",
                                                                              "toString": [Function],
                                                                              "warnTooManyClasses": [Function],
                                                                              "withComponent": [Function],
                                                                            }
                                                                          }
                                                                          forwardedRef={null}
                                                                        >
                                                                          <div
                                                                            className="sc-eNQAEJ gXOgPQ"
                                                                          >
                                                                            <styled.label>
                                                                              <StyledComponent
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-jKJlTe",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "jKKzGO",
                                                                                      "rules": Array [
                                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                                                        [Function],
                                                                                        ";
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.label",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-jKJlTe",
                                                                                    "target": "label",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                              >
                                                                                <label
                                                                                  className="sc-jKJlTe jKKzGO"
                                                                                >
                                                                                  Service URL*
                                                                                </label>
                                                                              </StyledComponent>
                                                                            </styled.label>
                                                                            <styled.input
                                                                              data-testhook-id="collector-edit-form-field-1"
                                                                              disabled={false}
                                                                              name="uri"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              type="text"
                                                                              value="https://collect.org"
                                                                            >
                                                                              <StyledComponent
                                                                                data-testhook-id="collector-edit-form-field-1"
                                                                                disabled={false}
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-VigVT",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "cBJosH",
                                                                                      "rules": Array [
                                                                                        "
  ",
                                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                                        [Function],
                                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
  border-radius: 0;
  background-color: ",
                                                                                        [Function],
                                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                                                        [Function],
                                                                                        ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                                        [Function],
                                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
    box-shadow: 0 0 5px ",
                                                                                        [Function],
                                                                                        ";
  }
",
                                                                                        "
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.input",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-VigVT",
                                                                                    "target": "input",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                                name="uri"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                type="text"
                                                                                value="https://collect.org"
                                                                              >
                                                                                <input
                                                                                  className="sc-VigVT cBJosH"
                                                                                  data-testhook-id="collector-edit-form-field-1"
                                                                                  disabled={false}
                                                                                  name="uri"
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  type="text"
                                                                                  value="https://collect.org"
                                                                                />
                                                                              </StyledComponent>
                                                                            </styled.input>
                                                                          </div>
                                                                        </StyledComponent>
                                                                      </styled.div>
                                                                    </FormInput>
                                                                    <FormInput
                                                                      dataTesthookId="collector-edit-form-field-2"
                                                                      disabled={false}
                                                                      formType="text"
                                                                      labelValue="Application Name*"
                                                                      name="applicationName"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      value="appName"
                                                                    >
                                                                      <styled.div>
                                                                        <StyledComponent
                                                                          forwardedComponent={
                                                                            Object {
                                                                              "$$typeof": Symbol(react.forward_ref),
                                                                              "attrs": Array [],
                                                                              "componentStyle": ComponentStyle {
                                                                                "componentId": "sc-eNQAEJ",
                                                                                "isStatic": false,
                                                                                "lastClassName": "gXOgPQ",
                                                                                "rules": Array [
                                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                                ],
                                                                              },
                                                                              "displayName": "styled.div",
                                                                              "foldedComponentIds": Array [],
                                                                              "render": [Function],
                                                                              "styledComponentId": "sc-eNQAEJ",
                                                                              "target": "div",
                                                                              "toString": [Function],
                                                                              "warnTooManyClasses": [Function],
                                                                              "withComponent": [Function],
                                                                            }
                                                                          }
                                                                          forwardedRef={null}
                                                                        >
                                                                          <div
                                                                            className="sc-eNQAEJ gXOgPQ"
                                                                          >
                                                                            <styled.label>
                                                                              <StyledComponent
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-jKJlTe",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "jKKzGO",
                                                                                      "rules": Array [
                                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                                                                        [Function],
                                                                                        ";
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.label",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-jKJlTe",
                                                                                    "target": "label",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                              >
                                                                                <label
                                                                                  className="sc-jKJlTe jKKzGO"
                                                                                >
                                                                                  Application Name*
                                                                                </label>
                                                                              </StyledComponent>
                                                                            </styled.label>
                                                                            <styled.input
                                                                              data-testhook-id="collector-edit-form-field-2"
                                                                              disabled={false}
                                                                              name="applicationName"
                                                                              onBlur={[Function]}
                                                                              onChange={[Function]}
                                                                              type="text"
                                                                              value="appName"
                                                                            >
                                                                              <StyledComponent
                                                                                data-testhook-id="collector-edit-form-field-2"
                                                                                disabled={false}
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-VigVT",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "cBJosH",
                                                                                      "rules": Array [
                                                                                        "
  ",
                                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                                        [Function],
                                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
  border-radius: 0;
  background-color: ",
                                                                                        [Function],
                                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                                                                        [Function],
                                                                                        ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                                        [Function],
                                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                                                                        [Function],
                                                                                        ";
    box-shadow: 0 0 5px ",
                                                                                        [Function],
                                                                                        ";
  }
",
                                                                                        "
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.input",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-VigVT",
                                                                                    "target": "input",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                                name="applicationName"
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                type="text"
                                                                                value="appName"
                                                                              >
                                                                                <input
                                                                                  className="sc-VigVT cBJosH"
                                                                                  data-testhook-id="collector-edit-form-field-2"
                                                                                  disabled={false}
                                                                                  name="applicationName"
                                                                                  onBlur={[Function]}
                                                                                  onChange={[Function]}
                                                                                  type="text"
                                                                                  value="appName"
                                                                                />
                                                                              </StyledComponent>
                                                                            </styled.input>
                                                                          </div>
                                                                        </StyledComponent>
                                                                      </styled.div>
                                                                    </FormInput>
                                                                    <styled.hr>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bdVaJa",
                                                                              "isStatic": false,
                                                                              "lastClassName": "jLEqym",
                                                                              "rules": Array [
                                                                                "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                                                                [Function],
                                                                                ";
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.hr",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bdVaJa",
                                                                            "target": "hr",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <hr
                                                                          className="sc-bdVaJa jLEqym"
                                                                        />
                                                                      </StyledComponent>
                                                                    </styled.hr>
                                                                    <styled.div>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-kkGfuU",
                                                                              "isStatic": false,
                                                                              "lastClassName": "hWfVhn",
                                                                              "rules": Array [
                                                                                "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                                                [Function],
                                                                                ";
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-kkGfuU",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <div
                                                                          className="sc-kkGfuU hWfVhn"
                                                                        >
                                                                          <LoaderButton
                                                                            buttonType="button"
                                                                            dataTesthookId="collector-edit-form-submit-button"
                                                                            loading={false}
                                                                            onMouseDown={[Function]}
                                                                          >
                                                                            <styled.button
                                                                              data-testhook-id="collector-edit-form-submit-button"
                                                                              onMouseDown={[Function]}
                                                                              type="button"
                                                                            >
                                                                              <StyledComponent
                                                                                data-testhook-id="collector-edit-form-submit-button"
                                                                                forwardedComponent={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "attrs": Array [],
                                                                                    "componentStyle": ComponentStyle {
                                                                                      "componentId": "sc-iAyFgw",
                                                                                      "isStatic": false,
                                                                                      "lastClassName": "kuBZXY",
                                                                                      "rules": Array [
                                                                                        "
  ",
                                                                                        "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                                                        [Function],
                                                                                        ";
  color: ",
                                                                                        [Function],
                                                                                        ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                                                        [Function],
                                                                                        ";
    cursor: pointer;
  }
",
                                                                                        "

  background-color: ",
                                                                                        [Function],
                                                                                        ";

  &:hover {
    background-color: ",
                                                                                        [Function],
                                                                                        ";
    cursor: ",
                                                                                        [Function],
                                                                                        "
  }
",
                                                                                      ],
                                                                                    },
                                                                                    "displayName": "styled.button",
                                                                                    "foldedComponentIds": Array [],
                                                                                    "render": [Function],
                                                                                    "styledComponentId": "sc-iAyFgw",
                                                                                    "target": "button",
                                                                                    "toString": [Function],
                                                                                    "warnTooManyClasses": [Function],
                                                                                    "withComponent": [Function],
                                                                                  }
                                                                                }
                                                                                forwardedRef={null}
                                                                                onMouseDown={[Function]}
                                                                                type="button"
                                                                              >
                                                                                <button
                                                                                  className="sc-iAyFgw kuBZXY"
                                                                                  data-testhook-id="collector-edit-form-submit-button"
                                                                                  onMouseDown={[Function]}
                                                                                  type="button"
                                                                                >
                                                                                  Save
                                                                                </button>
                                                                              </StyledComponent>
                                                                            </styled.button>
                                                                          </LoaderButton>
                                                                          <Styled(Styled(styled.button))
                                                                            data-testhook="cancel-button"
                                                                            onMouseDown={[Function]}
                                                                            type="button"
                                                                          >
                                                                            <StyledComponent
                                                                              data-testhook="cancel-button"
                                                                              forwardedComponent={
                                                                                Object {
                                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                                  "attrs": Array [],
                                                                                  "componentStyle": ComponentStyle {
                                                                                    "componentId": "sc-jAaTju",
                                                                                    "isStatic": false,
                                                                                    "lastClassName": "hVyGKy",
                                                                                    "rules": Array [
                                                                                      "
  ",
                                                                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                                                      [Function],
                                                                                      ";
  color: ",
                                                                                      [Function],
                                                                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                                                      [Function],
                                                                                      ";
    cursor: pointer;
  }
",
                                                                                      "

  background-color: ",
                                                                                      [Function],
                                                                                      ";

  &:hover {
    background-color: ",
                                                                                      [Function],
                                                                                      ";
    cursor: ",
                                                                                      [Function],
                                                                                      "
  }
",
                                                                                      "
  background-color: ",
                                                                                      [Function],
                                                                                      ";
  color: ",
                                                                                      [Function],
                                                                                      ";
  border: ",
                                                                                      [Function],
                                                                                      ";

  &:hover {
    background-color: ",
                                                                                      [Function],
                                                                                      ";
    color: ",
                                                                                      [Function],
                                                                                      ";
    border: 1px solid ",
                                                                                      [Function],
                                                                                      ";
    cursor: pointer;
  }
",
                                                                                      "
  margin-left: 1rem;
",
                                                                                    ],
                                                                                  },
                                                                                  "displayName": "Styled(Styled(styled.button))",
                                                                                  "foldedComponentIds": Array [
                                                                                    "sc-iAyFgw",
                                                                                    "sc-cvbbAY",
                                                                                  ],
                                                                                  "render": [Function],
                                                                                  "styledComponentId": "sc-jAaTju",
                                                                                  "target": "button",
                                                                                  "toString": [Function],
                                                                                  "warnTooManyClasses": [Function],
                                                                                  "withComponent": [Function],
                                                                                }
                                                                              }
                                                                              forwardedRef={null}
                                                                              onMouseDown={[Function]}
                                                                              type="button"
                                                                            >
                                                                              <button
                                                                                className="sc-iAyFgw sc-cvbbAY sc-jAaTju hVyGKy"
                                                                                data-testhook="cancel-button"
                                                                                onMouseDown={[Function]}
                                                                                type="button"
                                                                              >
                                                                                Cancel
                                                                              </button>
                                                                            </StyledComponent>
                                                                          </Styled(Styled(styled.button))>
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </form>
                                                                </div>
                                                              </StyledComponent>
                                                            </Styled(styled.div)>
                                                             
                                                          </section>
                                                        </StyledComponent>
                                                      </Styled(styled.section)>
                                                    </EditorForm>
                                                  </li>
                                                </ul>
                                              </StyledComponent>
                                            </styled.ul>
                                          </section>
                                        </StyledComponent>
                                      </Styled(styled.section)>
                                    </ArtifactCollectorEditor>
                                  </ApprovalConfigEditor>
                                  <StepAuthorizedAccountEditor>
                                    <Styled(styled.section)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-dfVpRl",
                                              "isStatic": false,
                                              "lastClassName": "czegfj",
                                              "rules": Array [
                                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                [Function],
                                                ";

  background: ",
                                                [Function],
                                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.section)",
                                            "foldedComponentIds": Array [
                                              "sc-fjdhpX",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-dfVpRl",
                                            "target": "section",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <section
                                          className="sc-fjdhpX sc-dfVpRl czegfj"
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-chPdSV",
                                                    "isStatic": false,
                                                    "lastClassName": "bBFivD",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-chPdSV",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-chPdSV bBFivD"
                                              >
                                                <Styled(styled.header)>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-gzOgki",
                                                          "isStatic": false,
                                                          "lastClassName": "gdmeaY",
                                                          "rules": Array [
                                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                            [Function],
                                                            ";
  background-color: ",
                                                            [Function],
                                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.header)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kgoBCf",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-gzOgki",
                                                        "target": "header",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <header
                                                      className="sc-kgoBCf sc-gzOgki gdmeaY"
                                                    >
                                                      Authorized Personal Accounts
                                                    </header>
                                                  </StyledComponent>
                                                </Styled(styled.header)>
                                                <Styled(styled.button)
                                                  data-testhook-id="add-key"
                                                  onClick={[Function]}
                                                >
                                                  <StyledComponent
                                                    data-testhook-id="add-key"
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-iyvyFf",
                                                          "isStatic": false,
                                                          "lastClassName": "jkOiXL",
                                                          "rules": Array [
                                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.button)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kAzzGY",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-iyvyFf",
                                                        "target": "button",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    onClick={[Function]}
                                                  >
                                                    <button
                                                      className="sc-kAzzGY sc-iyvyFf jkOiXL"
                                                      data-testhook-id="add-key"
                                                      onClick={[Function]}
                                                    >
                                                      <PlusIcon
                                                        color="#1779ba"
                                                        size={24}
                                                      >
                                                        <svg
                                                          height={24}
                                                          version="1.1"
                                                          viewBox="0 0 32 32"
                                                          width={24}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <title>
                                                            plus
                                                          </title>
                                                          <path
                                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                            fill="#1779ba"
                                                          />
                                                        </svg>
                                                      </PlusIcon>
                                                    </button>
                                                  </StyledComponent>
                                                </Styled(styled.button)>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                          <styled.ul>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-kpOJdX",
                                                    "isStatic": false,
                                                    "lastClassName": "idQdSz",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.ul",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-kpOJdX",
                                                  "target": "ul",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ul
                                                className="sc-kpOJdX idQdSz"
                                              />
                                            </StyledComponent>
                                          </styled.ul>
                                        </section>
                                      </StyledComponent>
                                    </Styled(styled.section)>
                                  </StepAuthorizedAccountEditor>
                                  <RuleEditor
                                    addAction={27}
                                    editAction={29}
                                    initialRules={Array []}
                                    removeAction={28}
                                    title="Expected Materials"
                                  >
                                    <Styled(styled.section)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-btzYZH",
                                              "isStatic": false,
                                              "lastClassName": "jvrdbY",
                                              "rules": Array [
                                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                [Function],
                                                ";

  background: ",
                                                [Function],
                                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                "
  li ~ ",
                                                ".sc-jDwBTQ",
                                                " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                                ".sc-jDwBTQ",
                                                " {
    margin-top: 0;
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.section)",
                                            "foldedComponentIds": Array [
                                              "sc-fjdhpX",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-btzYZH",
                                            "target": "section",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <section
                                          className="sc-fjdhpX sc-btzYZH jvrdbY"
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-chPdSV",
                                                    "isStatic": false,
                                                    "lastClassName": "bBFivD",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-chPdSV",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-chPdSV bBFivD"
                                              >
                                                <Styled(styled.header)>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-lhVmIH",
                                                          "isStatic": false,
                                                          "lastClassName": "eHyLYd",
                                                          "rules": Array [
                                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                            [Function],
                                                            ";
  background-color: ",
                                                            [Function],
                                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.header)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kgoBCf",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-lhVmIH",
                                                        "target": "header",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <header
                                                      className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                                    >
                                                      Expected Materials
                                                    </header>
                                                  </StyledComponent>
                                                </Styled(styled.header)>
                                                <Styled(styled.button)
                                                  data-testhook-id="add-rule"
                                                  onClick={[Function]}
                                                >
                                                  <StyledComponent
                                                    data-testhook-id="add-rule"
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-bYSBpT",
                                                          "isStatic": false,
                                                          "lastClassName": "ftOxhC",
                                                          "rules": Array [
                                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.button)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kAzzGY",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-bYSBpT",
                                                        "target": "button",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    onClick={[Function]}
                                                  >
                                                    <button
                                                      className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                                      data-testhook-id="add-rule"
                                                      onClick={[Function]}
                                                    >
                                                      <PlusIcon
                                                        color="#1779ba"
                                                        size={24}
                                                      >
                                                        <svg
                                                          height={24}
                                                          version="1.1"
                                                          viewBox="0 0 32 32"
                                                          width={24}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <title>
                                                            plus
                                                          </title>
                                                          <path
                                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                            fill="#1779ba"
                                                          />
                                                        </svg>
                                                      </PlusIcon>
                                                    </button>
                                                  </StyledComponent>
                                                </Styled(styled.button)>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                          <styled.ul>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-kpOJdX",
                                                    "isStatic": false,
                                                    "lastClassName": "idQdSz",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.ul",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-kpOJdX",
                                                  "target": "ul",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ul
                                                className="sc-kpOJdX idQdSz"
                                              />
                                            </StyledComponent>
                                          </styled.ul>
                                        </section>
                                      </StyledComponent>
                                    </Styled(styled.section)>
                                  </RuleEditor>
                                  <RuleEditor
                                    addAction={24}
                                    editAction={26}
                                    initialRules={Array []}
                                    removeAction={25}
                                    title="Expected Products"
                                  >
                                    <Styled(styled.section)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-btzYZH",
                                              "isStatic": false,
                                              "lastClassName": "jvrdbY",
                                              "rules": Array [
                                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                                [Function],
                                                ";

  background: ",
                                                [Function],
                                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                                "
  li ~ ",
                                                ".sc-jDwBTQ",
                                                " {
    margin-top: 1rem;
  }

  li ~ section ~ ",
                                                ".sc-jDwBTQ",
                                                " {
    margin-top: 0;
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.section)",
                                            "foldedComponentIds": Array [
                                              "sc-fjdhpX",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-btzYZH",
                                            "target": "section",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <section
                                          className="sc-fjdhpX sc-btzYZH jvrdbY"
                                        >
                                          <styled.div>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-chPdSV",
                                                    "isStatic": false,
                                                    "lastClassName": "bBFivD",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.div",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-chPdSV",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-chPdSV bBFivD"
                                              >
                                                <Styled(styled.header)>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-lhVmIH",
                                                          "isStatic": false,
                                                          "lastClassName": "eHyLYd",
                                                          "rules": Array [
                                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                                            [Function],
                                                            ";
  background-color: ",
                                                            [Function],
                                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.header)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kgoBCf",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-lhVmIH",
                                                        "target": "header",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <header
                                                      className="sc-kgoBCf sc-lhVmIH eHyLYd"
                                                    >
                                                      Expected Products
                                                    </header>
                                                  </StyledComponent>
                                                </Styled(styled.header)>
                                                <Styled(styled.button)
                                                  data-testhook-id="add-rule"
                                                  onClick={[Function]}
                                                >
                                                  <StyledComponent
                                                    data-testhook-id="add-rule"
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-bYSBpT",
                                                          "isStatic": false,
                                                          "lastClassName": "ftOxhC",
                                                          "rules": Array [
                                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                                            [Function],
                                                            "
",
                                                          ],
                                                        },
                                                        "displayName": "Styled(styled.button)",
                                                        "foldedComponentIds": Array [
                                                          "sc-kAzzGY",
                                                        ],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-bYSBpT",
                                                        "target": "button",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    onClick={[Function]}
                                                  >
                                                    <button
                                                      className="sc-kAzzGY sc-bYSBpT ftOxhC"
                                                      data-testhook-id="add-rule"
                                                      onClick={[Function]}
                                                    >
                                                      <PlusIcon
                                                        color="#1779ba"
                                                        size={24}
                                                      >
                                                        <svg
                                                          height={24}
                                                          version="1.1"
                                                          viewBox="0 0 32 32"
                                                          width={24}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <title>
                                                            plus
                                                          </title>
                                                          <path
                                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                            fill="#1779ba"
                                                          />
                                                        </svg>
                                                      </PlusIcon>
                                                    </button>
                                                  </StyledComponent>
                                                </Styled(styled.button)>
                                              </div>
                                            </StyledComponent>
                                          </styled.div>
                                          <styled.ul>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-kpOJdX",
                                                    "isStatic": false,
                                                    "lastClassName": "idQdSz",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.ul",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-kpOJdX",
                                                  "target": "ul",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <ul
                                                className="sc-kpOJdX idQdSz"
                                              />
                                            </StyledComponent>
                                          </styled.ul>
                                        </section>
                                      </StyledComponent>
                                    </Styled(styled.section)>
                                  </RuleEditor>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </main>
                  </StyledComponent>
                </styled.main>
              </section>
            </StyledComponent>
          </styled.section>
        </Panel>
      </LayoutEditorDetailsPane>
    </ManageLayoutPanel>
  </ThemeProvider>
</HierarchyEditorTestWrapper>
`;

exports[`validates a faulty layout and returns errors 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "lastClassName": "cxdaOh",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-gzVnrw cxdaOh"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dnqmqq",
                    "isStatic": false,
                    "lastClassName": "isiUEp",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: ",
                      [Function],
                      ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dnqmqq",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-dnqmqq cpDgSY"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jYrlHi",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-iwsKbI jYrlHi"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "lastClassName": "gMTTkT",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-gZMcBi gMTTkT"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "jFZBXo",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-htoDjs gcwhQU"
              >
                <PanelBreadCrumb
                  breadcrumb="label / "
                  node={
                    Object {
                      "hasChildren": false,
                      "name": "layout",
                      "parentId": "",
                      "referenceId": "supplyChainId",
                      "type": "SUPPLY_CHAIN",
                    }
                  }
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ibxdXY",
                            "isStatic": false,
                            "lastClassName": "eefExt",
                            "rules": Array [
                              "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ibxdXY",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-ibxdXY eefExt"
                      >
                        Selected: 
                        label / 
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-RefOD",
                                  "isStatic": false,
                                  "lastClassName": "ewapal",
                                  "rules": Array [
                                    "
  color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-RefOD",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-RefOD ewapal"
                            >
                               / 
                              layout
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.hr>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "jLEqym",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.hr",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-bdVaJa jLEqym"
                      />
                    </StyledComponent>
                  </styled.hr>
                </PanelBreadCrumb>
                <Layout>
                  <styled.section
                    data-testhook-id="layout-edit"
                  >
                    <StyledComponent
                      data-testhook-id="layout-edit"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwCtUz",
                            "isStatic": false,
                            "lastClassName": "gccGwq",
                            "rules": Array [
                              "
  width: 100%;
  margin: 0 0 1rem;
",
                            ],
                          },
                          "displayName": "styled.section",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwCtUz",
                          "target": "section",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <section
                        className="sc-bwCtUz gccGwq"
                        data-testhook-id="layout-edit"
                      >
                        <Styled(styled.header)
                          active={false}
                          clickable={false}
                        >
                          <StyledComponent
                            active={false}
                            clickable={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-iQKALj",
                                  "isStatic": false,
                                  "lastClassName": "eFVgFL",
                                  "rules": Array [
                                    "
  border: 1px solid
    ",
                                    [Function],
                                    ";
  font-size: 1rem;
  padding: 0.5rem;
  width: 100%;
  background-color: ",
                                    [Function],
                                    ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                    ".sc-VigVT",
                                    " {
    margin: 0;
  }

  ",
                                    ".sc-jTzLTM",
                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "Styled(styled.header)",
                                "foldedComponentIds": Array [
                                  "sc-ckVGcZ",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-iQKALj",
                                "target": "header",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <header
                              className="sc-ckVGcZ sc-iQKALj eFVgFL"
                            >
                              <styled.span>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-dxgOiQ",
                                        "isStatic": false,
                                        "lastClassName": "fMWTVD",
                                        "rules": Array [
                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                        ],
                                      },
                                      "displayName": "styled.span",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-dxgOiQ",
                                      "target": "span",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <span
                                    className="sc-dxgOiQ fMWTVD"
                                  >
                                    Layout
                                  </span>
                                </StyledComponent>
                              </styled.span>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jzJRlG",
                                        "isStatic": false,
                                        "lastClassName": "fswDQX",
                                        "rules": Array [
                                          "
  display: flex;
  align-items: center;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jzJRlG",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jzJRlG fswDQX"
                                  >
                                    <Styled(styled.button)
                                      data-testhook-id="show-layout-json"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="show-layout-json"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="show-layout-json"
                                          onClick={[Function]}
                                        >
                                          <JsonIcon
                                            color="#1779ba"
                                            size={26}
                                          >
                                            <svg
                                              height={26}
                                              version="1.1"
                                              viewBox="0 0 8.4667 8.4667"
                                              width={26}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <g
                                                aria-label="{;}"
                                              >
                                                <path
                                                  d="m7.2453 2.9003h-0.12058q-0.30317 0-0.43925 0.12058-0.13608 0.11886-0.13608 0.42547v0.25321q0 0.32728-0.19982 0.49609-0.19809 0.17053-0.53227 0.17053h-0.47198v-0.38585h0.19637q0.10335 0 0.18603-0.015503 0.084405-0.015503 0.14125-0.058566 0.058566-0.044786 0.08785-0.13091 0.029283-0.084405 0.029283-0.21876v-0.18776q0-0.24116 0.13436-0.40308 0.13608-0.16192 0.38585-0.25666v-0.041341q-0.24977-0.09474-0.38585-0.25666-0.13436-0.16192-0.13436-0.40308v-0.18776q0-0.13436-0.029283-0.21876-0.029284-0.086127-0.08785-0.13091-0.056844-0.043064-0.14125-0.058566-0.082682-0.015503-0.18603-0.015503h-0.19637v-0.38585h0.47198q0.33417 0 0.53227 0.17053 0.19982 0.16881 0.19982 0.49609v0.25321q0 0.30661 0.13608 0.42719 0.13608 0.11886 0.43925 0.11886h0.12058zm-2.6338-0.46681h-0.64423v-0.67696h0.64423zm0.10508 0.5805-0.62012 1.3143h-0.38413l0.33934-1.3143zm-1.4831 1.3522h-0.47198q-0.33417 0-0.53399-0.17053-0.19809-0.16881-0.19809-0.49609v-0.25321q0-0.30661-0.13608-0.42547-0.13608-0.12058-0.43925-0.12058h-0.12058v-0.42375h0.12058q0.30317 0 0.43925-0.11886 0.13608-0.12058 0.13608-0.42719v-0.25321q0-0.32728 0.19809-0.49609 0.19982-0.17053 0.53399-0.17053h0.47198v0.38585h-0.19637q-0.10335 0-0.18776 0.015503-0.082682 0.015503-0.13953 0.058566-0.058566 0.044786-0.08785 0.13091-0.029283 0.084405-0.029283 0.21876v0.18776q0 0.24116-0.13608 0.40308-0.13436 0.16192-0.38413 0.25666v0.041341q0.24977 0.09474 0.38413 0.25666 0.13608 0.16192 0.13608 0.40308v0.18776q0 0.13436 0.029283 0.21876 0.029283 0.086127 0.08785 0.13091 0.055121 0.044786 0.13953 0.058566 0.084405 0.015503 0.18776 0.015503h0.19637z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <g
                                                aria-label="JSON"
                                                transform="scale(1.0126 .98752)"
                                              >
                                                <path
                                                  d="m7.6325 7.8697h-0.44741l-0.76423-1.2358v1.2358h-0.42564v-1.8005h0.55503l0.65661 1.0315v-1.0315h0.42564zm-1.9904-0.89966q0 0.43048-0.24668 0.68442-0.24668 0.25273-0.682 0.25273-0.43411 0-0.68079-0.25273-0.24668-0.25394-0.24668-0.68442 0-0.43411 0.24668-0.68563 0.24668-0.25273 0.68079-0.25273 0.4329 0 0.68079 0.25273 0.24789 0.25152 0.24789 0.68563zm-0.61549 0.45588q0.067716-0.082227 0.10037-0.19348 0.032649-0.11246 0.032649-0.26361 0-0.16204-0.037486-0.2757t-0.097947-0.1838q-0.06167-0.072553-0.14269-0.1052-0.079808-0.032649-0.16687-0.032649-0.088273 0-0.16687 0.03144-0.07739 0.03144-0.14269 0.10399-0.060461 0.067716-0.099156 0.18743-0.037486 0.1185-0.037486 0.2757 0 0.16083 0.036277 0.27449 0.037486 0.11246 0.097947 0.1838 0.060461 0.071344 0.14148 0.1052 0.081018 0.033858 0.1705 0.033858 0.089482 0 0.1705-0.033858 0.081018-0.035067 0.14148-0.10762zm-1.4547-0.12213q0 0.26603-0.22612 0.4329-0.22491 0.16566-0.61186 0.16566-0.22371 0-0.39058-0.038695-0.16566-0.039904-0.31077-0.10037v-0.43169h0.050787q0.1439 0.11488 0.32165 0.17655 0.17896 0.06167 0.34342 0.06167 0.042323 0 0.11125-0.00726 0.068926-0.00726 0.11246-0.024184 0.053206-0.021766 0.087064-0.054415 0.035067-0.032649 0.035067-0.096737 0-0.059252-0.050787-0.10157-0.049578-0.043528-0.14632-0.066503-0.10157-0.024184-0.21524-0.044741-0.11246-0.021766-0.21161-0.054415-0.22733-0.073762-0.3277-0.19952-0.099156-0.12697-0.099156-0.3144 0-0.25152 0.22491-0.40993 0.22612-0.15962 0.58042-0.15962 0.17776 0 0.35067 0.035067 0.17413 0.033858 0.3011 0.085854v0.41476h-0.049578q-0.10883-0.087063-0.26724-0.14511-0.1572-0.059252-0.32165-0.059252-0.058042 0-0.11608 0.00846-0.056833 0.00726-0.11004 0.029021-0.047159 0.018138-0.081018 0.055624-0.033858 0.036277-0.033858 0.083436 0 0.071344 0.054415 0.11004 0.054415 0.037486 0.20557 0.068925 0.099156 0.020557 0.18985 0.039904 0.091901 0.019347 0.1971 0.053206 0.20678 0.067716 0.30472 0.18501 0.099156 0.11608 0.099156 0.3023zm-1.8767 0.037486q0 0.1185-0.042323 0.2225-0.042323 0.10278-0.12576 0.17413-0.088273 0.076181-0.21282 0.1185-0.12455 0.041114-0.30835 0.041114-0.12455 0-0.23459-0.00967-0.11004-0.00846-0.19348-0.025394v-0.36519h0.043532q0.058042 0.021766 0.12092 0.041113 0.062879 0.018138 0.16083 0.018138 0.12697 0 0.19468-0.033858 0.068925-0.033858 0.097947-0.094319 0.027812-0.059252 0.03144-0.12939 0.00363-0.071344 0.00363-0.18138v-0.71707h-0.41235v-0.33133h0.87668z"
                                                  fill="#1779ba"
                                                />
                                              </g>
                                              <path
                                                d="m0.12976 0.12976h8.2072v8.2072h-8.2072zm-0.12955 5.2942 8.4663 0.013173"
                                                fill="none"
                                                stroke="#1779ba"
                                                strokeWidth=".8"
                                              />
                                            </svg>
                                          </JsonIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                    <Styled(styled.button)
                                      data-testhook-id="edit-layout"
                                      onClick={[Function]}
                                    >
                                      <StyledComponent
                                        data-testhook-id="edit-layout"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-hrWEMg",
                                              "isStatic": false,
                                              "lastClassName": "jlNwFI",
                                              "rules": Array [
                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    svg {
      cursor: pointer;
      transform: scale(0.8);
    }
  }
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.button)",
                                            "foldedComponentIds": Array [
                                              "sc-cSHVUG",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-hrWEMg",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="sc-cSHVUG sc-hrWEMg jlNwFI"
                                          data-testhook-id="edit-layout"
                                          onClick={[Function]}
                                        >
                                          <EditIcon
                                            color="#1779ba"
                                            size={31}
                                          >
                                            <svg
                                              height={31}
                                              version="1.1"
                                              viewBox="0 0 24 24"
                                              width={31}
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                fill="#1779ba"
                                              />
                                            </svg>
                                          </EditIcon>
                                        </button>
                                      </StyledComponent>
                                    </Styled(styled.button)>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </header>
                          </StyledComponent>
                        </Styled(styled.header)>
                      </section>
                    </StyledComponent>
                  </styled.section>
                </Layout>
                <LayoutJsonEditor>
                  <Styled(styled.div)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jDwBTQ",
                            "isStatic": false,
                            "lastClassName": "jBdFgw",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
",
                              "
  display: flex;
  flex-direction: column;
  width: 100%;

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "Styled(styled.div)",
                          "foldedComponentIds": Array [
                            "sc-bwzfXH",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jDwBTQ",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bwzfXH sc-jDwBTQ jBdFgw"
                      >
                        <form
                          data-testhook-id="layout-json-form"
                          onBlur={[Function]}
                          onSubmit={[Function]}
                        >
                          <FormInput
                            dataTesthookId="layout-json-form-field-0"
                            disabled={false}
                            formType="textArea"
                            height="25rem"
                            innerRef={
                              Object {
                                "current": <textarea
                                  class="sc-hMqMXs bTRjzC"
                                  data-testhook-id="layout-json-form-field-0"
                                  height="25rem"
                                  name="layout"
                                >
                                  {"keys":[],"authorizedKeyIds":[],"expectedEndProducts":[],"layoutSegments":[]}
                                </textarea>,
                              }
                            }
                            labelValue="Layout*"
                            name="layout"
                            onBlur={[Function]}
                            onChange={[Function]}
                            value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kEYyzF",
                                      "isStatic": false,
                                      "lastClassName": "koCczG",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kEYyzF",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-kEYyzF koCczG"
                                >
                                  <styled.label>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-jKJlTe",
                                            "isStatic": false,
                                            "lastClassName": "jKKzGO",
                                            "rules": Array [
                                              "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: ",
                                              [Function],
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-jKJlTe",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="sc-jKJlTe jKKzGO"
                                      >
                                        Layout*
                                      </label>
                                    </StyledComponent>
                                  </styled.label>
                                  <styled.textarea
                                    data-testhook-id="layout-json-form-field-0"
                                    disabled={false}
                                    height="25rem"
                                    name="layout"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                  >
                                    <StyledComponent
                                      data-testhook-id="layout-json-form-field-0"
                                      disabled={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hMqMXs",
                                            "isStatic": false,
                                            "lastClassName": "bTRjzC",
                                            "rules": Array [
                                              "
  ",
                                              "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                              [Function],
                                              ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid ",
                                              [Function],
                                              ";
  border-radius: 0;
  background-color: ",
                                              [Function],
                                              ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: ",
                                              [Function],
                                              ";
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                              [Function],
                                              ";
  }

  &:focus {
    outline: none;
    border: 1px solid ",
                                              [Function],
                                              ";
    box-shadow: 0 0 5px ",
                                              [Function],
                                              ";
  }
",
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.textarea",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-hMqMXs",
                                          "target": "textarea",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={
                                        Object {
                                          "current": <textarea
                                            class="sc-hMqMXs bTRjzC"
                                            data-testhook-id="layout-json-form-field-0"
                                            height="25rem"
                                            name="layout"
                                          >
                                            {"keys":[],"authorizedKeyIds":[],"expectedEndProducts":[],"layoutSegments":[]}
                                          </textarea>,
                                        }
                                      }
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                    >
                                      <textarea
                                        className="sc-hMqMXs bTRjzC"
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                      />
                                    </StyledComponent>
                                  </styled.textarea>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </FormInput>
                        </form>
                      </div>
                    </StyledComponent>
                  </Styled(styled.div)>
                </LayoutJsonEditor>
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-fMiknA",
                              "isStatic": false,
                              "lastClassName": "djoooY",
                              "rules": Array [
                                "
  margin: 2rem 0;
  display: flex;
  align-items: center;
  width: 100%;
  flex-direction: column;
  padding: 0 1rem 1rem;
  border: 1px solid ",
                                [Function],
                                ";

  background: ",
                                [Function],
                                ";

  li ~ li {
    margin-top: 1rem;
  }

  li ~ section {
    margin-top: 1rem;
  }
",
                                "
  margin: 1rem 0 0.5rem;
  min-height: 18.8rem;
  padding: 0 1rem;
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-fjdhpX",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-fMiknA",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-fjdhpX sc-fMiknA djoooY"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-chPdSV",
                                    "isStatic": false,
                                    "lastClassName": "bBFivD",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-chPdSV",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-chPdSV bBFivD"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-dVhcbM",
                                          "isStatic": false,
                                          "lastClassName": "fScVQR",
                                          "rules": Array [
                                            "
  position: relative;
  display: inline-flex;
  font-size: 0.9rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-kgoBCf",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-dVhcbM",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-kgoBCf sc-dVhcbM fScVQR"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eqIVtm",
                                          "isStatic": false,
                                          "lastClassName": "emMCro",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  border: 0;
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }

  ",
                                            [Function],
                                            "
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-kAzzGY",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-eqIVtm",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-kAzzGY sc-eqIVtm emMCro"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kpOJdX",
                                    "isStatic": false,
                                    "lastClassName": "idQdSz",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kpOJdX",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kpOJdX idQdSz"
                              />
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-eTuwsz",
                          "isStatic": false,
                          "lastClassName": "cdixMS",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-bdVaJa",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-eTuwsz",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-bdVaJa sc-eTuwsz cdixMS"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <JsonSignAndSubmit>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kkGfuU",
                            "isStatic": false,
                            "lastClassName": "hWfVhn",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kkGfuU",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kkGfuU hWfVhn"
                      >
                        <LoaderButton
                          buttonType="button"
                          dataTesthookId="layout-json-form-submit-button"
                          loading={false}
                          onClick={[Function]}
                        >
                          <styled.button
                            data-testhook-id="layout-json-form-submit-button"
                            onClick={[Function]}
                            type="button"
                          >
                            <StyledComponent
                              data-testhook-id="layout-json-form-submit-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iAyFgw",
                                    "isStatic": false,
                                    "lastClassName": "kuBZXY",
                                    "rules": Array [
                                      "
  ",
                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: pointer;
  }
",
                                      "

  background-color: ",
                                      [Function],
                                      ";

  &:hover {
    background-color: ",
                                      [Function],
                                      ";
    cursor: ",
                                      [Function],
                                      "
  }
",
                                    ],
                                  },
                                  "displayName": "styled.button",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-iAyFgw",
                                  "target": "button",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="sc-iAyFgw kuBZXY"
                                data-testhook-id="layout-json-form-submit-button"
                                onClick={[Function]}
                                type="button"
                              >
                                Sign and Submit
                              </button>
                            </StyledComponent>
                          </styled.button>
                        </LoaderButton>
                        <Styled(Styled(styled.button))
                          data-testhook="cancel-button"
                          onMouseDown={[Function]}
                          type="button"
                        >
                          <StyledComponent
                            data-testhook="cancel-button"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jqCOkK",
                                  "isStatic": false,
                                  "lastClassName": "jrhpuB",
                                  "rules": Array [
                                    "
  ",
                                    "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "

  background-color: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    cursor: ",
                                    [Function],
                                    "
  }
",
                                    "
  background-color: ",
                                    [Function],
                                    ";
  color: ",
                                    [Function],
                                    ";
  border: ",
                                    [Function],
                                    ";

  &:hover {
    background-color: ",
                                    [Function],
                                    ";
    color: ",
                                    [Function],
                                    ";
    border: 1px solid ",
                                    [Function],
                                    ";
    cursor: pointer;
  }
",
                                    "
  margin-left: 1rem;
",
                                  ],
                                },
                                "displayName": "Styled(Styled(styled.button))",
                                "foldedComponentIds": Array [
                                  "sc-iAyFgw",
                                  "sc-cvbbAY",
                                ],
                                "render": [Function],
                                "styledComponentId": "sc-jqCOkK",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onMouseDown={[Function]}
                            type="button"
                          >
                            <button
                              className="sc-iAyFgw sc-cvbbAY sc-jqCOkK jrhpuB"
                              data-testhook="cancel-button"
                              onMouseDown={[Function]}
                              type="button"
                            >
                              Cancel
                            </button>
                          </StyledComponent>
                        </Styled(Styled(styled.button))>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </JsonSignAndSubmit>
                <LayoutSigner>
                  <PassphraseDialogBox
                    onCancel={[Function]}
                    onConfirm={[Function]}
                    passphrase=""
                    showCryptoExceptionMessage={false}
                    showDialog={false}
                    showInvalidPassphraseMessage={false}
                  />
                </LayoutSigner>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title="Validation errors"
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gzVnrw",
                "isStatic": false,
                "lastClassName": "cxdaOh",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gzVnrw",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-gzVnrw cxdaOh"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "isiUEp",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: ",
                        [Function],
                        ";
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-dnqmqq isiUEp"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iwsKbI",
                            "isStatic": false,
                            "lastClassName": "jYrlHi",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iwsKbI",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-iwsKbI jYrlHi"
                      >
                        Validation errors
                      </p>
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "jFZBXo",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-htoDjs jFZBXo"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-kIPQKe",
                            "isStatic": false,
                            "lastClassName": "jgMiIX",
                            "rules": Array [],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-kIPQKe",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-kIPQKe jgMiIX"
                      >
                        <NotificationsList
                          notifications={
                            Array [
                              Object {
                                "body": "authorizedKeyIds size must be between 1 and 2147483647",
                                "type": "ERROR",
                              },
                              Object {
                                "body": "expectedEndProducts size must be between 1 and 2147483647",
                                "type": "ERROR",
                              },
                              Object {
                                "body": "keys size must be between 1 and 2147483647",
                                "type": "ERROR",
                              },
                              Object {
                                "body": "layoutSegments size must be between 1 and 2147483647",
                                "type": "ERROR",
                              },
                            ]
                          }
                        >
                          <ul>
                            <li
                              key="0"
                            >
                              <Notification
                                notification="authorizedKeyIds size must be between 1 and 2147483647"
                                type="ERROR"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-TOsTZ",
                                          "isStatic": false,
                                          "lastClassName": "hxTqzy",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-TOsTZ",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-TOsTZ hxTqzy"
                                    >
                                      <styled.div
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cJSrbW",
                                                "isStatic": false,
                                                "lastClassName": "kXsecz",
                                                "rules": Array [
                                                  "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-cJSrbW",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-cJSrbW kXsecz"
                                            color="red"
                                          >
                                            <WarningIcon
                                              color="#fff"
                                              size={22}
                                            >
                                              <svg
                                                height={22}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={22}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  warning
                                                </title>
                                                <path
                                                  d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                                  fill="#fff"
                                                />
                                              </svg>
                                            </WarningIcon>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.p
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kgAjT",
                                                "isStatic": false,
                                                "lastClassName": "fAuMaC",
                                                "rules": Array [
                                                  "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  color: ",
                                                  [Function],
                                                  ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                                ],
                                              },
                                              "displayName": "styled.p",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kgAjT",
                                              "target": "p",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <p
                                            className="sc-kgAjT fAuMaC"
                                            color="red"
                                          >
                                            <styled.span
                                              color="red"
                                            >
                                              <StyledComponent
                                                color="red"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ksYbfQ",
                                                      "isStatic": false,
                                                      "lastClassName": "gmMwvd",
                                                      "rules": Array [
                                                        "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                        [Function],
                                                        ";
  padding-right: 0.5rem;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.span",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ksYbfQ",
                                                    "target": "span",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <span
                                                  className="sc-ksYbfQ gmMwvd"
                                                  color="red"
                                                />
                                              </StyledComponent>
                                            </styled.span>
                                            authorizedKeyIds size must be between 1 and 2147483647
                                          </p>
                                        </StyledComponent>
                                      </styled.p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Notification>
                            </li>
                            <li
                              key="1"
                            >
                              <Notification
                                notification="expectedEndProducts size must be between 1 and 2147483647"
                                type="ERROR"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-TOsTZ",
                                          "isStatic": false,
                                          "lastClassName": "hxTqzy",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-TOsTZ",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-TOsTZ hxTqzy"
                                    >
                                      <styled.div
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cJSrbW",
                                                "isStatic": false,
                                                "lastClassName": "kXsecz",
                                                "rules": Array [
                                                  "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-cJSrbW",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-cJSrbW kXsecz"
                                            color="red"
                                          >
                                            <WarningIcon
                                              color="#fff"
                                              size={22}
                                            >
                                              <svg
                                                height={22}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={22}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  warning
                                                </title>
                                                <path
                                                  d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                                  fill="#fff"
                                                />
                                              </svg>
                                            </WarningIcon>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.p
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kgAjT",
                                                "isStatic": false,
                                                "lastClassName": "fAuMaC",
                                                "rules": Array [
                                                  "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  color: ",
                                                  [Function],
                                                  ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                                ],
                                              },
                                              "displayName": "styled.p",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kgAjT",
                                              "target": "p",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <p
                                            className="sc-kgAjT fAuMaC"
                                            color="red"
                                          >
                                            <styled.span
                                              color="red"
                                            >
                                              <StyledComponent
                                                color="red"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ksYbfQ",
                                                      "isStatic": false,
                                                      "lastClassName": "gmMwvd",
                                                      "rules": Array [
                                                        "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                        [Function],
                                                        ";
  padding-right: 0.5rem;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.span",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ksYbfQ",
                                                    "target": "span",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <span
                                                  className="sc-ksYbfQ gmMwvd"
                                                  color="red"
                                                />
                                              </StyledComponent>
                                            </styled.span>
                                            expectedEndProducts size must be between 1 and 2147483647
                                          </p>
                                        </StyledComponent>
                                      </styled.p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Notification>
                            </li>
                            <li
                              key="2"
                            >
                              <Notification
                                notification="keys size must be between 1 and 2147483647"
                                type="ERROR"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-TOsTZ",
                                          "isStatic": false,
                                          "lastClassName": "hxTqzy",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-TOsTZ",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-TOsTZ hxTqzy"
                                    >
                                      <styled.div
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cJSrbW",
                                                "isStatic": false,
                                                "lastClassName": "kXsecz",
                                                "rules": Array [
                                                  "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-cJSrbW",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-cJSrbW kXsecz"
                                            color="red"
                                          >
                                            <WarningIcon
                                              color="#fff"
                                              size={22}
                                            >
                                              <svg
                                                height={22}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={22}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  warning
                                                </title>
                                                <path
                                                  d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                                  fill="#fff"
                                                />
                                              </svg>
                                            </WarningIcon>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.p
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kgAjT",
                                                "isStatic": false,
                                                "lastClassName": "fAuMaC",
                                                "rules": Array [
                                                  "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  color: ",
                                                  [Function],
                                                  ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                                ],
                                              },
                                              "displayName": "styled.p",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kgAjT",
                                              "target": "p",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <p
                                            className="sc-kgAjT fAuMaC"
                                            color="red"
                                          >
                                            <styled.span
                                              color="red"
                                            >
                                              <StyledComponent
                                                color="red"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ksYbfQ",
                                                      "isStatic": false,
                                                      "lastClassName": "gmMwvd",
                                                      "rules": Array [
                                                        "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                        [Function],
                                                        ";
  padding-right: 0.5rem;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.span",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ksYbfQ",
                                                    "target": "span",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <span
                                                  className="sc-ksYbfQ gmMwvd"
                                                  color="red"
                                                />
                                              </StyledComponent>
                                            </styled.span>
                                            keys size must be between 1 and 2147483647
                                          </p>
                                        </StyledComponent>
                                      </styled.p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Notification>
                            </li>
                            <li
                              key="3"
                            >
                              <Notification
                                notification="layoutSegments size must be between 1 and 2147483647"
                                type="ERROR"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-TOsTZ",
                                          "isStatic": false,
                                          "lastClassName": "hxTqzy",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-TOsTZ",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-TOsTZ hxTqzy"
                                    >
                                      <styled.div
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-cJSrbW",
                                                "isStatic": false,
                                                "lastClassName": "kXsecz",
                                                "rules": Array [
                                                  "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.div",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-cJSrbW",
                                              "target": "div",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <div
                                            className="sc-cJSrbW kXsecz"
                                            color="red"
                                          >
                                            <WarningIcon
                                              color="#fff"
                                              size={22}
                                            >
                                              <svg
                                                height={22}
                                                version="1.1"
                                                viewBox="0 0 32 32"
                                                width={22}
                                                xmlns="http://www.w3.org/2000/svg"
                                              >
                                                <title>
                                                  warning
                                                </title>
                                                <path
                                                  d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                                  fill="#fff"
                                                />
                                                 
                                                <path
                                                  d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                                  fill="#fff"
                                                />
                                              </svg>
                                            </WarningIcon>
                                          </div>
                                        </StyledComponent>
                                      </styled.div>
                                      <styled.p
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kgAjT",
                                                "isStatic": false,
                                                "lastClassName": "fAuMaC",
                                                "rules": Array [
                                                  "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                                  [Function],
                                                  ";
  color: ",
                                                  [Function],
                                                  ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                                ],
                                              },
                                              "displayName": "styled.p",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kgAjT",
                                              "target": "p",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <p
                                            className="sc-kgAjT fAuMaC"
                                            color="red"
                                          >
                                            <styled.span
                                              color="red"
                                            >
                                              <StyledComponent
                                                color="red"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-ksYbfQ",
                                                      "isStatic": false,
                                                      "lastClassName": "gmMwvd",
                                                      "rules": Array [
                                                        "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                        [Function],
                                                        ";
  padding-right: 0.5rem;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.span",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-ksYbfQ",
                                                    "target": "span",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <span
                                                  className="sc-ksYbfQ gmMwvd"
                                                  color="red"
                                                />
                                              </StyledComponent>
                                            </styled.span>
                                            layoutSegments size must be between 1 and 2147483647
                                          </p>
                                        </StyledComponent>
                                      </styled.p>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </Notification>
                            </li>
                          </ul>
                        </NotificationsList>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;
