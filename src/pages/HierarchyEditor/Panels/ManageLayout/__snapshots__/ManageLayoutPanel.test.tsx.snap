// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly with existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bZQynM",
              "isStatic": false,
              "lastClassName": "lmUvuu",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bZQynM",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-bZQynM lmUvuu"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "fzDpZl",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-htoDjs evxVNm"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "jLpowZ",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-dnqmqq jLpowZ"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jvDcdF",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-iwsKbI jvDcdF"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "gKvjmP",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-gzVnrw kUmRrv"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-Rmtcm",
                              "isStatic": false,
                              "lastClassName": "YiEyn",
                              "rules": Array [
                                "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                "
  flex-direction: column;
  border: 0;
  padding: 0 1rem;
  border: 1px solid
    ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-jTzLTM",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-Rmtcm",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-jTzLTM sc-Rmtcm YiEyn"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kAzzGY",
                                    "isStatic": false,
                                    "lastClassName": "crApAj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kAzzGY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-kAzzGY crApAj"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bRBYWo",
                                          "isStatic": false,
                                          "lastClassName": "dyXggM",
                                          "rules": Array [
                                            "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                            "
  font-size: 1rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-chPdSV",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-bRBYWo",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-chPdSV sc-bRBYWo dyXggM"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-hzDkRC",
                                          "isStatic": false,
                                          "lastClassName": "bJmeCP",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                            "
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-cSHVUG",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-hzDkRC",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG sc-hzDkRC bJmeCP"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kgoBCf",
                                    "isStatic": false,
                                    "lastClassName": "HSZXE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kgoBCf",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kgoBCf HSZXE"
                              >
                                <Segment
                                  index={0}
                                  key="jenkins"
                                  segment={
                                    Object {
                                      "name": "jenkins",
                                      "steps": Array [
                                        Object {
                                          "name": "approve",
                                        },
                                      ],
                                    }
                                  }
                                >
                                  <styled.li>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-csuQGl",
                                            "isStatic": false,
                                            "lastClassName": "mjYdL",
                                            "rules": Array [
                                              "
  width: 100%;
  margin: 0 0 1rem;
",
                                            ],
                                          },
                                          "displayName": "styled.li",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-csuQGl",
                                          "target": "li",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <li
                                        className="sc-csuQGl mjYdL"
                                      >
                                        <styled.header
                                          data-testhook-id="segment0-edit"
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            data-testhook-id="segment0-edit"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-jlyJG",
                                                  "isStatic": false,
                                                  "lastClassName": "bqNltO",
                                                  "rules": Array [
                                                    "
  border: 1px solid transparent;
  box-sizing: border-box;
  padding: 0.5rem;
  width: 100%;
  margin: 0.2rem 0 0;
  background-color: ",
                                                    [Function],
                                                    ";

  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                    ".sc-VigVT",
                                                    " {
    margin: 0;
  }

  ",
                                                    ".sc-gqjmRU",
                                                    " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    cursor: pointer;
    border: 1px solid
      ",
                                                    [Function],
                                                    ";
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.header",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-jlyJG",
                                                "target": "header",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <header
                                              className="sc-jlyJG bqNltO"
                                              data-testhook-id="segment0-edit"
                                              onClick={[Function]}
                                            >
                                              <styled.span>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-kGXeez",
                                                        "isStatic": false,
                                                        "lastClassName": "NdeQu",
                                                        "rules": Array [
                                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.span",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-kGXeez",
                                                      "target": "span",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <span
                                                    className="sc-kGXeez NdeQu"
                                                  >
                                                    jenkins
                                                  </span>
                                                </StyledComponent>
                                              </styled.span>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-fjdhpX",
                                                        "isStatic": false,
                                                        "lastClassName": "jJAgek",
                                                        "rules": Array [
                                                          "
  display: flex;
  align-items: center;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-fjdhpX",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-fjdhpX jJAgek"
                                                  >
                                                    <Styled(styled.button)
                                                      data-testhook-id="segment0-delete"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="segment0-delete"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gipzik",
                                                              "isStatic": false,
                                                              "lastClassName": "hUPiAy",
                                                              "rules": Array [
                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-jzJRlG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gipzik",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-jzJRlG sc-gipzik hUPiAy"
                                                          data-testhook-id="segment0-delete"
                                                          onClick={[Function]}
                                                        >
                                                          <RemoveIcon
                                                            color="#1779ba"
                                                            size={24}
                                                          >
                                                            <svg
                                                              height={24}
                                                              version="1.1"
                                                              viewBox="0 0 32 32"
                                                              width={24}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <title>
                                                                trash
                                                              </title>
                                                              <path
                                                                d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </RemoveIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </header>
                                          </StyledComponent>
                                        </styled.header>
                                      </li>
                                    </StyledComponent>
                                  </styled.li>
                                  <StepsContainer
                                    index={0}
                                    segment={
                                      Object {
                                        "name": "jenkins",
                                        "steps": Array [
                                          Object {
                                            "name": "approve",
                                          },
                                        ],
                                      }
                                    }
                                  >
                                    <ul>
                                      <Styled(styled.section)>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-jDwBTQ",
                                                "isStatic": false,
                                                "lastClassName": "iZURLY",
                                                "rules": Array [
                                                  "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                                  "
  flex-direction: column;
  padding: 0 1rem 1rem;
  margin: 1rem 0;
  min-height: 10rem;
  background-color: ",
                                                  [Function],
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "Styled(styled.section)",
                                              "foldedComponentIds": Array [
                                                "sc-jTzLTM",
                                              ],
                                              "render": [Function],
                                              "styledComponentId": "sc-jDwBTQ",
                                              "target": "section",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <section
                                            className="sc-jTzLTM sc-jDwBTQ iZURLY"
                                          >
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-kAzzGY",
                                                      "isStatic": false,
                                                      "lastClassName": "crApAj",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-kAzzGY",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-kAzzGY crApAj"
                                                >
                                                  <Styled(styled.header)>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-gPEVay",
                                                            "isStatic": false,
                                                            "lastClassName": "kxjIwe",
                                                            "rules": Array [
                                                              "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                                              "
  top: -1rem;
  margin: 0 auto;
  padding: 0.25rem 1rem;
  border: 1px solid
    ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.header)",
                                                          "foldedComponentIds": Array [
                                                            "sc-chPdSV",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-gPEVay",
                                                          "target": "header",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <header
                                                        className="sc-chPdSV sc-gPEVay kxjIwe"
                                                      >
                                                        Steps
                                                      </header>
                                                    </StyledComponent>
                                                  </Styled(styled.header)>
                                                  <Styled(styled.button)
                                                    data-testhook-id="segment0-add-step"
                                                    onClick={[Function]}
                                                  >
                                                    <StyledComponent
                                                      data-testhook-id="segment0-add-step"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-iRbamj",
                                                            "isStatic": false,
                                                            "lastClassName": "eoEveZ",
                                                            "rules": Array [
                                                              "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                                              "
  border: 1px solid
    ",
                                                              [Function],
                                                              ";
  padding: 0 0.65rem;

  &:hover {
    cursor: pointer;
    transform: scale(0.9);
  }
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.button)",
                                                          "foldedComponentIds": Array [
                                                            "sc-cSHVUG",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-iRbamj",
                                                          "target": "button",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onClick={[Function]}
                                                    >
                                                      <button
                                                        className="sc-cSHVUG sc-iRbamj eoEveZ"
                                                        data-testhook-id="segment0-add-step"
                                                        onClick={[Function]}
                                                      >
                                                        <PlusIcon
                                                          color="#1779ba"
                                                          size={20}
                                                        >
                                                          <svg
                                                            height={20}
                                                            version="1.1"
                                                            viewBox="0 0 32 32"
                                                            width={20}
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <title>
                                                              plus
                                                            </title>
                                                            <path
                                                              d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                              fill="#1779ba"
                                                            />
                                                          </svg>
                                                        </PlusIcon>
                                                      </button>
                                                    </StyledComponent>
                                                  </Styled(styled.button)>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <Step
                                              index={0}
                                              key="stepContainer0"
                                              segment={
                                                Object {
                                                  "name": "jenkins",
                                                  "steps": Array [
                                                    Object {
                                                      "name": "approve",
                                                    },
                                                  ],
                                                }
                                              }
                                              step={
                                                Object {
                                                  "name": "approve",
                                                }
                                              }
                                            >
                                              <styled.section
                                                data-testhook-id="jenkins-0-edit-step"
                                                onClick={[Function]}
                                              >
                                                <StyledComponent
                                                  data-testhook-id="jenkins-0-edit-step"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-brqgnP",
                                                        "isStatic": false,
                                                        "lastClassName": "kLOaaF",
                                                        "rules": Array [
                                                          "
  width: 100%;
  margin: 0 0 1rem;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.section",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-brqgnP",
                                                      "target": "section",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  onClick={[Function]}
                                                >
                                                  <section
                                                    className="sc-brqgnP kLOaaF"
                                                    data-testhook-id="jenkins-0-edit-step"
                                                    onClick={[Function]}
                                                  >
                                                    <styled.header
                                                      active={true}
                                                    >
                                                      <StyledComponent
                                                        active={true}
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-jWBwVP",
                                                              "isStatic": false,
                                                              "lastClassName": "fYAbyO",
                                                              "rules": Array [
                                                                "
  border: 1px solid
    ",
                                                                [Function],
                                                                ";
  font-size: 0.9rem;
  padding: 0.5rem;
  width: 100%;
  margin: 0.5rem 0 0;
  background-color: ",
                                                                [Function],
                                                                ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                                ".sc-VigVT",
                                                                " {
    margin: 0;
  }

  ",
                                                                ".sc-gqjmRU",
                                                                " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    cursor: pointer;
    border: 1px solid
      ",
                                                                [Function],
                                                                ";
  }
",
                                                              ],
                                                            },
                                                            "displayName": "styled.header",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-jWBwVP",
                                                            "target": "header",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <header
                                                          className="sc-jWBwVP fYAbyO"
                                                        >
                                                          <styled.span>
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-kGXeez",
                                                                    "isStatic": false,
                                                                    "lastClassName": "NdeQu",
                                                                    "rules": Array [
                                                                      "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.span",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-kGXeez",
                                                                  "target": "span",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                            >
                                                              <span
                                                                className="sc-kGXeez NdeQu"
                                                              >
                                                                approve
                                                              </span>
                                                            </StyledComponent>
                                                          </styled.span>
                                                          <styled.div>
                                                            <StyledComponent
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-fjdhpX",
                                                                    "isStatic": false,
                                                                    "lastClassName": "jJAgek",
                                                                    "rules": Array [
                                                                      "
  display: flex;
  align-items: center;
",
                                                                    ],
                                                                  },
                                                                  "displayName": "styled.div",
                                                                  "foldedComponentIds": Array [],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-fjdhpX",
                                                                  "target": "div",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                            >
                                                              <div
                                                                className="sc-fjdhpX jJAgek"
                                                              >
                                                                <Styled(styled.button)
                                                                  data-testhook-id="jenkins-0-select-step"
                                                                  onClick={[Function]}
                                                                >
                                                                  <StyledComponent
                                                                    data-testhook-id="jenkins-0-select-step"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-cMljjf",
                                                                          "isStatic": false,
                                                                          "lastClassName": "bolPsX",
                                                                          "rules": Array [
                                                                            "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                                          ],
                                                                        },
                                                                        "displayName": "Styled(styled.button)",
                                                                        "foldedComponentIds": Array [
                                                                          "sc-jzJRlG",
                                                                        ],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-cMljjf",
                                                                        "target": "button",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={null}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      className="sc-jzJRlG sc-cMljjf bolPsX"
                                                                      data-testhook-id="jenkins-0-select-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <EditIcon
                                                                        color="#1779ba"
                                                                        size={26}
                                                                      >
                                                                        <svg
                                                                          height={26}
                                                                          version="1.1"
                                                                          viewBox="0 0 24 24"
                                                                          width={26}
                                                                          xmlns="http://www.w3.org/2000/svg"
                                                                        >
                                                                          <path
                                                                            d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                            fill="#1779ba"
                                                                          />
                                                                        </svg>
                                                                      </EditIcon>
                                                                    </button>
                                                                  </StyledComponent>
                                                                </Styled(styled.button)>
                                                                <Styled(styled.button)
                                                                  data-testhook-id="jenkins-0-delete-step"
                                                                  onClick={[Function]}
                                                                >
                                                                  <StyledComponent
                                                                    data-testhook-id="jenkins-0-delete-step"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-jAaTju",
                                                                          "isStatic": false,
                                                                          "lastClassName": "kIQGJX",
                                                                          "rules": Array [
                                                                            "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                                          ],
                                                                        },
                                                                        "displayName": "Styled(styled.button)",
                                                                        "foldedComponentIds": Array [
                                                                          "sc-jzJRlG",
                                                                        ],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-jAaTju",
                                                                        "target": "button",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={null}
                                                                    onClick={[Function]}
                                                                  >
                                                                    <button
                                                                      className="sc-jzJRlG sc-jAaTju kIQGJX"
                                                                      data-testhook-id="jenkins-0-delete-step"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <RemoveIcon
                                                                        color="#1779ba"
                                                                        size={20}
                                                                      >
                                                                        <svg
                                                                          height={20}
                                                                          version="1.1"
                                                                          viewBox="0 0 32 32"
                                                                          width={20}
                                                                          xmlns="http://www.w3.org/2000/svg"
                                                                        >
                                                                          <title>
                                                                            trash
                                                                          </title>
                                                                          <path
                                                                            d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                            fill="#1779ba"
                                                                          />
                                                                        </svg>
                                                                      </RemoveIcon>
                                                                    </button>
                                                                  </StyledComponent>
                                                                </Styled(styled.button)>
                                                              </div>
                                                            </StyledComponent>
                                                          </styled.div>
                                                        </header>
                                                      </StyledComponent>
                                                    </styled.header>
                                                  </section>
                                                </StyledComponent>
                                              </styled.section>
                                            </Step>
                                          </section>
                                        </StyledComponent>
                                      </Styled(styled.section)>
                                    </ul>
                                  </StepsContainer>
                                </Segment>
                              </ul>
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iuJeZd",
                          "isStatic": false,
                          "lastClassName": "hJHFef",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-htpNat",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-iuJeZd",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat sc-iuJeZd hJHFef"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <LayoutJsonEditor>
                  <GenericForm
                    cancellationLabel="Cancel"
                    confirmationLabel="Sign and Submit"
                    dataTesthookId="layout-json-form"
                    initialValues={
                      Object {
                        "layout": "{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}",
                      }
                    }
                    isLoading={false}
                    onCancel={[Function]}
                    onSubmit={[Function]}
                    onValidChange={[Function]}
                    permission="EDIT"
                    schema={
                      Array [
                        Object {
                          "formType": "textArea",
                          "labelValue": "Layout*",
                          "name": "layout",
                        },
                      ]
                    }
                    validate={[Function]}
                  >
                    <Styled(styled.div)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "lastClassName": "emdpGB",
                              "rules": Array [
                                "
  display: flex;
  flex-direction: column;
",
                                "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                              ],
                            },
                            "displayName": "Styled(styled.div)",
                            "foldedComponentIds": Array [
                              "sc-iAyFgw",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-iAyFgw sc-cvbbAY emdpGB"
                        >
                          <form
                            data-testhook-id="layout-json-form"
                            onBlur={[Function]}
                            onSubmit={[Function]}
                          >
                            <FormInput
                              dataTesthookId="layout-json-form-field-0"
                              disabled={false}
                              formType="textArea"
                              height="25rem"
                              innerRef={
                                Object {
                                  "current": <textarea
                                    class="sc-ckVGcZ gmOKFw"
                                    data-testhook-id="layout-json-form-field-0"
                                    height="25rem"
                                    name="layout"
                                  >
                                    {
  "authorizedKeyIds": [],
  "expectedEndProducts": [],
  "keys": [],
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve"
        }
      ]
    }
  ]
}
                                  </textarea>,
                                }
                              }
                              labelValue="Layout*"
                              name="layout"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jKJlTe",
                                        "isStatic": false,
                                        "lastClassName": "cJqkLF",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jKJlTe",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jKJlTe cJqkLF"
                                  >
                                    <styled.label>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-kpOJdX",
                                              "isStatic": false,
                                              "lastClassName": "iYzRxv",
                                              "rules": Array [
                                                "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                              ],
                                            },
                                            "displayName": "styled.label",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-kpOJdX",
                                            "target": "label",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <label
                                          className="sc-kpOJdX iYzRxv"
                                        >
                                          Layout*
                                        </label>
                                      </StyledComponent>
                                    </styled.label>
                                    <styled.textarea
                                      data-testhook-id="layout-json-form-field-0"
                                      disabled={false}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                    >
                                      <StyledComponent
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ckVGcZ",
                                              "isStatic": false,
                                              "lastClassName": "gmOKFw",
                                              "rules": Array [
                                                "
  ",
                                                "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                [Function],
                                                ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                [Function],
                                                ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                [Function],
                                                ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.textarea",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ckVGcZ",
                                            "target": "textarea",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={
                                          Object {
                                            "current": <textarea
                                              class="sc-ckVGcZ gmOKFw"
                                              data-testhook-id="layout-json-form-field-0"
                                              height="25rem"
                                              name="layout"
                                            >
                                              {
  "authorizedKeyIds": [],
  "expectedEndProducts": [],
  "keys": [],
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve"
        }
      ]
    }
  ]
}
                                            </textarea>,
                                          }
                                        }
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                      >
                                        <textarea
                                          className="sc-ckVGcZ gmOKFw"
                                          data-testhook-id="layout-json-form-field-0"
                                          disabled={false}
                                          height="25rem"
                                          name="layout"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                        />
                                      </StyledComponent>
                                    </styled.textarea>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </FormInput>
                            <styled.hr>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": false,
                                      "lastClassName": "dfMPxs",
                                      "rules": Array [
                                        "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.hr",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "hr",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <hr
                                  className="sc-htpNat dfMPxs"
                                />
                              </StyledComponent>
                            </styled.hr>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-hSdWYo",
                                      "isStatic": false,
                                      "lastClassName": "bJSPUE",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-hSdWYo",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-hSdWYo bJSPUE"
                                >
                                  <LoaderButton
                                    buttonType="submit"
                                    loading={false}
                                  >
                                    <styled.button
                                      type="submit"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-eNQAEJ",
                                              "isStatic": false,
                                              "lastClassName": "geYAxA",
                                              "rules": Array [
                                                "
  ",
                                                "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                [Function],
                                                ";
  color: ",
                                                [Function],
                                                ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                [Function],
                                                ";
    cursor: pointer;
  }
",
                                                "
",
                                              ],
                                            },
                                            "displayName": "styled.button",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-eNQAEJ",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        type="submit"
                                      >
                                        <button
                                          className="sc-eNQAEJ geYAxA"
                                          type="submit"
                                        >
                                          Sign and Submit
                                        </button>
                                      </StyledComponent>
                                    </styled.button>
                                  </LoaderButton>
                                  <Styled(Styled(styled.button))
                                    data-testhook="cancel-button"
                                    onMouseDown={[Function]}
                                    type="button"
                                  >
                                    <StyledComponent
                                      data-testhook="cancel-button"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-eHgmQL",
                                            "isStatic": false,
                                            "lastClassName": "tTjA",
                                            "rules": Array [
                                              "
  ",
                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
",
                                              "
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  border: 1px solid ",
                                              [Function],
                                              ";

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    color: ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
  margin-left: 1rem;
",
                                            ],
                                          },
                                          "displayName": "Styled(Styled(styled.button))",
                                          "foldedComponentIds": Array [
                                            "sc-eNQAEJ",
                                            "sc-kkGfuU",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-eHgmQL",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onMouseDown={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="sc-eNQAEJ sc-kkGfuU sc-eHgmQL tTjA"
                                        data-testhook="cancel-button"
                                        onMouseDown={[Function]}
                                        type="button"
                                      >
                                        Cancel
                                      </button>
                                    </StyledComponent>
                                  </Styled(Styled(styled.button))>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </form>
                        </div>
                      </StyledComponent>
                    </Styled(styled.div)>
                  </GenericForm>
                </LayoutJsonEditor>
                <LayoutSigner />
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title="Edit step approve configuration"
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "lmUvuu",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-bZQynM lmUvuu"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "fzDpZl",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-htoDjs fzDpZl"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "jLpowZ",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-dnqmqq jLpowZ"
                      >
                        Edit step approve configuration
                      </p>
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": false,
                      "lastClassName": "gKvjmP",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-gzVnrw gKvjmP"
                >
                  <ApprovalConfigEditor>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-ksYbfQ",
                              "isStatic": false,
                              "lastClassName": "DFzZQ",
                              "rules": Array [
                                "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                "
  min-height: 0;
  flex-direction: column;
  border: 0;
  padding: 0 1rem 1rem;
  border: 1px solid
    ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-jTzLTM",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-ksYbfQ",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-jTzLTM sc-ksYbfQ DFzZQ"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kAzzGY",
                                    "isStatic": false,
                                    "lastClassName": "crApAj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kAzzGY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-kAzzGY crApAj"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-hmzhuo",
                                          "isStatic": false,
                                          "lastClassName": "iBDszQ",
                                          "rules": Array [
                                            "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                            "
  font-size: 0.85rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-chPdSV",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-hmzhuo",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-chPdSV sc-hmzhuo iBDszQ"
                                    >
                                      Approval collectors
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-collector"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-collector"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-frDJqD",
                                          "isStatic": false,
                                          "lastClassName": "iLonym",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                            "
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-cSHVUG",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-frDJqD",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG sc-frDJqD iLonym"
                                      data-testhook-id="add-collector"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kgoBCf",
                                    "isStatic": false,
                                    "lastClassName": "HSZXE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kgoBCf",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kgoBCf HSZXE"
                              >
                                <li
                                  key="collector-row-0"
                                >
                                  <styled.section>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hqyNC",
                                            "isStatic": false,
                                            "lastClassName": "kASDuq",
                                            "rules": Array [
                                              "
  width: 100%;
  margin: 0 0 1rem;
",
                                            ],
                                          },
                                          "displayName": "styled.section",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-hqyNC",
                                          "target": "section",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <section
                                        className="sc-hqyNC kASDuq"
                                      >
                                        <styled.header>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-kvZOFW",
                                                  "isStatic": false,
                                                  "lastClassName": "eFAcbR",
                                                  "rules": Array [
                                                    "
  border: 1px solid transparent;
  box-sizing: border-box;
  padding: 0.5rem;
  width: 100%;
  margin: 0.2rem 0 0;
  background-color: ",
                                                    [Function],
                                                    ";

  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.header",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-kvZOFW",
                                                "target": "header",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <header
                                              className="sc-kvZOFW eFAcbR"
                                            >
                                              <styled.span>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-kGXeez",
                                                        "isStatic": false,
                                                        "lastClassName": "NdeQu",
                                                        "rules": Array [
                                                          "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.span",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-kGXeez",
                                                      "target": "span",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <span
                                                    className="sc-kGXeez NdeQu"
                                                  >
                                                    collector1
                                                     - 
                                                    xldeploy
                                                     - 
                                                    http://collecet:454/service
                                                  </span>
                                                </StyledComponent>
                                              </styled.span>
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-fjdhpX",
                                                        "isStatic": false,
                                                        "lastClassName": "jJAgek",
                                                        "rules": Array [
                                                          "
  display: flex;
  align-items: center;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-fjdhpX",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-fjdhpX jJAgek"
                                                  >
                                                    <Styled(styled.button)
                                                      data-testhook-id="edit-collector-0"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="edit-collector-0"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-jbKcbu",
                                                              "isStatic": false,
                                                              "lastClassName": "ejmdGF",
                                                              "rules": Array [
                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-jzJRlG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-jbKcbu",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-jzJRlG sc-jbKcbu ejmdGF"
                                                          data-testhook-id="edit-collector-0"
                                                          onClick={[Function]}
                                                        >
                                                          <EditIcon
                                                            color="#1779ba"
                                                            size={26}
                                                          >
                                                            <svg
                                                              height={26}
                                                              version="1.1"
                                                              viewBox="0 0 24 24"
                                                              width={26}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <path
                                                                d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </EditIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                    <Styled(styled.button)
                                                      data-testhook-id="delete-collector-0"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="delete-collector-0"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-jqCOkK",
                                                              "isStatic": false,
                                                              "lastClassName": "ehnjFa",
                                                              "rules": Array [
                                                                "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-jzJRlG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-jqCOkK",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-jzJRlG sc-jqCOkK ehnjFa"
                                                          data-testhook-id="delete-collector-0"
                                                          onClick={[Function]}
                                                        >
                                                          <RemoveIcon
                                                            color="#1779ba"
                                                            size={24}
                                                          >
                                                            <svg
                                                              height={24}
                                                              version="1.1"
                                                              viewBox="0 0 32 32"
                                                              width={24}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <title>
                                                                trash
                                                              </title>
                                                              <path
                                                                d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </RemoveIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </header>
                                          </StyledComponent>
                                        </styled.header>
                                      </section>
                                    </StyledComponent>
                                  </styled.section>
                                </li>
                              </ul>
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ApprovalConfigEditor>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;

exports[`renders correctly with existing layout without crypto support 1`] = `
<NoCryptoWarning>
  <Warning
    message="The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge"
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "gkDdJM",
              "rules": Array [
                "
  display: flex;
  align-items: center;
  border: 1px solid ",
                [Function],
                ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-bxivhb gkDdJM"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-EHOje",
                    "isStatic": false,
                    "lastClassName": "jsJNZL",
                    "rules": Array [
                      "
  margin: 0 2rem 0 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-EHOje",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-EHOje jsJNZL"
              >
                <WarningIcon
                  color="red"
                  size={48}
                >
                  <svg
                    height={48}
                    version="1.1"
                    viewBox="0 0 32 32"
                    width={48}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <title>
                      warning
                    </title>
                    <path
                      d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                      fill="red"
                    />
                     
                    <path
                      d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                      fill="red"
                    />
                     
                    <path
                      d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                      fill="red"
                    />
                  </svg>
                </WarningIcon>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ifAKCX",
                    "isStatic": false,
                    "lastClassName": "eBwuLx",
                    "rules": Array [
                      "
  color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ifAKCX",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-ifAKCX eBwuLx"
              >
                The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge
              </p>
            </StyledComponent>
          </styled.p>
        </section>
      </StyledComponent>
    </styled.section>
  </Warning>
</NoCryptoWarning>
`;

exports[`renders correctly with non existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bZQynM",
              "isStatic": false,
              "lastClassName": "lmUvuu",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bZQynM",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-bZQynM lmUvuu"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "fzDpZl",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-htoDjs evxVNm"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "jLpowZ",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-dnqmqq jLpowZ"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jvDcdF",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-iwsKbI jvDcdF"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "gKvjmP",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-gzVnrw kUmRrv"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-Rmtcm",
                              "isStatic": false,
                              "lastClassName": "YiEyn",
                              "rules": Array [
                                "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                "
  flex-direction: column;
  border: 0;
  padding: 0 1rem;
  border: 1px solid
    ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-jTzLTM",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-Rmtcm",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-jTzLTM sc-Rmtcm YiEyn"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kAzzGY",
                                    "isStatic": false,
                                    "lastClassName": "crApAj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kAzzGY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-kAzzGY crApAj"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bRBYWo",
                                          "isStatic": false,
                                          "lastClassName": "dyXggM",
                                          "rules": Array [
                                            "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                            "
  font-size: 1rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-chPdSV",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-bRBYWo",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-chPdSV sc-bRBYWo dyXggM"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-hzDkRC",
                                          "isStatic": false,
                                          "lastClassName": "bJmeCP",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                            "
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-cSHVUG",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-hzDkRC",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG sc-hzDkRC bJmeCP"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kgoBCf",
                                    "isStatic": false,
                                    "lastClassName": "HSZXE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kgoBCf",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kgoBCf HSZXE"
                              />
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iuJeZd",
                          "isStatic": false,
                          "lastClassName": "hJHFef",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-htpNat",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-iuJeZd",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat sc-iuJeZd hJHFef"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <LayoutJsonEditor>
                  <GenericForm
                    cancellationLabel="Cancel"
                    confirmationLabel="Sign and Submit"
                    dataTesthookId="layout-json-form"
                    initialValues={
                      Object {
                        "layout": "{}",
                      }
                    }
                    isLoading={false}
                    onCancel={[Function]}
                    onSubmit={[Function]}
                    onValidChange={[Function]}
                    permission="EDIT"
                    schema={
                      Array [
                        Object {
                          "formType": "textArea",
                          "labelValue": "Layout*",
                          "name": "layout",
                        },
                      ]
                    }
                    validate={[Function]}
                  >
                    <Styled(styled.div)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "lastClassName": "emdpGB",
                              "rules": Array [
                                "
  display: flex;
  flex-direction: column;
",
                                "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                              ],
                            },
                            "displayName": "Styled(styled.div)",
                            "foldedComponentIds": Array [
                              "sc-iAyFgw",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-iAyFgw sc-cvbbAY emdpGB"
                        >
                          <form
                            data-testhook-id="layout-json-form"
                            onBlur={[Function]}
                            onSubmit={[Function]}
                          >
                            <FormInput
                              dataTesthookId="layout-json-form-field-0"
                              disabled={false}
                              formType="textArea"
                              height="25rem"
                              innerRef={
                                Object {
                                  "current": <textarea
                                    class="sc-ckVGcZ gmOKFw"
                                    data-testhook-id="layout-json-form-field-0"
                                    height="25rem"
                                    name="layout"
                                  >
                                    {}
                                  </textarea>,
                                }
                              }
                              labelValue="Layout*"
                              name="layout"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value="{}"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jKJlTe",
                                        "isStatic": false,
                                        "lastClassName": "cJqkLF",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jKJlTe",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jKJlTe cJqkLF"
                                  >
                                    <styled.label>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-kpOJdX",
                                              "isStatic": false,
                                              "lastClassName": "iYzRxv",
                                              "rules": Array [
                                                "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                              ],
                                            },
                                            "displayName": "styled.label",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-kpOJdX",
                                            "target": "label",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <label
                                          className="sc-kpOJdX iYzRxv"
                                        >
                                          Layout*
                                        </label>
                                      </StyledComponent>
                                    </styled.label>
                                    <styled.textarea
                                      data-testhook-id="layout-json-form-field-0"
                                      disabled={false}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value="{}"
                                    >
                                      <StyledComponent
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={false}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ckVGcZ",
                                              "isStatic": false,
                                              "lastClassName": "gmOKFw",
                                              "rules": Array [
                                                "
  ",
                                                "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                [Function],
                                                ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                [Function],
                                                ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                [Function],
                                                ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.textarea",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ckVGcZ",
                                            "target": "textarea",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={
                                          Object {
                                            "current": <textarea
                                              class="sc-ckVGcZ gmOKFw"
                                              data-testhook-id="layout-json-form-field-0"
                                              height="25rem"
                                              name="layout"
                                            >
                                              {}
                                            </textarea>,
                                          }
                                        }
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{}"
                                      >
                                        <textarea
                                          className="sc-ckVGcZ gmOKFw"
                                          data-testhook-id="layout-json-form-field-0"
                                          disabled={false}
                                          height="25rem"
                                          name="layout"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="{}"
                                        />
                                      </StyledComponent>
                                    </styled.textarea>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </FormInput>
                            <styled.hr>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-htpNat",
                                      "isStatic": false,
                                      "lastClassName": "dfMPxs",
                                      "rules": Array [
                                        "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.hr",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-htpNat",
                                    "target": "hr",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <hr
                                  className="sc-htpNat dfMPxs"
                                />
                              </StyledComponent>
                            </styled.hr>
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-hSdWYo",
                                      "isStatic": false,
                                      "lastClassName": "bJSPUE",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                        [Function],
                                        ";
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-hSdWYo",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-hSdWYo bJSPUE"
                                >
                                  <LoaderButton
                                    buttonType="submit"
                                    loading={false}
                                  >
                                    <styled.button
                                      type="submit"
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-eNQAEJ",
                                              "isStatic": false,
                                              "lastClassName": "geYAxA",
                                              "rules": Array [
                                                "
  ",
                                                "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                [Function],
                                                ";
  color: ",
                                                [Function],
                                                ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                [Function],
                                                ";
    cursor: pointer;
  }
",
                                                "
",
                                              ],
                                            },
                                            "displayName": "styled.button",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-eNQAEJ",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        type="submit"
                                      >
                                        <button
                                          className="sc-eNQAEJ geYAxA"
                                          type="submit"
                                        >
                                          Sign and Submit
                                        </button>
                                      </StyledComponent>
                                    </styled.button>
                                  </LoaderButton>
                                  <Styled(Styled(styled.button))
                                    data-testhook="cancel-button"
                                    onMouseDown={[Function]}
                                    type="button"
                                  >
                                    <StyledComponent
                                      data-testhook="cancel-button"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-eHgmQL",
                                            "isStatic": false,
                                            "lastClassName": "tTjA",
                                            "rules": Array [
                                              "
  ",
                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
",
                                              "
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  border: 1px solid ",
                                              [Function],
                                              ";

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    color: ",
                                              [Function],
                                              ";
    border: 1px solid ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
  margin-left: 1rem;
",
                                            ],
                                          },
                                          "displayName": "Styled(Styled(styled.button))",
                                          "foldedComponentIds": Array [
                                            "sc-eNQAEJ",
                                            "sc-kkGfuU",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-eHgmQL",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onMouseDown={[Function]}
                                      type="button"
                                    >
                                      <button
                                        className="sc-eNQAEJ sc-kkGfuU sc-eHgmQL tTjA"
                                        data-testhook="cancel-button"
                                        onMouseDown={[Function]}
                                        type="button"
                                      >
                                        Cancel
                                      </button>
                                    </StyledComponent>
                                  </Styled(Styled(styled.button))>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </form>
                        </div>
                      </StyledComponent>
                    </Styled(styled.div)>
                  </GenericForm>
                </LayoutJsonEditor>
                <LayoutSigner />
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title=""
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "lmUvuu",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-bZQynM lmUvuu"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "fzDpZl",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-htoDjs fzDpZl"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "jLpowZ",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-dnqmqq jLpowZ"
                      />
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": false,
                      "lastClassName": "gKvjmP",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-gzVnrw gKvjmP"
                />
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;

exports[`sign layout happy flow 1`] = `
<ThemeProvider
  theme={
    Object {
      "PageHeader": Object {
        "bottomBorderColor": "#bbb",
      },
      "alerts": Object {
        "warning": Object {
          "color": "red",
        },
      },
      "alternateLoader": Object {
        "color": "#808080",
      },
      "button": Object {
        "bgColor": "#1779ba",
        "textColor": "#fff",
      },
      "cancelButton": Object {
        "bgColor": "transparent",
        "borderColor": "#8D99AE",
        "hover": Object {
          "bgColor": "#8D99AE",
          "borderColor": "transparent",
          "textColor": "#fff",
        },
        "textColor": "#8D99AE",
      },
      "collapsibleContainer": Object {
        "bodyBorderColor": "#e0e0e0",
        "headerBgColor": "#e0e0e0",
        "iconColor": "gray",
      },
      "connectionError": Object {
        "bgColor": "red",
        "textColor": "#fff",
      },
      "copyInput": Object {
        "bgColor": "#e0e0e0",
      },
      "dashboardNavBar": Object {
        "link": Object {
          "hover": Object {
            "bgColor": "#e8feff",
          },
          "textColor": "#2e2e2e",
        },
      },
      "dashboardPage": Object {
        "avatar": Object {
          "borderColor": "#1779ba",
        },
        "contextMenu": Object {
          "bgColor": "#fff",
          "borderColor": "#e5e5e5",
          "dividerBgColor": "#dfdfdf",
          "menuItemBgColor": "#fff",
          "menuItemHoverBgColor": "#eee",
          "menuItemTextColor": "#2e2e2e",
        },
      },
      "dataCheckbox": Object {
        "loaderColor": "#1779ba",
      },
      "fontFamily": "'Fira Sans'",
      "fontFile": "/fonts/fira-sans-v10-latin-regular",
      "homePage": Object {
        "bgColor": "#eee",
        "navigation": Object {
          "bgColor": "#fff",
          "loginButton": Object {
            "default": Object {
              "loginButtonBgColor": "#fff",
              "loginButtonBorderColor": "#1779ba",
              "loginButtonTextColor": "#1779ba",
            },
            "hover": Object {
              "loginButtonBgColor": "#1779ba",
              "loginButtonBorderColor": "#1779ba",
              "loginButtonTextColor": "#fff",
            },
          },
        },
      },
      "keyManagementPage": Object {
        "iconColor": "#1779ba",
        "noActiveKeyWarning": Object {
          "borderColor": "orange",
          "textColor": "orange",
        },
        "passwordColor": "orange",
      },
      "layoutBuilder": Object {
        "addStepButtonBorderColor": "#1779ba",
        "iconColor": "#1779ba",
        "segmentContainerBorderColor": "#1779ba",
        "segmentContainerTitleBgColor": "#1779ba",
        "segmentTitleBgColor": "#fff",
        "segmentTitleHoverBorderColor": "#1779ba",
        "segmentsContainerTitleColor": "#fff",
        "stepContainerBgColor": "#e0e0e0",
        "stepContainerTitleBorderColor": "#1779ba",
        "stepTitleBgColor": "#fff",
        "stepTitleHoverBorderColor": "#1779ba",
      },
      "layoutPage": Object {
        "panel": Object {
          "bgColor": "#f1f1f1",
          "borderColor": "#e0e0e0",
          "contentSeparator": "#ccc",
        },
      },
      "loaderButton": Object {
        "loadingColor": "#fff",
      },
      "loaderIcon": Object {
        "color": "#1779ba",
      },
      "loginPage": Object {
        "bgColor": "#eee",
      },
      "modal": Object {
        "bgColor": "#fff",
        "button": Object {
          "default": Object {
            "color": "#1779ba",
          },
          "hover": Object {
            "color": "#1779ba",
          },
        },
      },
      "notificationsList": Object {
        "colors": Object {
          "ERROR": "red",
          "SUCCESS": "green",
          "WARNING": "orange",
        },
        "iconColor": "#fff",
        "iconSize": 22,
        "notificationBgColor": "#fff",
      },
      "panel": Object {
        "icons": Object {
          "enlargeIcon": Object {
            "color": "#1779ba",
          },
          "shrinkIcon": Object {
            "color": "#1779ba",
          },
        },
      },
      "passwordView": Object {
        "clipboardIcon": Object {
          "color": "#8D99AE",
          "hoverBgColor": "#e8feff",
        },
      },
      "searchInput": Object {
        "loaderIconColor": "#1779ba",
        "searchResultEntryHoverBg": "#e8feff",
        "searchResultsBgColor": "#fff",
        "searchResultsBorderColor": "#e0e0e0",
        "selectedEntryBorderColor": "#e0e0e0",
      },
      "transparentButton": Object {
        "default": Object {
          "transparentButtonBgColor": "#fff",
          "transparentButtonBorderColor": "#1779ba",
          "transparentButtonTextColor": "#1779ba",
        },
        "hover": Object {
          "transparentButtonBgColor": "#1779ba",
          "transparentButtonBorderColor": "#1779ba",
          "transparentButtonTextColor": "#fff",
        },
      },
      "treeEditor": Object {
        "bgColor": "#f1f1f1",
        "borderColor": "#e0e0e0",
        "breadCrumb": Object {
          "textColor": "#1779ba",
        },
        "iconColors": Object {
          "addRootNode": "#1779ba",
          "chain": "#8D99AE",
          "expandNode": "#1779ba",
          "label": "#8D99AE",
          "robot": "#8D99AE",
        },
        "lastBreadCrumb": Object {
          "textColor": "#000",
        },
        "loaders": Object {
          "onFetchChildren": Object {
            "color": "#1779ba",
          },
          "onPageLoad": Object {
            "color": "#1779ba",
          },
        },
        "nodeContextMenuContainer": Object {
          "bgColor": "fff",
          "borderColor": "#e5e5e5",
        },
        "nodeContextMenuIconSeparator": Object {
          "borderColor": "#8D99AE",
        },
        "nodeContextMenuItem": Object {
          "bgColor": "#fff",
          "hover": Object {
            "bgColor": "#e8feff",
          },
          "iconColor": "#8D99AE",
        },
        "nodeContextMenuItemSeparator": Object {
          "borderColor": "#e5e5e5",
        },
        "textColor": "#2e2e2e",
        "treeHeadLabel": Object {
          "bgColor": "#e8feff",
        },
      },
      "userSettingsPage": Object {
        "bgColor": "#f1f1f1",
        "sidePanel": Object {
          "bgColor": "#e0e0e0",
          "sidePanelItem": Object {
            "activeBgColor": "#f1f1f1",
            "bgColor": "#c7c7c7",
            "fontColor": "#2E2E30",
            "highlightColor": "#1779ba",
          },
        },
      },
    }
  }
>
  <ManageLayoutPanel>
    <Panel
      resizable={true}
      title="Manage layout"
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "lmUvuu",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-bZQynM lmUvuu"
            width="37.5vw"
          >
            <styled.header>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "fzDpZl",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <header
                  className="sc-htoDjs evxVNm"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "jLpowZ",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-dnqmqq jLpowZ"
                      >
                        Manage layout
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.div
                    onClick={[Function]}
                    shrink={false}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iwsKbI",
                            "isStatic": false,
                            "lastClassName": "jvDcdF",
                            "rules": Array [
                              "
  padding: ",
                              [Function],
                              ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iwsKbI",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      shrink={false}
                    >
                      <div
                        className="sc-iwsKbI jvDcdF"
                        onClick={[Function]}
                      >
                        <ShrinkIcon
                          color="#1779ba"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 32 32"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                              fill="#1779ba"
                            />
                          </svg>
                        </ShrinkIcon>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": false,
                      "lastClassName": "gKvjmP",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                shrink={false}
              >
                <main
                  className="sc-gzVnrw kUmRrv"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bdVaJa",
                            "isStatic": false,
                            "lastClassName": "dBcMBO",
                            "rules": Array [
                              "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bdVaJa",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-bdVaJa dBcMBO"
                      >
                        Selected: 
                        label / 
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bwzfXH",
                                  "isStatic": false,
                                  "lastClassName": "kRrzIn",
                                  "rules": Array [
                                    "
  color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bwzfXH",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-bwzfXH kRrzIn"
                            >
                               / 
                              layout
                            </span>
                          </StyledComponent>
                        </styled.span>
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.hr>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htpNat",
                            "isStatic": false,
                            "lastClassName": "dfMPxs",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                            ],
                          },
                          "displayName": "styled.hr",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htpNat",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-htpNat dfMPxs"
                      />
                    </StyledComponent>
                  </styled.hr>
                  <SegmentsContainer>
                    <ul>
                      <Styled(styled.section)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-Rmtcm",
                                "isStatic": false,
                                "lastClassName": "YiEyn",
                                "rules": Array [
                                  "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                  "
  flex-direction: column;
  border: 0;
  padding: 0 1rem;
  border: 1px solid
    ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "Styled(styled.section)",
                              "foldedComponentIds": Array [
                                "sc-jTzLTM",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-Rmtcm",
                              "target": "section",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <section
                            className="sc-jTzLTM sc-Rmtcm YiEyn"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kAzzGY",
                                      "isStatic": false,
                                      "lastClassName": "crApAj",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kAzzGY",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-kAzzGY crApAj"
                                >
                                  <Styled(styled.header)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bRBYWo",
                                            "isStatic": false,
                                            "lastClassName": "dyXggM",
                                            "rules": Array [
                                              "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                              "
  font-size: 1rem;
  top: -1rem;
  color: ",
                                              [Function],
                                              ";
  background-color: ",
                                              [Function],
                                              ";
  padding: 0.25rem 2rem 0.4rem;
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.header)",
                                          "foldedComponentIds": Array [
                                            "sc-chPdSV",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-bRBYWo",
                                          "target": "header",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <header
                                        className="sc-chPdSV sc-bRBYWo dyXggM"
                                      >
                                        Segments
                                      </header>
                                    </StyledComponent>
                                  </Styled(styled.header)>
                                  <Styled(styled.button)
                                    data-testhook-id="add-segment"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      data-testhook-id="add-segment"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hzDkRC",
                                            "isStatic": false,
                                            "lastClassName": "bJmeCP",
                                            "rules": Array [
                                              "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                              "
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.button)",
                                          "foldedComponentIds": Array [
                                            "sc-cSHVUG",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-hzDkRC",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <button
                                        className="sc-cSHVUG sc-hzDkRC bJmeCP"
                                        data-testhook-id="add-segment"
                                        onClick={[Function]}
                                      >
                                        <PlusIcon
                                          color="#1779ba"
                                          size={24}
                                        >
                                          <svg
                                            height={24}
                                            version="1.1"
                                            viewBox="0 0 32 32"
                                            width={24}
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <title>
                                              plus
                                            </title>
                                            <path
                                              d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                              fill="#1779ba"
                                            />
                                          </svg>
                                        </PlusIcon>
                                      </button>
                                    </StyledComponent>
                                  </Styled(styled.button)>
                                </div>
                              </StyledComponent>
                            </styled.div>
                            <styled.ul>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kgoBCf",
                                      "isStatic": false,
                                      "lastClassName": "HSZXE",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                      ],
                                    },
                                    "displayName": "styled.ul",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kgoBCf",
                                    "target": "ul",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <ul
                                  className="sc-kgoBCf HSZXE"
                                >
                                  <Segment
                                    index={0}
                                    key="jenkins"
                                    segment={
                                      Object {
                                        "name": "jenkins",
                                        "steps": Array [
                                          Object {
                                            "name": "approve",
                                          },
                                        ],
                                      }
                                    }
                                  >
                                    <styled.li>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-csuQGl",
                                              "isStatic": false,
                                              "lastClassName": "mjYdL",
                                              "rules": Array [
                                                "
  width: 100%;
  margin: 0 0 1rem;
",
                                              ],
                                            },
                                            "displayName": "styled.li",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-csuQGl",
                                            "target": "li",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <li
                                          className="sc-csuQGl mjYdL"
                                        >
                                          <styled.header
                                            data-testhook-id="segment0-edit"
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              data-testhook-id="segment0-edit"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-jlyJG",
                                                    "isStatic": false,
                                                    "lastClassName": "bqNltO",
                                                    "rules": Array [
                                                      "
  border: 1px solid transparent;
  box-sizing: border-box;
  padding: 0.5rem;
  width: 100%;
  margin: 0.2rem 0 0;
  background-color: ",
                                                      [Function],
                                                      ";

  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                      ".sc-VigVT",
                                                      " {
    margin: 0;
  }

  ",
                                                      ".sc-gqjmRU",
                                                      " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    cursor: pointer;
    border: 1px solid
      ",
                                                      [Function],
                                                      ";
  }
",
                                                    ],
                                                  },
                                                  "displayName": "styled.header",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-jlyJG",
                                                  "target": "header",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <header
                                                className="sc-jlyJG bqNltO"
                                                data-testhook-id="segment0-edit"
                                                onClick={[Function]}
                                              >
                                                <styled.span>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-kGXeez",
                                                          "isStatic": false,
                                                          "lastClassName": "NdeQu",
                                                          "rules": Array [
                                                            "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.span",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-kGXeez",
                                                        "target": "span",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <span
                                                      className="sc-kGXeez NdeQu"
                                                    >
                                                      jenkins
                                                    </span>
                                                  </StyledComponent>
                                                </styled.span>
                                                <styled.div>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-fjdhpX",
                                                          "isStatic": false,
                                                          "lastClassName": "jJAgek",
                                                          "rules": Array [
                                                            "
  display: flex;
  align-items: center;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-fjdhpX",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <div
                                                      className="sc-fjdhpX jJAgek"
                                                    >
                                                      <Styled(styled.button)
                                                        data-testhook-id="segment0-delete"
                                                        onClick={[Function]}
                                                      >
                                                        <StyledComponent
                                                          data-testhook-id="segment0-delete"
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-gipzik",
                                                                "isStatic": false,
                                                                "lastClassName": "hUPiAy",
                                                                "rules": Array [
                                                                  "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                                ],
                                                              },
                                                              "displayName": "Styled(styled.button)",
                                                              "foldedComponentIds": Array [
                                                                "sc-jzJRlG",
                                                              ],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-gipzik",
                                                              "target": "button",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                          onClick={[Function]}
                                                        >
                                                          <button
                                                            className="sc-jzJRlG sc-gipzik hUPiAy"
                                                            data-testhook-id="segment0-delete"
                                                            onClick={[Function]}
                                                          >
                                                            <RemoveIcon
                                                              color="#1779ba"
                                                              size={24}
                                                            >
                                                              <svg
                                                                height={24}
                                                                version="1.1"
                                                                viewBox="0 0 32 32"
                                                                width={24}
                                                                xmlns="http://www.w3.org/2000/svg"
                                                              >
                                                                <title>
                                                                  trash
                                                                </title>
                                                                <path
                                                                  d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                  fill="#1779ba"
                                                                />
                                                              </svg>
                                                            </RemoveIcon>
                                                          </button>
                                                        </StyledComponent>
                                                      </Styled(styled.button)>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                              </header>
                                            </StyledComponent>
                                          </styled.header>
                                        </li>
                                      </StyledComponent>
                                    </styled.li>
                                    <StepsContainer
                                      index={0}
                                      segment={
                                        Object {
                                          "name": "jenkins",
                                          "steps": Array [
                                            Object {
                                              "name": "approve",
                                            },
                                          ],
                                        }
                                      }
                                    >
                                      <ul>
                                        <Styled(styled.section)>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-jDwBTQ",
                                                  "isStatic": false,
                                                  "lastClassName": "iZURLY",
                                                  "rules": Array [
                                                    "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                                    "
  flex-direction: column;
  padding: 0 1rem 1rem;
  margin: 1rem 0;
  min-height: 10rem;
  background-color: ",
                                                    [Function],
                                                    ";
",
                                                  ],
                                                },
                                                "displayName": "Styled(styled.section)",
                                                "foldedComponentIds": Array [
                                                  "sc-jTzLTM",
                                                ],
                                                "render": [Function],
                                                "styledComponentId": "sc-jDwBTQ",
                                                "target": "section",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <section
                                              className="sc-jTzLTM sc-jDwBTQ iZURLY"
                                            >
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-kAzzGY",
                                                        "isStatic": false,
                                                        "lastClassName": "crApAj",
                                                        "rules": Array [
                                                          "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-kAzzGY",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-kAzzGY crApAj"
                                                  >
                                                    <Styled(styled.header)>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gPEVay",
                                                              "isStatic": false,
                                                              "lastClassName": "kxjIwe",
                                                              "rules": Array [
                                                                "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                                                "
  top: -1rem;
  margin: 0 auto;
  padding: 0.25rem 1rem;
  border: 1px solid
    ",
                                                                [Function],
                                                                ";
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.header)",
                                                            "foldedComponentIds": Array [
                                                              "sc-chPdSV",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gPEVay",
                                                            "target": "header",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <header
                                                          className="sc-chPdSV sc-gPEVay kxjIwe"
                                                        >
                                                          Steps
                                                        </header>
                                                      </StyledComponent>
                                                    </Styled(styled.header)>
                                                    <Styled(styled.button)
                                                      data-testhook-id="segment0-add-step"
                                                      onClick={[Function]}
                                                    >
                                                      <StyledComponent
                                                        data-testhook-id="segment0-add-step"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-iRbamj",
                                                              "isStatic": false,
                                                              "lastClassName": "eoEveZ",
                                                              "rules": Array [
                                                                "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                                                "
  border: 1px solid
    ",
                                                                [Function],
                                                                ";
  padding: 0 0.65rem;

  &:hover {
    cursor: pointer;
    transform: scale(0.9);
  }
",
                                                              ],
                                                            },
                                                            "displayName": "Styled(styled.button)",
                                                            "foldedComponentIds": Array [
                                                              "sc-cSHVUG",
                                                            ],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-iRbamj",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        onClick={[Function]}
                                                      >
                                                        <button
                                                          className="sc-cSHVUG sc-iRbamj eoEveZ"
                                                          data-testhook-id="segment0-add-step"
                                                          onClick={[Function]}
                                                        >
                                                          <PlusIcon
                                                            color="#1779ba"
                                                            size={20}
                                                          >
                                                            <svg
                                                              height={20}
                                                              version="1.1"
                                                              viewBox="0 0 32 32"
                                                              width={20}
                                                              xmlns="http://www.w3.org/2000/svg"
                                                            >
                                                              <title>
                                                                plus
                                                              </title>
                                                              <path
                                                                d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                                                fill="#1779ba"
                                                              />
                                                            </svg>
                                                          </PlusIcon>
                                                        </button>
                                                      </StyledComponent>
                                                    </Styled(styled.button)>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                              <Step
                                                index={0}
                                                key="stepContainer0"
                                                segment={
                                                  Object {
                                                    "name": "jenkins",
                                                    "steps": Array [
                                                      Object {
                                                        "name": "approve",
                                                      },
                                                    ],
                                                  }
                                                }
                                                step={
                                                  Object {
                                                    "name": "approve",
                                                  }
                                                }
                                              >
                                                <styled.section
                                                  data-testhook-id="jenkins-0-edit-step"
                                                  onClick={[Function]}
                                                >
                                                  <StyledComponent
                                                    data-testhook-id="jenkins-0-edit-step"
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-brqgnP",
                                                          "isStatic": false,
                                                          "lastClassName": "kLOaaF",
                                                          "rules": Array [
                                                            "
  width: 100%;
  margin: 0 0 1rem;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.section",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-brqgnP",
                                                        "target": "section",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                    onClick={[Function]}
                                                  >
                                                    <section
                                                      className="sc-brqgnP kLOaaF"
                                                      data-testhook-id="jenkins-0-edit-step"
                                                      onClick={[Function]}
                                                    >
                                                      <styled.header
                                                        active={true}
                                                      >
                                                        <StyledComponent
                                                          active={true}
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-jWBwVP",
                                                                "isStatic": false,
                                                                "lastClassName": "fYAbyO",
                                                                "rules": Array [
                                                                  "
  border: 1px solid
    ",
                                                                  [Function],
                                                                  ";
  font-size: 0.9rem;
  padding: 0.5rem;
  width: 100%;
  margin: 0.5rem 0 0;
  background-color: ",
                                                                  [Function],
                                                                  ";
  display: flex;
  align-items: center;
  justify-content: space-between;

  span {
    margin: 0 0.5rem;
  }

  ",
                                                                  ".sc-VigVT",
                                                                  " {
    margin: 0;
  }

  ",
                                                                  ".sc-gqjmRU",
                                                                  " {
    margin: 0.5rem 0 0;
  }

  &:hover {
    cursor: pointer;
    border: 1px solid
      ",
                                                                  [Function],
                                                                  ";
  }
",
                                                                ],
                                                              },
                                                              "displayName": "styled.header",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-jWBwVP",
                                                              "target": "header",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <header
                                                            className="sc-jWBwVP fYAbyO"
                                                          >
                                                            <styled.span>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-kGXeez",
                                                                      "isStatic": false,
                                                                      "lastClassName": "NdeQu",
                                                                      "rules": Array [
                                                                        "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.span",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-kGXeez",
                                                                    "target": "span",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <span
                                                                  className="sc-kGXeez NdeQu"
                                                                >
                                                                  approve
                                                                </span>
                                                              </StyledComponent>
                                                            </styled.span>
                                                            <styled.div>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-fjdhpX",
                                                                      "isStatic": false,
                                                                      "lastClassName": "jJAgek",
                                                                      "rules": Array [
                                                                        "
  display: flex;
  align-items: center;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.div",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-fjdhpX",
                                                                    "target": "div",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <div
                                                                  className="sc-fjdhpX jJAgek"
                                                                >
                                                                  <Styled(styled.button)
                                                                    data-testhook-id="jenkins-0-select-step"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <StyledComponent
                                                                      data-testhook-id="jenkins-0-select-step"
                                                                      forwardedComponent={
                                                                        Object {
                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                          "attrs": Array [],
                                                                          "componentStyle": ComponentStyle {
                                                                            "componentId": "sc-cMljjf",
                                                                            "isStatic": false,
                                                                            "lastClassName": "bolPsX",
                                                                            "rules": Array [
                                                                              "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                                            ],
                                                                          },
                                                                          "displayName": "Styled(styled.button)",
                                                                          "foldedComponentIds": Array [
                                                                            "sc-jzJRlG",
                                                                          ],
                                                                          "render": [Function],
                                                                          "styledComponentId": "sc-cMljjf",
                                                                          "target": "button",
                                                                          "toString": [Function],
                                                                          "warnTooManyClasses": [Function],
                                                                          "withComponent": [Function],
                                                                        }
                                                                      }
                                                                      forwardedRef={null}
                                                                      onClick={[Function]}
                                                                    >
                                                                      <button
                                                                        className="sc-jzJRlG sc-cMljjf bolPsX"
                                                                        data-testhook-id="jenkins-0-select-step"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <EditIcon
                                                                          color="#1779ba"
                                                                          size={26}
                                                                        >
                                                                          <svg
                                                                            height={26}
                                                                            version="1.1"
                                                                            viewBox="0 0 24 24"
                                                                            width={26}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <path
                                                                              d="M21.561 5.318l-2.879-2.879c-0.293-0.293-0.677-0.439-1.061-0.439-0.385 0-0.768 0.146-1.061 0.439l-3.56 3.561h-9c-0.552 0-1 0.447-1 1v13c0 0.553 0.448 1 1 1h13c0.552 0 1-0.447 1-1v-9l3.561-3.561c0.293-0.293 0.439-0.677 0.439-1.061s-0.146-0.767-0.439-1.060zM11.5 14.672l-2.172-2.172 6.293-6.293 2.172 2.172-6.293 6.293zM8.939 13.333l1.756 1.728-1.695-0.061-0.061-1.667zM16 19h-11v-11h6l-3.18 3.18c-0.293 0.293-0.478 0.812-0.629 1.289-0.16 0.5-0.191 1.056-0.191 1.47v3.061h3.061c0.414 0 1.108-0.1 1.571-0.29 0.464-0.19 0.896-0.347 1.188-0.64l3.18-3.070v6zM18.5 7.672l-2.172-2.172 1.293-1.293 2.171 2.172-1.292 1.293z"
                                                                              fill="#1779ba"
                                                                            />
                                                                          </svg>
                                                                        </EditIcon>
                                                                      </button>
                                                                    </StyledComponent>
                                                                  </Styled(styled.button)>
                                                                  <Styled(styled.button)
                                                                    data-testhook-id="jenkins-0-delete-step"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <StyledComponent
                                                                      data-testhook-id="jenkins-0-delete-step"
                                                                      forwardedComponent={
                                                                        Object {
                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                          "attrs": Array [],
                                                                          "componentStyle": ComponentStyle {
                                                                            "componentId": "sc-jAaTju",
                                                                            "isStatic": false,
                                                                            "lastClassName": "kIQGJX",
                                                                            "rules": Array [
                                                                              "
  display: inline-flex;
  background: none;
  border: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                                                            ],
                                                                          },
                                                                          "displayName": "Styled(styled.button)",
                                                                          "foldedComponentIds": Array [
                                                                            "sc-jzJRlG",
                                                                          ],
                                                                          "render": [Function],
                                                                          "styledComponentId": "sc-jAaTju",
                                                                          "target": "button",
                                                                          "toString": [Function],
                                                                          "warnTooManyClasses": [Function],
                                                                          "withComponent": [Function],
                                                                        }
                                                                      }
                                                                      forwardedRef={null}
                                                                      onClick={[Function]}
                                                                    >
                                                                      <button
                                                                        className="sc-jzJRlG sc-jAaTju kIQGJX"
                                                                        data-testhook-id="jenkins-0-delete-step"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <RemoveIcon
                                                                          color="#1779ba"
                                                                          size={20}
                                                                        >
                                                                          <svg
                                                                            height={20}
                                                                            version="1.1"
                                                                            viewBox="0 0 32 32"
                                                                            width={20}
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                          >
                                                                            <title>
                                                                              trash
                                                                            </title>
                                                                            <path
                                                                              d="M29.98 6.819c-0.096-1.57-1.387-2.816-2.98-2.816h-3v-1.002c0-1.657-1.344-3-3-3h-10c-1.657 0-3 1.343-3 3v1.001h-3c-1.595 0-2.885 1.246-2.981 2.816h-0.019v2.183c0 1.104 0.896 2 2 2v0 17c0 2.209 1.791 4 4 4h16c2.209 0 4-1.791 4-4v-17c1.104 0 2-0.896 2-2v-2.182h-0.020zM10 3.002c0-0.553 0.447-1 1-1h10c0.553 0 1 0.447 1 1v1h-12v-1zM26 28.002c0 1.102-0.898 2-2 2h-16c-1.103 0-2-0.898-2-2v-17h20v17zM28 8.001v1h-24v-1.999c0-0.553 0.447-1 1-1h22c0.553 0 1 0.447 1 1v0.999zM9 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM9 14.005h2v13h-2v-13zM15 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM15 14.005h2v13h-2v-13zM21 28.006h2c0.553 0 1-0.447 1-1v-13c0-0.553-0.447-1-1-1h-2c-0.553 0-1 0.447-1 1v13c0 0.553 0.447 1 1 1zM21 14.005h2v13h-2v-13z"
                                                                              fill="#1779ba"
                                                                            />
                                                                          </svg>
                                                                        </RemoveIcon>
                                                                      </button>
                                                                    </StyledComponent>
                                                                  </Styled(styled.button)>
                                                                </div>
                                                              </StyledComponent>
                                                            </styled.div>
                                                          </header>
                                                        </StyledComponent>
                                                      </styled.header>
                                                    </section>
                                                  </StyledComponent>
                                                </styled.section>
                                              </Step>
                                            </section>
                                          </StyledComponent>
                                        </Styled(styled.section)>
                                      </ul>
                                    </StepsContainer>
                                  </Segment>
                                </ul>
                              </StyledComponent>
                            </styled.ul>
                          </section>
                        </StyledComponent>
                      </Styled(styled.section)>
                    </ul>
                  </SegmentsContainer>
                  <Styled(styled.hr)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iuJeZd",
                            "isStatic": false,
                            "lastClassName": "hJHFef",
                            "rules": Array [
                              "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                              [Function],
                              ";
",
                              "
  margin: 0.7rem 0 1rem;
",
                            ],
                          },
                          "displayName": "Styled(styled.hr)",
                          "foldedComponentIds": Array [
                            "sc-htpNat",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-iuJeZd",
                          "target": "hr",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <hr
                        className="sc-htpNat sc-iuJeZd hJHFef"
                      />
                    </StyledComponent>
                  </Styled(styled.hr)>
                  <LayoutJsonEditor>
                    <GenericForm
                      cancellationLabel="Cancel"
                      confirmationLabel="Sign and Submit"
                      dataTesthookId="layout-json-form"
                      initialValues={
                        Object {
                          "layout": "{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}",
                        }
                      }
                      isLoading={false}
                      onCancel={[Function]}
                      onSubmit={[Function]}
                      onValidChange={[Function]}
                      permission="EDIT"
                      schema={
                        Array [
                          Object {
                            "formType": "textArea",
                            "labelValue": "Layout*",
                            "name": "layout",
                          },
                        ]
                      }
                      validate={[Function]}
                    >
                      <Styled(styled.div)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-cvbbAY",
                                "isStatic": false,
                                "lastClassName": "emdpGB",
                                "rules": Array [
                                  "
  display: flex;
  flex-direction: column;
",
                                  "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                ],
                              },
                              "displayName": "Styled(styled.div)",
                              "foldedComponentIds": Array [
                                "sc-iAyFgw",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-cvbbAY",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-iAyFgw sc-cvbbAY emdpGB"
                          >
                            <form
                              data-testhook-id="layout-json-form"
                              onBlur={[Function]}
                              onSubmit={[Function]}
                            >
                              <FormInput
                                dataTesthookId="layout-json-form-field-0"
                                disabled={false}
                                formType="textArea"
                                height="25rem"
                                innerRef={
                                  Object {
                                    "current": <textarea
                                      class="sc-ckVGcZ gmOKFw"
                                      data-testhook-id="layout-json-form-field-0"
                                      height="25rem"
                                      name="layout"
                                    >
                                      {
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve"
        }
      ]
    }
  ]
}
                                    </textarea>,
                                  }
                                }
                                labelValue="Layout*"
                                name="layout"
                                onBlur={[Function]}
                                onChange={[Function]}
                                value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-jKJlTe",
                                          "isStatic": false,
                                          "lastClassName": "cJqkLF",
                                          "rules": Array [
                                            "
  display: flex;
  flex-direction: column;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-jKJlTe",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-jKJlTe cJqkLF"
                                    >
                                      <styled.label>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-kpOJdX",
                                                "isStatic": false,
                                                "lastClassName": "iYzRxv",
                                                "rules": Array [
                                                  "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                                ],
                                              },
                                              "displayName": "styled.label",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-kpOJdX",
                                              "target": "label",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <label
                                            className="sc-kpOJdX iYzRxv"
                                          >
                                            Layout*
                                          </label>
                                        </StyledComponent>
                                      </styled.label>
                                      <styled.textarea
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                      >
                                        <StyledComponent
                                          data-testhook-id="layout-json-form-field-0"
                                          disabled={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-ckVGcZ",
                                                "isStatic": false,
                                                "lastClassName": "gmOKFw",
                                                "rules": Array [
                                                  "
  ",
                                                  "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                  [Function],
                                                  ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                  [Function],
                                                  ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                  [Function],
                                                  ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                  ";
",
                                                ],
                                              },
                                              "displayName": "styled.textarea",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-ckVGcZ",
                                              "target": "textarea",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={
                                            Object {
                                              "current": <textarea
                                                class="sc-ckVGcZ gmOKFw"
                                                data-testhook-id="layout-json-form-field-0"
                                                height="25rem"
                                                name="layout"
                                              >
                                                {
  "layoutSegments": [
    {
      "name": "jenkins",
      "steps": [
        {
          "name": "approve"
        }
      ]
    }
  ]
}
                                              </textarea>,
                                            }
                                          }
                                          height="25rem"
                                          name="layout"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                        >
                                          <textarea
                                            className="sc-ckVGcZ gmOKFw"
                                            data-testhook-id="layout-json-form-field-0"
                                            disabled={false}
                                            height="25rem"
                                            name="layout"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            value="{
  \\"layoutSegments\\": [
    {
      \\"name\\": \\"jenkins\\",
      \\"steps\\": [
        {
          \\"name\\": \\"approve\\"
        }
      ]
    }
  ]
}"
                                          />
                                        </StyledComponent>
                                      </styled.textarea>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </FormInput>
                              <styled.hr>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": false,
                                        "lastClassName": "dfMPxs",
                                        "rules": Array [
                                          "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.hr",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "hr",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <hr
                                    className="sc-htpNat dfMPxs"
                                  />
                                </StyledComponent>
                              </styled.hr>
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-hSdWYo",
                                        "isStatic": false,
                                        "lastClassName": "bJSPUE",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-hSdWYo",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-hSdWYo bJSPUE"
                                  >
                                    <LoaderButton
                                      buttonType="submit"
                                      loading={false}
                                    >
                                      <styled.button
                                        type="submit"
                                      >
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-eNQAEJ",
                                                "isStatic": false,
                                                "lastClassName": "geYAxA",
                                                "rules": Array [
                                                  "
  ",
                                                  "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                  [Function],
                                                  ";
  color: ",
                                                  [Function],
                                                  ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                  [Function],
                                                  ";
    cursor: pointer;
  }
",
                                                  "
",
                                                ],
                                              },
                                              "displayName": "styled.button",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-eNQAEJ",
                                              "target": "button",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          type="submit"
                                        >
                                          <button
                                            className="sc-eNQAEJ geYAxA"
                                            type="submit"
                                          >
                                            Sign and Submit
                                          </button>
                                        </StyledComponent>
                                      </styled.button>
                                    </LoaderButton>
                                    <Styled(Styled(styled.button))
                                      data-testhook="cancel-button"
                                      onMouseDown={[Function]}
                                      type="button"
                                    >
                                      <StyledComponent
                                        data-testhook="cancel-button"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-eHgmQL",
                                              "isStatic": false,
                                              "lastClassName": "tTjA",
                                              "rules": Array [
                                                "
  ",
                                                "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                [Function],
                                                ";
  color: ",
                                                [Function],
                                                ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                [Function],
                                                ";
    cursor: pointer;
  }
",
                                                "
",
                                                "
  background-color: ",
                                                [Function],
                                                ";
  color: ",
                                                [Function],
                                                ";
  border: 1px solid ",
                                                [Function],
                                                ";

  &:hover {
    background-color: ",
                                                [Function],
                                                ";
    color: ",
                                                [Function],
                                                ";
    border: 1px solid ",
                                                [Function],
                                                ";
    cursor: pointer;
  }
",
                                                "
  margin-left: 1rem;
",
                                              ],
                                            },
                                            "displayName": "Styled(Styled(styled.button))",
                                            "foldedComponentIds": Array [
                                              "sc-eNQAEJ",
                                              "sc-kkGfuU",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-eHgmQL",
                                            "target": "button",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onMouseDown={[Function]}
                                        type="button"
                                      >
                                        <button
                                          className="sc-eNQAEJ sc-kkGfuU sc-eHgmQL tTjA"
                                          data-testhook="cancel-button"
                                          onMouseDown={[Function]}
                                          type="button"
                                        >
                                          Cancel
                                        </button>
                                      </StyledComponent>
                                    </Styled(Styled(styled.button))>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </form>
                          </div>
                        </StyledComponent>
                      </Styled(styled.div)>
                    </GenericForm>
                  </LayoutJsonEditor>
                  <LayoutSigner />
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
    <LayoutEditorDetailsPane>
      <Panel
        last={true}
        title="Edit step approve configuration"
        width="37.5vw"
      >
        <styled.section
          shrink={false}
          width="37.5vw"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": false,
                  "lastClassName": "lmUvuu",
                  "rules": Array [
                    "
  flex: ",
                    [Function],
                    ";
  flex-grow: ",
                    [Function],
                    ";
  ",
                    [Function],
                    ";
  max-width: ",
                    [Function],
                    ";
",
                  ],
                },
                "displayName": "styled.section",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "section",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            shrink={false}
            width="37.5vw"
          >
            <section
              className="sc-bZQynM lmUvuu"
              width="37.5vw"
            >
              <styled.header
                last={true}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": false,
                        "lastClassName": "fzDpZl",
                        "rules": Array [
                          "
  margin: ",
                          [Function],
                          ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                        ],
                      },
                      "displayName": "styled.header",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": "header",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  last={true}
                >
                  <header
                    className="sc-htoDjs fzDpZl"
                  >
                    <styled.p>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-dnqmqq",
                              "isStatic": false,
                              "lastClassName": "jLpowZ",
                              "rules": Array [
                                "
  justify-self: center;
",
                              ],
                            },
                            "displayName": "styled.p",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-dnqmqq",
                            "target": "p",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <p
                          className="sc-dnqmqq jLpowZ"
                        >
                          Edit step approve configuration
                        </p>
                      </StyledComponent>
                    </styled.p>
                  </header>
                </StyledComponent>
              </styled.header>
              <styled.main
                last={true}
                shrink={false}
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "gKvjmP",
                        "rules": Array [
                          "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                          [Function],
                          ";
  margin: ",
                          [Function],
                          ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                          [Function],
                          ";
  }
",
                        ],
                      },
                      "displayName": "styled.main",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "main",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  last={true}
                  shrink={false}
                >
                  <main
                    className="sc-gzVnrw gKvjmP"
                  >
                    <ApprovalConfigEditor>
                      <Styled(styled.section)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-ksYbfQ",
                                "isStatic": false,
                                "lastClassName": "DFzZQ",
                                "rules": Array [
                                  "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                  "
  min-height: 0;
  flex-direction: column;
  border: 0;
  padding: 0 1rem 1rem;
  border: 1px solid
    ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "Styled(styled.section)",
                              "foldedComponentIds": Array [
                                "sc-jTzLTM",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-ksYbfQ",
                              "target": "section",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <section
                            className="sc-jTzLTM sc-ksYbfQ DFzZQ"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kAzzGY",
                                      "isStatic": false,
                                      "lastClassName": "crApAj",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kAzzGY",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-kAzzGY crApAj"
                                >
                                  <Styled(styled.header)>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hmzhuo",
                                            "isStatic": false,
                                            "lastClassName": "iBDszQ",
                                            "rules": Array [
                                              "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                              "
  font-size: 0.85rem;
  top: -1rem;
  color: ",
                                              [Function],
                                              ";
  background-color: ",
                                              [Function],
                                              ";
  padding: 0.25rem 2rem 0.4rem;
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.header)",
                                          "foldedComponentIds": Array [
                                            "sc-chPdSV",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-hmzhuo",
                                          "target": "header",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <header
                                        className="sc-chPdSV sc-hmzhuo iBDszQ"
                                      >
                                        Approval collectors
                                      </header>
                                    </StyledComponent>
                                  </Styled(styled.header)>
                                </div>
                              </StyledComponent>
                            </styled.div>
                            <styled.ul>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kgoBCf",
                                      "isStatic": false,
                                      "lastClassName": "HSZXE",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                      ],
                                    },
                                    "displayName": "styled.ul",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kgoBCf",
                                    "target": "ul",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <ul
                                  className="sc-kgoBCf HSZXE"
                                >
                                  <li
                                    key="collector-row-0"
                                  >
                                    <Styled(styled.section)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-dNLxif",
                                              "isStatic": false,
                                              "lastClassName": "cYOoGC",
                                              "rules": Array [
                                                "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                                "
  flex-direction: column;
  padding: 1rem;
  margin: 0 0 1rem;
  min-height: 10rem;
  background-color: ",
                                                [Function],
                                                ";
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.section)",
                                            "foldedComponentIds": Array [
                                              "sc-jTzLTM",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-dNLxif",
                                            "target": "section",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <section
                                          className="sc-jTzLTM sc-dNLxif cYOoGC"
                                        >
                                          <GenericForm
                                            autoFocus={true}
                                            cancellationLabel="Cancel"
                                            confirmationLabel="Save"
                                            dataTesthookId="collector-edit-form"
                                            initialValues={
                                              Object {
                                                "applicationName": "",
                                                "name": "",
                                                "uri": "",
                                              }
                                            }
                                            isLoading={false}
                                            onCancel={[Function]}
                                            onSubmit={[Function]}
                                            permission="EDIT"
                                            schema={
                                              Array [
                                                Object {
                                                  "formType": "text",
                                                  "labelValue": "Name",
                                                  "name": "name",
                                                },
                                                Object {
                                                  "formType": "text",
                                                  "labelValue": "Service URL",
                                                  "name": "uri",
                                                },
                                                Object {
                                                  "formType": "text",
                                                  "labelValue": "Application Name",
                                                  "name": "applicationName",
                                                },
                                              ]
                                            }
                                            validate={[Function]}
                                          >
                                            <Styled(styled.div)>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-cvbbAY",
                                                      "isStatic": false,
                                                      "lastClassName": "emdpGB",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: column;
",
                                                        "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.div)",
                                                    "foldedComponentIds": Array [
                                                      "sc-iAyFgw",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-cvbbAY",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-iAyFgw sc-cvbbAY emdpGB"
                                                >
                                                  <form
                                                    data-testhook-id="collector-edit-form"
                                                    onBlur={[Function]}
                                                    onSubmit={[Function]}
                                                  >
                                                    <FormInput
                                                      dataTesthookId="collector-edit-form-field-0"
                                                      disabled={false}
                                                      formType="text"
                                                      innerRef={
                                                        Object {
                                                          "current": <input
                                                            class="sc-VigVT cBJosH"
                                                            data-testhook-id="collector-edit-form-field-0"
                                                            name="name"
                                                            type="text"
                                                            value="xlCollect"
                                                          />,
                                                        }
                                                      }
                                                      labelValue="Name"
                                                      name="name"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      value="xlCollect"
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-dxgOiQ",
                                                                "isStatic": false,
                                                                "lastClassName": "cnAnsE",
                                                                "rules": Array [
                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-dxgOiQ",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-dxgOiQ cnAnsE"
                                                          >
                                                            <styled.label>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-kpOJdX",
                                                                      "isStatic": false,
                                                                      "lastClassName": "iYzRxv",
                                                                      "rules": Array [
                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.label",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-kpOJdX",
                                                                    "target": "label",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <label
                                                                  className="sc-kpOJdX iYzRxv"
                                                                >
                                                                  Name
                                                                </label>
                                                              </StyledComponent>
                                                            </styled.label>
                                                            <styled.input
                                                              data-testhook-id="collector-edit-form-field-0"
                                                              disabled={false}
                                                              name="name"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              type="text"
                                                              value="xlCollect"
                                                            >
                                                              <StyledComponent
                                                                data-testhook-id="collector-edit-form-field-0"
                                                                disabled={false}
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-VigVT",
                                                                      "isStatic": false,
                                                                      "lastClassName": "cBJosH",
                                                                      "rules": Array [
                                                                        "
  ",
                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                        [Function],
                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                                        [Function],
                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                        [Function],
                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.input",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-VigVT",
                                                                    "target": "input",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={
                                                                  Object {
                                                                    "current": <input
                                                                      class="sc-VigVT cBJosH"
                                                                      data-testhook-id="collector-edit-form-field-0"
                                                                      name="name"
                                                                      type="text"
                                                                      value="xlCollect"
                                                                    />,
                                                                  }
                                                                }
                                                                name="name"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                type="text"
                                                                value="xlCollect"
                                                              >
                                                                <input
                                                                  className="sc-VigVT cBJosH"
                                                                  data-testhook-id="collector-edit-form-field-0"
                                                                  disabled={false}
                                                                  name="name"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value="xlCollect"
                                                                />
                                                              </StyledComponent>
                                                            </styled.input>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </FormInput>
                                                    <FormInput
                                                      dataTesthookId="collector-edit-form-field-1"
                                                      disabled={false}
                                                      formType="text"
                                                      labelValue="Service URL"
                                                      name="uri"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      value="https://collect.org"
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-dxgOiQ",
                                                                "isStatic": false,
                                                                "lastClassName": "cnAnsE",
                                                                "rules": Array [
                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-dxgOiQ",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-dxgOiQ cnAnsE"
                                                          >
                                                            <styled.label>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-kpOJdX",
                                                                      "isStatic": false,
                                                                      "lastClassName": "iYzRxv",
                                                                      "rules": Array [
                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.label",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-kpOJdX",
                                                                    "target": "label",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <label
                                                                  className="sc-kpOJdX iYzRxv"
                                                                >
                                                                  Service URL
                                                                </label>
                                                              </StyledComponent>
                                                            </styled.label>
                                                            <styled.input
                                                              data-testhook-id="collector-edit-form-field-1"
                                                              disabled={false}
                                                              name="uri"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              type="text"
                                                              value="https://collect.org"
                                                            >
                                                              <StyledComponent
                                                                data-testhook-id="collector-edit-form-field-1"
                                                                disabled={false}
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-VigVT",
                                                                      "isStatic": false,
                                                                      "lastClassName": "cBJosH",
                                                                      "rules": Array [
                                                                        "
  ",
                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                        [Function],
                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                                        [Function],
                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                        [Function],
                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.input",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-VigVT",
                                                                    "target": "input",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                                name="uri"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                type="text"
                                                                value="https://collect.org"
                                                              >
                                                                <input
                                                                  className="sc-VigVT cBJosH"
                                                                  data-testhook-id="collector-edit-form-field-1"
                                                                  disabled={false}
                                                                  name="uri"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value="https://collect.org"
                                                                />
                                                              </StyledComponent>
                                                            </styled.input>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </FormInput>
                                                    <FormInput
                                                      dataTesthookId="collector-edit-form-field-2"
                                                      disabled={false}
                                                      formType="text"
                                                      labelValue="Application Name"
                                                      name="applicationName"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      value="appName"
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-dxgOiQ",
                                                                "isStatic": false,
                                                                "lastClassName": "cnAnsE",
                                                                "rules": Array [
                                                                  "
  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-dxgOiQ",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-dxgOiQ cnAnsE"
                                                          >
                                                            <styled.label>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-kpOJdX",
                                                                      "isStatic": false,
                                                                      "lastClassName": "iYzRxv",
                                                                      "rules": Array [
                                                                        "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.label",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-kpOJdX",
                                                                    "target": "label",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <label
                                                                  className="sc-kpOJdX iYzRxv"
                                                                >
                                                                  Application Name
                                                                </label>
                                                              </StyledComponent>
                                                            </styled.label>
                                                            <styled.input
                                                              data-testhook-id="collector-edit-form-field-2"
                                                              disabled={false}
                                                              name="applicationName"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              type="text"
                                                              value="appName"
                                                            >
                                                              <StyledComponent
                                                                data-testhook-id="collector-edit-form-field-2"
                                                                disabled={false}
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-VigVT",
                                                                      "isStatic": false,
                                                                      "lastClassName": "cBJosH",
                                                                      "rules": Array [
                                                                        "
  ",
                                                                        "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                        [Function],
                                                                        ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                                        [Function],
                                                                        ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                        [Function],
                                                                        ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.input",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-VigVT",
                                                                    "target": "input",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                                name="applicationName"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                type="text"
                                                                value="appName"
                                                              >
                                                                <input
                                                                  className="sc-VigVT cBJosH"
                                                                  data-testhook-id="collector-edit-form-field-2"
                                                                  disabled={false}
                                                                  name="applicationName"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  type="text"
                                                                  value="appName"
                                                                />
                                                              </StyledComponent>
                                                            </styled.input>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </FormInput>
                                                    <styled.hr>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-htpNat",
                                                              "isStatic": false,
                                                              "lastClassName": "dfMPxs",
                                                              "rules": Array [
                                                                "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                                                [Function],
                                                                ";
",
                                                              ],
                                                            },
                                                            "displayName": "styled.hr",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-htpNat",
                                                            "target": "hr",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <hr
                                                          className="sc-htpNat dfMPxs"
                                                        />
                                                      </StyledComponent>
                                                    </styled.hr>
                                                    <styled.div>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-hSdWYo",
                                                              "isStatic": false,
                                                              "lastClassName": "bJSPUE",
                                                              "rules": Array [
                                                                "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                                [Function],
                                                                ";
",
                                                              ],
                                                            },
                                                            "displayName": "styled.div",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-hSdWYo",
                                                            "target": "div",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <div
                                                          className="sc-hSdWYo bJSPUE"
                                                        >
                                                          <LoaderButton
                                                            buttonType="submit"
                                                            loading={false}
                                                          >
                                                            <styled.button
                                                              type="submit"
                                                            >
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-eNQAEJ",
                                                                      "isStatic": false,
                                                                      "lastClassName": "geYAxA",
                                                                      "rules": Array [
                                                                        "
  ",
                                                                        "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                                        [Function],
                                                                        ";
  color: ",
                                                                        [Function],
                                                                        ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                                        [Function],
                                                                        ";
    cursor: pointer;
  }
",
                                                                        "
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.button",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-eNQAEJ",
                                                                    "target": "button",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                                type="submit"
                                                              >
                                                                <button
                                                                  className="sc-eNQAEJ geYAxA"
                                                                  type="submit"
                                                                >
                                                                  Save
                                                                </button>
                                                              </StyledComponent>
                                                            </styled.button>
                                                          </LoaderButton>
                                                          <Styled(Styled(styled.button))
                                                            data-testhook="cancel-button"
                                                            onMouseDown={[Function]}
                                                            type="button"
                                                          >
                                                            <StyledComponent
                                                              data-testhook="cancel-button"
                                                              forwardedComponent={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "attrs": Array [],
                                                                  "componentStyle": ComponentStyle {
                                                                    "componentId": "sc-eHgmQL",
                                                                    "isStatic": false,
                                                                    "lastClassName": "tTjA",
                                                                    "rules": Array [
                                                                      "
  ",
                                                                      "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                                      [Function],
                                                                      ";
  color: ",
                                                                      [Function],
                                                                      ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                                      [Function],
                                                                      ";
    cursor: pointer;
  }
",
                                                                      "
",
                                                                      "
  background-color: ",
                                                                      [Function],
                                                                      ";
  color: ",
                                                                      [Function],
                                                                      ";
  border: 1px solid ",
                                                                      [Function],
                                                                      ";

  &:hover {
    background-color: ",
                                                                      [Function],
                                                                      ";
    color: ",
                                                                      [Function],
                                                                      ";
    border: 1px solid ",
                                                                      [Function],
                                                                      ";
    cursor: pointer;
  }
",
                                                                      "
  margin-left: 1rem;
",
                                                                    ],
                                                                  },
                                                                  "displayName": "Styled(Styled(styled.button))",
                                                                  "foldedComponentIds": Array [
                                                                    "sc-eNQAEJ",
                                                                    "sc-kkGfuU",
                                                                  ],
                                                                  "render": [Function],
                                                                  "styledComponentId": "sc-eHgmQL",
                                                                  "target": "button",
                                                                  "toString": [Function],
                                                                  "warnTooManyClasses": [Function],
                                                                  "withComponent": [Function],
                                                                }
                                                              }
                                                              forwardedRef={null}
                                                              onMouseDown={[Function]}
                                                              type="button"
                                                            >
                                                              <button
                                                                className="sc-eNQAEJ sc-kkGfuU sc-eHgmQL tTjA"
                                                                data-testhook="cancel-button"
                                                                onMouseDown={[Function]}
                                                                type="button"
                                                              >
                                                                Cancel
                                                              </button>
                                                            </StyledComponent>
                                                          </Styled(Styled(styled.button))>
                                                        </div>
                                                      </StyledComponent>
                                                    </styled.div>
                                                  </form>
                                                </div>
                                              </StyledComponent>
                                            </Styled(styled.div)>
                                          </GenericForm>
                                        </section>
                                      </StyledComponent>
                                    </Styled(styled.section)>
                                  </li>
                                </ul>
                              </StyledComponent>
                            </styled.ul>
                          </section>
                        </StyledComponent>
                      </Styled(styled.section)>
                    </ApprovalConfigEditor>
                  </main>
                </StyledComponent>
              </styled.main>
            </section>
          </StyledComponent>
        </styled.section>
      </Panel>
    </LayoutEditorDetailsPane>
  </ManageLayoutPanel>
</ThemeProvider>
`;

exports[`validates a faulty layout and returns errors 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bZQynM",
              "isStatic": false,
              "lastClassName": "lmUvuu",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bZQynM",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-bZQynM lmUvuu"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htoDjs",
                    "isStatic": false,
                    "lastClassName": "fzDpZl",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htoDjs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-htoDjs evxVNm"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-dnqmqq",
                          "isStatic": false,
                          "lastClassName": "jLpowZ",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-dnqmqq",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-dnqmqq jLpowZ"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iwsKbI",
                          "isStatic": false,
                          "lastClassName": "jvDcdF",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iwsKbI",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-iwsKbI jvDcdF"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "gKvjmP",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-gzVnrw kUmRrv"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <SegmentsContainer>
                  <ul>
                    <Styled(styled.section)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-Rmtcm",
                              "isStatic": false,
                              "lastClassName": "YiEyn",
                              "rules": Array [
                                "
  margin: 1rem 0 1rem;
  border: 1px solid #1779ba;
  display: flex;
  align-items: center;
  width: 100%;
  min-height: 18.8rem;
",
                                "
  flex-direction: column;
  border: 0;
  padding: 0 1rem;
  border: 1px solid
    ",
                                [Function],
                                ";
",
                              ],
                            },
                            "displayName": "Styled(styled.section)",
                            "foldedComponentIds": Array [
                              "sc-jTzLTM",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-Rmtcm",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-jTzLTM sc-Rmtcm YiEyn"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kAzzGY",
                                    "isStatic": false,
                                    "lastClassName": "crApAj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kAzzGY",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-kAzzGY crApAj"
                              >
                                <Styled(styled.header)>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bRBYWo",
                                          "isStatic": false,
                                          "lastClassName": "dyXggM",
                                          "rules": Array [
                                            "
  position: relative;
  font-size: 0.9rem;
  top: -0.75rem;
  background-color: #f1f1f1;
  display: inline-flex;
",
                                            "
  font-size: 1rem;
  top: -1rem;
  color: ",
                                            [Function],
                                            ";
  background-color: ",
                                            [Function],
                                            ";
  padding: 0.25rem 2rem 0.4rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.header)",
                                        "foldedComponentIds": Array [
                                          "sc-chPdSV",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-bRBYWo",
                                        "target": "header",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <header
                                      className="sc-chPdSV sc-bRBYWo dyXggM"
                                    >
                                      Segments
                                    </header>
                                  </StyledComponent>
                                </Styled(styled.header)>
                                <Styled(styled.button)
                                  data-testhook-id="add-segment"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    data-testhook-id="add-segment"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-hzDkRC",
                                          "isStatic": false,
                                          "lastClassName": "bJmeCP",
                                          "rules": Array [
                                            "
  position: relative;
  top: -1rem;
  background-color: #f1f1f1;
  border: 0;
",
                                            "
  right: 0;

  &:hover {
    cursor: pointer;
    transform: scale(0.8);
  }
",
                                          ],
                                        },
                                        "displayName": "Styled(styled.button)",
                                        "foldedComponentIds": Array [
                                          "sc-cSHVUG",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-hzDkRC",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                  >
                                    <button
                                      className="sc-cSHVUG sc-hzDkRC bJmeCP"
                                      data-testhook-id="add-segment"
                                      onClick={[Function]}
                                    >
                                      <PlusIcon
                                        color="#1779ba"
                                        size={24}
                                      >
                                        <svg
                                          height={24}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={24}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            plus
                                          </title>
                                          <path
                                            d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
                                            fill="#1779ba"
                                          />
                                        </svg>
                                      </PlusIcon>
                                    </button>
                                  </StyledComponent>
                                </Styled(styled.button)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.ul>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kgoBCf",
                                    "isStatic": false,
                                    "lastClassName": "HSZXE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                    ],
                                  },
                                  "displayName": "styled.ul",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kgoBCf",
                                  "target": "ul",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ul
                                className="sc-kgoBCf HSZXE"
                              />
                            </StyledComponent>
                          </styled.ul>
                        </section>
                      </StyledComponent>
                    </Styled(styled.section)>
                  </ul>
                </SegmentsContainer>
                <Styled(styled.hr)>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iuJeZd",
                          "isStatic": false,
                          "lastClassName": "hJHFef",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                            "
  margin: 0.7rem 0 1rem;
",
                          ],
                        },
                        "displayName": "Styled(styled.hr)",
                        "foldedComponentIds": Array [
                          "sc-htpNat",
                        ],
                        "render": [Function],
                        "styledComponentId": "sc-iuJeZd",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat sc-iuJeZd hJHFef"
                    />
                  </StyledComponent>
                </Styled(styled.hr)>
                <LayoutJsonEditor>
                  <GenericForm
                    cancellationLabel="Cancel"
                    confirmationLabel="Sign and Submit"
                    dataTesthookId="layout-json-form"
                    initialValues={
                      Object {
                        "layout": "{}",
                      }
                    }
                    isLoading={false}
                    onCancel={[Function]}
                    onSubmit={[Function]}
                    onValidChange={[Function]}
                    permission="READ"
                    schema={
                      Array [
                        Object {
                          "formType": "textArea",
                          "labelValue": "Layout*",
                          "name": "layout",
                        },
                      ]
                    }
                    validate={[Function]}
                  >
                    <Styled(styled.div)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "lastClassName": "emdpGB",
                              "rules": Array [
                                "
  display: flex;
  flex-direction: column;
",
                                "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                              ],
                            },
                            "displayName": "Styled(styled.div)",
                            "foldedComponentIds": Array [
                              "sc-iAyFgw",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-iAyFgw sc-cvbbAY emdpGB"
                        >
                          <form
                            data-testhook-id="layout-json-form"
                            onBlur={[Function]}
                            onSubmit={[Function]}
                          >
                            <FormInput
                              dataTesthookId="layout-json-form-field-0"
                              disabled={true}
                              formType="textArea"
                              height="25rem"
                              innerRef={
                                Object {
                                  "current": <textarea
                                    class="sc-ckVGcZ dzcivS"
                                    data-testhook-id="layout-json-form-field-0"
                                    disabled=""
                                    height="25rem"
                                    name="layout"
                                  >
                                    {}
                                  </textarea>,
                                }
                              }
                              labelValue="Layout*"
                              name="layout"
                              onBlur={[Function]}
                              onChange={[Function]}
                              value="{}"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jKJlTe",
                                        "isStatic": false,
                                        "lastClassName": "cJqkLF",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-jKJlTe",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-jKJlTe cJqkLF"
                                  >
                                    <styled.label>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-kpOJdX",
                                              "isStatic": false,
                                              "lastClassName": "iYzRxv",
                                              "rules": Array [
                                                "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                              ],
                                            },
                                            "displayName": "styled.label",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-kpOJdX",
                                            "target": "label",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <label
                                          className="sc-kpOJdX iYzRxv"
                                        >
                                          Layout*
                                        </label>
                                      </StyledComponent>
                                    </styled.label>
                                    <styled.textarea
                                      data-testhook-id="layout-json-form-field-0"
                                      disabled={true}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value="{}"
                                    >
                                      <StyledComponent
                                        data-testhook-id="layout-json-form-field-0"
                                        disabled={true}
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ckVGcZ",
                                              "isStatic": false,
                                              "lastClassName": "dzcivS",
                                              "rules": Array [
                                                "
  ",
                                                "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                [Function],
                                                ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                [Function],
                                                ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                [Function],
                                                ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.textarea",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ckVGcZ",
                                            "target": "textarea",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={
                                          Object {
                                            "current": <textarea
                                              class="sc-ckVGcZ dzcivS"
                                              data-testhook-id="layout-json-form-field-0"
                                              disabled=""
                                              height="25rem"
                                              name="layout"
                                            >
                                              {}
                                            </textarea>,
                                          }
                                        }
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value="{}"
                                      >
                                        <textarea
                                          className="sc-ckVGcZ dzcivS"
                                          data-testhook-id="layout-json-form-field-0"
                                          disabled={true}
                                          height="25rem"
                                          name="layout"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          value="{}"
                                        />
                                      </StyledComponent>
                                    </styled.textarea>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </FormInput>
                          </form>
                        </div>
                      </StyledComponent>
                    </Styled(styled.div)>
                  </GenericForm>
                </LayoutJsonEditor>
                <LayoutSigner />
                <NoCryptoWarning>
                  <Warning
                    message="The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge"
                  >
                    <styled.section>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bxivhb",
                              "isStatic": false,
                              "lastClassName": "gkDdJM",
                              "rules": Array [
                                "
  display: flex;
  align-items: center;
  border: 1px solid ",
                                [Function],
                                ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
                              ],
                            },
                            "displayName": "styled.section",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bxivhb",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-bxivhb gkDdJM"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-EHOje",
                                    "isStatic": false,
                                    "lastClassName": "jsJNZL",
                                    "rules": Array [
                                      "
  margin: 0 2rem 0 0;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-EHOje",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-EHOje jsJNZL"
                              >
                                <WarningIcon
                                  color="red"
                                  size={48}
                                >
                                  <svg
                                    height={48}
                                    version="1.1"
                                    viewBox="0 0 32 32"
                                    width={48}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <title>
                                      warning
                                    </title>
                                    <path
                                      d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                      fill="red"
                                    />
                                     
                                    <path
                                      d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                      fill="red"
                                    />
                                     
                                    <path
                                      d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                      fill="red"
                                    />
                                  </svg>
                                </WarningIcon>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.p>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-ifAKCX",
                                    "isStatic": false,
                                    "lastClassName": "eBwuLx",
                                    "rules": Array [
                                      "
  color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.p",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-ifAKCX",
                                  "target": "p",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <p
                                className="sc-ifAKCX eBwuLx"
                              >
                                The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge
                              </p>
                            </StyledComponent>
                          </styled.p>
                        </section>
                      </StyledComponent>
                    </styled.section>
                  </Warning>
                </NoCryptoWarning>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <LayoutEditorDetailsPane>
    <Panel
      last={true}
      title="Validation errors"
      width="37.5vw"
    >
      <styled.section
        shrink={false}
        width="37.5vw"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "lmUvuu",
                "rules": Array [
                  "
  flex: ",
                  [Function],
                  ";
  flex-grow: ",
                  [Function],
                  ";
  ",
                  [Function],
                  ";
  max-width: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.section",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "section",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          shrink={false}
          width="37.5vw"
        >
          <section
            className="sc-bZQynM lmUvuu"
            width="37.5vw"
          >
            <styled.header
              last={true}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "fzDpZl",
                      "rules": Array [
                        "
  margin: ",
                        [Function],
                        ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                      ],
                    },
                    "displayName": "styled.header",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "header",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
              >
                <header
                  className="sc-htoDjs fzDpZl"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "jLpowZ",
                            "rules": Array [
                              "
  justify-self: center;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-dnqmqq jLpowZ"
                      >
                        Validation errors
                      </p>
                    </StyledComponent>
                  </styled.p>
                </header>
              </StyledComponent>
            </styled.header>
            <styled.main
              last={true}
              shrink={false}
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gzVnrw",
                      "isStatic": false,
                      "lastClassName": "gKvjmP",
                      "rules": Array [
                        "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                        [Function],
                        ";
  margin: ",
                        [Function],
                        ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                        [Function],
                        ";
  }
",
                      ],
                    },
                    "displayName": "styled.main",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gzVnrw",
                    "target": "main",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                last={true}
                shrink={false}
              >
                <main
                  className="sc-gzVnrw gKvjmP"
                >
                  <NotificationsList
                    notifications={
                      Array [
                        Object {
                          "body": "authorizedKeyIds size must be between 1 and 2147483647",
                          "type": "ERROR",
                        },
                        Object {
                          "body": "expectedEndProducts size must be between 1 and 2147483647",
                          "type": "ERROR",
                        },
                        Object {
                          "body": "keys size must be between 1 and 2147483647",
                          "type": "ERROR",
                        },
                        Object {
                          "body": "layoutSegments size must be between 1 and 2147483647",
                          "type": "ERROR",
                        },
                      ]
                    }
                  >
                    <ul>
                      <li
                        key="0"
                      >
                        <Notification
                          notification="authorizedKeyIds size must be between 1 and 2147483647"
                          type="ERROR"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gisBJw",
                                    "isStatic": false,
                                    "lastClassName": "dYfyKX",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gisBJw",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gisBJw dYfyKX"
                              >
                                <styled.div
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cHGsZl",
                                          "isStatic": false,
                                          "lastClassName": "hYoUoe",
                                          "rules": Array [
                                            "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cHGsZl",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-cHGsZl hYoUoe"
                                      color="red"
                                    >
                                      <WarningIcon
                                        color="#fff"
                                        size={22}
                                      >
                                        <svg
                                          height={22}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={22}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            warning
                                          </title>
                                          <path
                                            d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                            fill="#fff"
                                          />
                                        </svg>
                                      </WarningIcon>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.p
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kjoXOD",
                                          "isStatic": false,
                                          "lastClassName": "UEiOm",
                                          "rules": Array [
                                            "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                          ],
                                        },
                                        "displayName": "styled.p",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kjoXOD",
                                        "target": "p",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <p
                                      className="sc-kjoXOD UEiOm"
                                      color="red"
                                    >
                                      <styled.span
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-TOsTZ",
                                                "isStatic": false,
                                                "lastClassName": "imHBoX",
                                                "rules": Array [
                                                  "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                  [Function],
                                                  ";
  padding-right: 0.5rem;
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-TOsTZ",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-TOsTZ imHBoX"
                                            color="red"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                      authorizedKeyIds size must be between 1 and 2147483647
                                    </p>
                                  </StyledComponent>
                                </styled.p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Notification>
                      </li>
                      <li
                        key="1"
                      >
                        <Notification
                          notification="expectedEndProducts size must be between 1 and 2147483647"
                          type="ERROR"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gisBJw",
                                    "isStatic": false,
                                    "lastClassName": "dYfyKX",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gisBJw",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gisBJw dYfyKX"
                              >
                                <styled.div
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cHGsZl",
                                          "isStatic": false,
                                          "lastClassName": "hYoUoe",
                                          "rules": Array [
                                            "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cHGsZl",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-cHGsZl hYoUoe"
                                      color="red"
                                    >
                                      <WarningIcon
                                        color="#fff"
                                        size={22}
                                      >
                                        <svg
                                          height={22}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={22}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            warning
                                          </title>
                                          <path
                                            d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                            fill="#fff"
                                          />
                                        </svg>
                                      </WarningIcon>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.p
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kjoXOD",
                                          "isStatic": false,
                                          "lastClassName": "UEiOm",
                                          "rules": Array [
                                            "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                          ],
                                        },
                                        "displayName": "styled.p",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kjoXOD",
                                        "target": "p",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <p
                                      className="sc-kjoXOD UEiOm"
                                      color="red"
                                    >
                                      <styled.span
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-TOsTZ",
                                                "isStatic": false,
                                                "lastClassName": "imHBoX",
                                                "rules": Array [
                                                  "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                  [Function],
                                                  ";
  padding-right: 0.5rem;
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-TOsTZ",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-TOsTZ imHBoX"
                                            color="red"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                      expectedEndProducts size must be between 1 and 2147483647
                                    </p>
                                  </StyledComponent>
                                </styled.p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Notification>
                      </li>
                      <li
                        key="2"
                      >
                        <Notification
                          notification="keys size must be between 1 and 2147483647"
                          type="ERROR"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gisBJw",
                                    "isStatic": false,
                                    "lastClassName": "dYfyKX",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gisBJw",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gisBJw dYfyKX"
                              >
                                <styled.div
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cHGsZl",
                                          "isStatic": false,
                                          "lastClassName": "hYoUoe",
                                          "rules": Array [
                                            "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cHGsZl",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-cHGsZl hYoUoe"
                                      color="red"
                                    >
                                      <WarningIcon
                                        color="#fff"
                                        size={22}
                                      >
                                        <svg
                                          height={22}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={22}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            warning
                                          </title>
                                          <path
                                            d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                            fill="#fff"
                                          />
                                        </svg>
                                      </WarningIcon>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.p
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kjoXOD",
                                          "isStatic": false,
                                          "lastClassName": "UEiOm",
                                          "rules": Array [
                                            "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                          ],
                                        },
                                        "displayName": "styled.p",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kjoXOD",
                                        "target": "p",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <p
                                      className="sc-kjoXOD UEiOm"
                                      color="red"
                                    >
                                      <styled.span
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-TOsTZ",
                                                "isStatic": false,
                                                "lastClassName": "imHBoX",
                                                "rules": Array [
                                                  "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                  [Function],
                                                  ";
  padding-right: 0.5rem;
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-TOsTZ",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-TOsTZ imHBoX"
                                            color="red"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                      keys size must be between 1 and 2147483647
                                    </p>
                                  </StyledComponent>
                                </styled.p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Notification>
                      </li>
                      <li
                        key="3"
                      >
                        <Notification
                          notification="layoutSegments size must be between 1 and 2147483647"
                          type="ERROR"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-gisBJw",
                                    "isStatic": false,
                                    "lastClassName": "dYfyKX",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-gisBJw",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-gisBJw dYfyKX"
                              >
                                <styled.div
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-cHGsZl",
                                          "isStatic": false,
                                          "lastClassName": "hYoUoe",
                                          "rules": Array [
                                            "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                            [Function],
                                            ";
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-cHGsZl",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-cHGsZl hYoUoe"
                                      color="red"
                                    >
                                      <WarningIcon
                                        color="#fff"
                                        size={22}
                                      >
                                        <svg
                                          height={22}
                                          version="1.1"
                                          viewBox="0 0 32 32"
                                          width={22}
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <title>
                                            warning
                                          </title>
                                          <path
                                            d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                            fill="#fff"
                                          />
                                           
                                          <path
                                            d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                            fill="#fff"
                                          />
                                        </svg>
                                      </WarningIcon>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.p
                                  color="red"
                                >
                                  <StyledComponent
                                    color="red"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-kjoXOD",
                                          "isStatic": false,
                                          "lastClassName": "UEiOm",
                                          "rules": Array [
                                            "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                          ],
                                        },
                                        "displayName": "styled.p",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-kjoXOD",
                                        "target": "p",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <p
                                      className="sc-kjoXOD UEiOm"
                                      color="red"
                                    >
                                      <styled.span
                                        color="red"
                                      >
                                        <StyledComponent
                                          color="red"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-TOsTZ",
                                                "isStatic": false,
                                                "lastClassName": "imHBoX",
                                                "rules": Array [
                                                  "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                  [Function],
                                                  ";
  padding-right: 0.5rem;
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-TOsTZ",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-TOsTZ imHBoX"
                                            color="red"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                      layoutSegments size must be between 1 and 2147483647
                                    </p>
                                  </StyledComponent>
                                </styled.p>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Notification>
                      </li>
                    </ul>
                  </NotificationsList>
                </main>
              </StyledComponent>
            </styled.main>
          </section>
        </StyledComponent>
      </styled.section>
    </Panel>
  </LayoutEditorDetailsPane>
</ManageLayoutPanel>
`;
