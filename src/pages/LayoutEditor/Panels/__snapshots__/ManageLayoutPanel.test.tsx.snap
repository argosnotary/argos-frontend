// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly with existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-hMqMXs fatvBW"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jnyPyM",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-kkGfuU jnyPyM"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ cSOUui"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <GenericForm
                  cancellationLabel="Cancel"
                  confirmationLabel="Sign and Submit"
                  initialValues={
                    Object {
                      "layout": "{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": []
}",
                    }
                  }
                  isLoading={false}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  permission="EDIT"
                  schema={
                    Array [
                      Object {
                        "formType": "textArea",
                        "labelValue": "Layout*",
                        "name": "layout",
                      },
                    ]
                  }
                  validate={[Function]}
                >
                  <Styled(styled.div)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "jNQHJE",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
",
                              "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                            ],
                          },
                          "displayName": "Styled(styled.div)",
                          "foldedComponentIds": Array [
                            "sc-VigVT",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-VigVT sc-jzJRlG jNQHJE"
                      >
                        <form
                          onSubmit={[Function]}
                        >
                          <FormInput
                            disabled={false}
                            formType="textArea"
                            height="25rem"
                            labelValue="Layout*"
                            name="layout"
                            onBlur={[Function]}
                            onInput={[Function]}
                            value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": []
}"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gzVnrw",
                                      "isStatic": false,
                                      "lastClassName": "kvhoeX",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gzVnrw",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-gzVnrw kvhoeX"
                                >
                                  <styled.label>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "jaSwOJ",
                                            "rules": Array [
                                              "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                            ],
                                          },
                                          "displayName": "styled.label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="sc-ifAKCX jaSwOJ"
                                      >
                                        Layout*
                                      </label>
                                    </StyledComponent>
                                  </styled.label>
                                  <styled.textarea
                                    disabled={false}
                                    height="25rem"
                                    name="layout"
                                    onBlur={[Function]}
                                    onInput={[Function]}
                                    value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": []
}"
                                  >
                                    <StyledComponent
                                      disabled={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bZQynM",
                                            "isStatic": false,
                                            "lastClassName": "iBrmMe",
                                            "rules": Array [
                                              "
  ",
                                              "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                              [Function],
                                              ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                              [Function],
                                              ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                              [Function],
                                              ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.textarea",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bZQynM",
                                          "target": "textarea",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onInput={[Function]}
                                      value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": []
}"
                                    >
                                      <textarea
                                        className="sc-bZQynM iBrmMe"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onInput={[Function]}
                                        value="{
  \\"authorizedKeyIds\\": [],
  \\"expectedEndProducts\\": [],
  \\"keys\\": [],
  \\"layoutSegments\\": []
}"
                                      />
                                    </StyledComponent>
                                  </styled.textarea>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </FormInput>
                          <styled.hr>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "dfMPxs",
                                    "rules": Array [
                                      "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.hr",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "hr",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <hr
                                className="sc-htpNat dfMPxs"
                              />
                            </StyledComponent>
                          </styled.hr>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jTzLTM",
                                    "isStatic": false,
                                    "lastClassName": "kEHRvE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jTzLTM",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jTzLTM kEHRvE"
                              >
                                <LoaderButton
                                  buttonType="submit"
                                  loading={false}
                                >
                                  <styled.button
                                    type="submit"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "hxFUxa",
                                            "rules": Array [
                                              "
  ",
                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
",
                                            ],
                                          },
                                          "displayName": "styled.button",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      type="submit"
                                    >
                                      <button
                                        className="sc-dnqmqq hxFUxa"
                                        type="submit"
                                      >
                                        Sign and Submit
                                      </button>
                                    </StyledComponent>
                                  </styled.button>
                                </LoaderButton>
                                <Styled(Styled(styled.button))
                                  data-testhook="cancel-button"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <StyledComponent
                                    data-testhook="cancel-button"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-fjdhpX",
                                          "isStatic": false,
                                          "lastClassName": "fEyguh",
                                          "rules": Array [
                                            "
  ",
                                            "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
",
                                            "
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  border: 1px solid ",
                                            [Function],
                                            ";

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    color: ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
  margin-left: 1rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(styled.button))",
                                        "foldedComponentIds": Array [
                                          "sc-dnqmqq",
                                          "sc-gqjmRU",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-fjdhpX",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="sc-dnqmqq sc-gqjmRU sc-fjdhpX fEyguh"
                                      data-testhook="cancel-button"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Cancel
                                    </button>
                                  </StyledComponent>
                                </Styled(Styled(styled.button))>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </form>
                      </div>
                    </StyledComponent>
                  </Styled(styled.div)>
                </GenericForm>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <Panel
    last={true}
    title=""
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header
            last={true}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
            >
              <header
                className="sc-hMqMXs eOyAbK"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    />
                  </StyledComponent>
                </styled.p>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            last={true}
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ ecDmnM"
              >
                <NotificationsList
                  notifications={Array []}
                >
                  <ul />
                </NotificationsList>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
</ManageLayoutPanel>
`;

exports[`renders correctly with existing layout without crypto support 1`] = `
<NoCryptoWarning>
  <Warning
    message="The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge"
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kpOJdX",
              "isStatic": false,
              "lastClassName": "kUNWdS",
              "rules": Array [
                "
  display: flex;
  align-items: center;
  border: 1px solid ",
                [Function],
                ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kpOJdX",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-kpOJdX kUNWdS"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ckVGcZ",
                    "isStatic": false,
                    "lastClassName": "dbPkiQ",
                    "rules": Array [
                      "
  margin: 0 2rem 0 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ckVGcZ",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-ckVGcZ dbPkiQ"
              >
                <WarningIcon
                  color="red"
                  size={48}
                >
                  <svg
                    height={48}
                    version="1.1"
                    viewBox="0 0 32 32"
                    width={48}
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <title>
                      warning
                    </title>
                    <path
                      d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                      fill="red"
                    />
                     
                    <path
                      d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                      fill="red"
                    />
                     
                    <path
                      d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                      fill="red"
                    />
                  </svg>
                </WarningIcon>
              </div>
            </StyledComponent>
          </styled.div>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-dxgOiQ",
                    "isStatic": false,
                    "lastClassName": "goaGPw",
                    "rules": Array [
                      "
  color: ",
                      [Function],
                      ";
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-dxgOiQ",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-dxgOiQ goaGPw"
              >
                The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge
              </p>
            </StyledComponent>
          </styled.p>
        </section>
      </StyledComponent>
    </styled.section>
  </Warning>
</NoCryptoWarning>
`;

exports[`renders correctly with non existing layout 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-hMqMXs fatvBW"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jnyPyM",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-kkGfuU jnyPyM"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ cSOUui"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <GenericForm
                  cancellationLabel="Cancel"
                  confirmationLabel="Sign and Submit"
                  initialValues={Object {}}
                  isLoading={false}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  permission="EDIT"
                  schema={
                    Array [
                      Object {
                        "formType": "textArea",
                        "labelValue": "Layout*",
                        "name": "layout",
                      },
                    ]
                  }
                  validate={[Function]}
                >
                  <Styled(styled.div)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "jNQHJE",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
",
                              "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                            ],
                          },
                          "displayName": "Styled(styled.div)",
                          "foldedComponentIds": Array [
                            "sc-VigVT",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-VigVT sc-jzJRlG jNQHJE"
                      >
                        <form
                          onSubmit={[Function]}
                        >
                          <FormInput
                            disabled={false}
                            formType="textArea"
                            height="25rem"
                            labelValue="Layout*"
                            name="layout"
                            onBlur={[Function]}
                            onInput={[Function]}
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gzVnrw",
                                      "isStatic": false,
                                      "lastClassName": "kvhoeX",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gzVnrw",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-gzVnrw kvhoeX"
                                >
                                  <styled.label>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "jaSwOJ",
                                            "rules": Array [
                                              "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                            ],
                                          },
                                          "displayName": "styled.label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="sc-ifAKCX jaSwOJ"
                                      >
                                        Layout*
                                      </label>
                                    </StyledComponent>
                                  </styled.label>
                                  <styled.textarea
                                    disabled={false}
                                    height="25rem"
                                    name="layout"
                                    onBlur={[Function]}
                                    onInput={[Function]}
                                  >
                                    <StyledComponent
                                      disabled={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bZQynM",
                                            "isStatic": false,
                                            "lastClassName": "iBrmMe",
                                            "rules": Array [
                                              "
  ",
                                              "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                              [Function],
                                              ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                              [Function],
                                              ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                              [Function],
                                              ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.textarea",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bZQynM",
                                          "target": "textarea",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onInput={[Function]}
                                    >
                                      <textarea
                                        className="sc-bZQynM iBrmMe"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onInput={[Function]}
                                      />
                                    </StyledComponent>
                                  </styled.textarea>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </FormInput>
                          <styled.hr>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "dfMPxs",
                                    "rules": Array [
                                      "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.hr",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "hr",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <hr
                                className="sc-htpNat dfMPxs"
                              />
                            </StyledComponent>
                          </styled.hr>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jTzLTM",
                                    "isStatic": false,
                                    "lastClassName": "kEHRvE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jTzLTM",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jTzLTM kEHRvE"
                              >
                                <LoaderButton
                                  buttonType="submit"
                                  loading={false}
                                >
                                  <styled.button
                                    type="submit"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "hxFUxa",
                                            "rules": Array [
                                              "
  ",
                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
",
                                            ],
                                          },
                                          "displayName": "styled.button",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      type="submit"
                                    >
                                      <button
                                        className="sc-dnqmqq hxFUxa"
                                        type="submit"
                                      >
                                        Sign and Submit
                                      </button>
                                    </StyledComponent>
                                  </styled.button>
                                </LoaderButton>
                                <Styled(Styled(styled.button))
                                  data-testhook="cancel-button"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <StyledComponent
                                    data-testhook="cancel-button"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-fjdhpX",
                                          "isStatic": false,
                                          "lastClassName": "fEyguh",
                                          "rules": Array [
                                            "
  ",
                                            "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
",
                                            "
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  border: 1px solid ",
                                            [Function],
                                            ";

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    color: ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
  margin-left: 1rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(styled.button))",
                                        "foldedComponentIds": Array [
                                          "sc-dnqmqq",
                                          "sc-gqjmRU",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-fjdhpX",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="sc-dnqmqq sc-gqjmRU sc-fjdhpX fEyguh"
                                      data-testhook="cancel-button"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Cancel
                                    </button>
                                  </StyledComponent>
                                </Styled(Styled(styled.button))>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </form>
                      </div>
                    </StyledComponent>
                  </Styled(styled.div)>
                </GenericForm>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <Panel
    last={true}
    title=""
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header
            last={true}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
            >
              <header
                className="sc-hMqMXs eOyAbK"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    />
                  </StyledComponent>
                </styled.p>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            last={true}
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ ecDmnM"
              >
                <NotificationsList
                  notifications={Array []}
                >
                  <ul />
                </NotificationsList>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
</ManageLayoutPanel>
`;

exports[`sign layout happy flow 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-hMqMXs fatvBW"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jnyPyM",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-kkGfuU jnyPyM"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ cSOUui"
              >
                <styled.section>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-cSHVUG",
                          "isStatic": false,
                          "lastClassName": "enUoMp",
                          "rules": Array [
                            "
  background: ",
                            [Function],
                            ";
  padding: 1rem 2rem;
  width: 30rem;
  position: absolute;
  top: 33%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 4;
  min-height: 10rem;
  display: flex;
  align-items: stretch;
  justify-content: center;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
",
                          ],
                        },
                        "displayName": "styled.section",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-cSHVUG",
                        "target": "section",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <section
                      className="sc-cSHVUG enUoMp"
                    >
                      <Styled(styled.div)>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-kAzzGY",
                                "isStatic": false,
                                "lastClassName": "jnBvLK",
                                "rules": Array [
                                  "
  display: flex;
  flex-direction: column;
",
                                  "
  display: flex;
  flex: 1;
  align-items: center;
",
                                ],
                              },
                              "displayName": "Styled(styled.div)",
                              "foldedComponentIds": Array [
                                "sc-VigVT",
                              ],
                              "render": [Function],
                              "styledComponentId": "sc-kAzzGY",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <div
                            className="sc-VigVT sc-kAzzGY jnBvLK"
                          >
                            <styled.main>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-chPdSV",
                                      "isStatic": false,
                                      "lastClassName": "nKroZ",
                                      "rules": Array [
                                        "
  display: flex;
  flex: 1;
  width: 100%;
  justify-content: center;
  align-items: center;
",
                                      ],
                                    },
                                    "displayName": "styled.main",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-chPdSV",
                                    "target": "main",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <main
                                  className="sc-chPdSV nKroZ"
                                >
                                  <GenericForm
                                    cancellationLabel="Cancel"
                                    confirmationLabel="Confirm"
                                    initialValues={
                                      Object {
                                        "passphrase": "",
                                      }
                                    }
                                    onCancel={[Function]}
                                    onSubmit={[Function]}
                                    permission="EDIT"
                                    schema={
                                      Array [
                                        Object {
                                          "formType": "password",
                                          "labelValue": "Passphrase*",
                                          "name": "passphrase",
                                        },
                                      ]
                                    }
                                    validate={[Function]}
                                  >
                                    <Styled(styled.div)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jzJRlG",
                                              "isStatic": false,
                                              "lastClassName": "jNQHJE",
                                              "rules": Array [
                                                "
  display: flex;
  flex-direction: column;
",
                                                "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.div)",
                                            "foldedComponentIds": Array [
                                              "sc-VigVT",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-jzJRlG",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-VigVT sc-jzJRlG jNQHJE"
                                        >
                                          <form
                                            onSubmit={[Function]}
                                          >
                                            <FormInput
                                              disabled={false}
                                              formType="password"
                                              labelValue="Passphrase*"
                                              name="passphrase"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              value=""
                                            >
                                              <styled.div>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-EHOje",
                                                        "isStatic": false,
                                                        "lastClassName": "fpqoIO",
                                                        "rules": Array [
                                                          "
  display: flex;
  flex-direction: column;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-EHOje",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <div
                                                    className="sc-EHOje fpqoIO"
                                                  >
                                                    <styled.label>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-ifAKCX",
                                                              "isStatic": false,
                                                              "lastClassName": "jaSwOJ",
                                                              "rules": Array [
                                                                "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.label",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-ifAKCX",
                                                            "target": "label",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <label
                                                          className="sc-ifAKCX jaSwOJ"
                                                        >
                                                          Passphrase*
                                                        </label>
                                                      </StyledComponent>
                                                    </styled.label>
                                                    <styled.input
                                                      disabled={false}
                                                      name="passphrase"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      type="password"
                                                      value=""
                                                    >
                                                      <StyledComponent
                                                        disabled={false}
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-bxivhb",
                                                              "isStatic": false,
                                                              "lastClassName": "cYDNzg",
                                                              "rules": Array [
                                                                "
  ",
                                                                "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                                                [Function],
                                                                ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                                                [Function],
                                                                ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                                                [Function],
                                                                ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                                                "
",
                                                              ],
                                                            },
                                                            "displayName": "styled.input",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-bxivhb",
                                                            "target": "input",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        name="passphrase"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        type="password"
                                                        value=""
                                                      >
                                                        <input
                                                          className="sc-bxivhb cYDNzg"
                                                          disabled={false}
                                                          name="passphrase"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          type="password"
                                                          value=""
                                                        />
                                                      </StyledComponent>
                                                    </styled.input>
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </FormInput>
                                            <styled.hr>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-htpNat",
                                                      "isStatic": false,
                                                      "lastClassName": "dfMPxs",
                                                      "rules": Array [
                                                        "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                                        [Function],
                                                        ";
",
                                                      ],
                                                    },
                                                    "displayName": "styled.hr",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-htpNat",
                                                    "target": "hr",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <hr
                                                  className="sc-htpNat dfMPxs"
                                                />
                                              </StyledComponent>
                                            </styled.hr>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-jTzLTM",
                                                      "isStatic": false,
                                                      "lastClassName": "kEHRvE",
                                                      "rules": Array [
                                                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                        [Function],
                                                        ";
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-jTzLTM",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-jTzLTM kEHRvE"
                                                >
                                                  <LoaderButton
                                                    buttonType="submit"
                                                  >
                                                    <styled.button
                                                      type="submit"
                                                    >
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-dnqmqq",
                                                              "isStatic": false,
                                                              "lastClassName": "hxFUxa",
                                                              "rules": Array [
                                                                "
  ",
                                                                "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                                [Function],
                                                                ";
  color: ",
                                                                [Function],
                                                                ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                                [Function],
                                                                ";
    cursor: pointer;
  }
",
                                                                "
",
                                                              ],
                                                            },
                                                            "displayName": "styled.button",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-dnqmqq",
                                                            "target": "button",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        type="submit"
                                                      >
                                                        <button
                                                          className="sc-dnqmqq hxFUxa"
                                                          type="submit"
                                                        >
                                                          Confirm
                                                        </button>
                                                      </StyledComponent>
                                                    </styled.button>
                                                  </LoaderButton>
                                                  <Styled(Styled(styled.button))
                                                    data-testhook="cancel-button"
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <StyledComponent
                                                      data-testhook="cancel-button"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-fjdhpX",
                                                            "isStatic": false,
                                                            "lastClassName": "fEyguh",
                                                            "rules": Array [
                                                              "
  ",
                                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                                              [Function],
                                                              ";
  color: ",
                                                              [Function],
                                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                                              [Function],
                                                              ";
    cursor: pointer;
  }
",
                                                              "
",
                                                              "
  background-color: ",
                                                              [Function],
                                                              ";
  color: ",
                                                              [Function],
                                                              ";
  border: 1px solid ",
                                                              [Function],
                                                              ";

  &:hover {
    background-color: ",
                                                              [Function],
                                                              ";
    color: ",
                                                              [Function],
                                                              ";
    border: 1px solid ",
                                                              [Function],
                                                              ";
    cursor: pointer;
  }
",
                                                              "
  margin-left: 1rem;
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(Styled(styled.button))",
                                                          "foldedComponentIds": Array [
                                                            "sc-dnqmqq",
                                                            "sc-gqjmRU",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-fjdhpX",
                                                          "target": "button",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <button
                                                        className="sc-dnqmqq sc-gqjmRU sc-fjdhpX fEyguh"
                                                        data-testhook="cancel-button"
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        Cancel
                                                      </button>
                                                    </StyledComponent>
                                                  </Styled(Styled(styled.button))>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </Styled(styled.div)>
                                  </GenericForm>
                                </main>
                              </StyledComponent>
                            </styled.main>
                            <styled.footer>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kGXeez",
                                      "isStatic": false,
                                      "lastClassName": "ftmtAq",
                                      "rules": Array [
                                        "
  width: 100%;
  text-align: center;
",
                                      ],
                                    },
                                    "displayName": "styled.footer",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kGXeez",
                                    "target": "footer",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <footer
                                  className="sc-kGXeez ftmtAq"
                                />
                              </StyledComponent>
                            </styled.footer>
                          </div>
                        </StyledComponent>
                      </Styled(styled.div)>
                    </section>
                  </StyledComponent>
                </styled.section>
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <GenericForm
                  cancellationLabel="Cancel"
                  confirmationLabel="Sign and Submit"
                  initialValues={
                    Object {
                      "layout": "{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}",
                    }
                  }
                  isLoading={false}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  permission="EDIT"
                  schema={
                    Array [
                      Object {
                        "formType": "textArea",
                        "labelValue": "Layout*",
                        "name": "layout",
                      },
                    ]
                  }
                  validate={[Function]}
                >
                  <Styled(styled.div)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "jNQHJE",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
",
                              "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                            ],
                          },
                          "displayName": "Styled(styled.div)",
                          "foldedComponentIds": Array [
                            "sc-VigVT",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-VigVT sc-jzJRlG jNQHJE"
                      >
                        <form
                          onSubmit={[Function]}
                        >
                          <FormInput
                            disabled={false}
                            formType="textArea"
                            height="25rem"
                            labelValue="Layout*"
                            name="layout"
                            onBlur={[Function]}
                            onInput={[Function]}
                            value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gzVnrw",
                                      "isStatic": false,
                                      "lastClassName": "kvhoeX",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gzVnrw",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-gzVnrw kvhoeX"
                                >
                                  <styled.label>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "jaSwOJ",
                                            "rules": Array [
                                              "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                            ],
                                          },
                                          "displayName": "styled.label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="sc-ifAKCX jaSwOJ"
                                      >
                                        Layout*
                                      </label>
                                    </StyledComponent>
                                  </styled.label>
                                  <styled.textarea
                                    disabled={false}
                                    height="25rem"
                                    name="layout"
                                    onBlur={[Function]}
                                    onInput={[Function]}
                                    value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                  >
                                    <StyledComponent
                                      disabled={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bZQynM",
                                            "isStatic": false,
                                            "lastClassName": "iBrmMe",
                                            "rules": Array [
                                              "
  ",
                                              "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                              [Function],
                                              ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                              [Function],
                                              ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                              [Function],
                                              ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.textarea",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bZQynM",
                                          "target": "textarea",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onInput={[Function]}
                                      value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                    >
                                      <textarea
                                        className="sc-bZQynM iBrmMe"
                                        disabled={false}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onInput={[Function]}
                                        value="{\\"keys\\":[],\\"authorizedKeyIds\\":[],\\"expectedEndProducts\\":[],\\"layoutSegments\\":[]}"
                                      />
                                    </StyledComponent>
                                  </styled.textarea>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </FormInput>
                          <styled.hr>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htpNat",
                                    "isStatic": false,
                                    "lastClassName": "dfMPxs",
                                    "rules": Array [
                                      "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.hr",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htpNat",
                                  "target": "hr",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <hr
                                className="sc-htpNat dfMPxs"
                              />
                            </StyledComponent>
                          </styled.hr>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jTzLTM",
                                    "isStatic": false,
                                    "lastClassName": "kEHRvE",
                                    "rules": Array [
                                      "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jTzLTM",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-jTzLTM kEHRvE"
                              >
                                <LoaderButton
                                  buttonType="submit"
                                  loading={false}
                                >
                                  <styled.button
                                    type="submit"
                                  >
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-dnqmqq",
                                            "isStatic": false,
                                            "lastClassName": "hxFUxa",
                                            "rules": Array [
                                              "
  ",
                                              "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                              [Function],
                                              ";
  color: ",
                                              [Function],
                                              ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    cursor: pointer;
  }
",
                                              "
",
                                            ],
                                          },
                                          "displayName": "styled.button",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-dnqmqq",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      type="submit"
                                    >
                                      <button
                                        className="sc-dnqmqq hxFUxa"
                                        type="submit"
                                      >
                                        Sign and Submit
                                      </button>
                                    </StyledComponent>
                                  </styled.button>
                                </LoaderButton>
                                <Styled(Styled(styled.button))
                                  data-testhook="cancel-button"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <StyledComponent
                                    data-testhook="cancel-button"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-fjdhpX",
                                          "isStatic": false,
                                          "lastClassName": "fEyguh",
                                          "rules": Array [
                                            "
  ",
                                            "
  display: inline-block;
  vertical-align: middle;
  margin: 0 0 1rem 0;
  line-height: 1;
  padding: 0.8rem 1rem;
  border: 1px solid transparent;
  text-align: center;
  font-size: 0.9rem;
  font-family: inherit;
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  outline: 0;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
",
                                            "
  background-color: ",
                                            [Function],
                                            ";
  color: ",
                                            [Function],
                                            ";
  border: 1px solid ",
                                            [Function],
                                            ";

  &:hover {
    background-color: ",
                                            [Function],
                                            ";
    color: ",
                                            [Function],
                                            ";
    border: 1px solid ",
                                            [Function],
                                            ";
    cursor: pointer;
  }
",
                                            "
  margin-left: 1rem;
",
                                          ],
                                        },
                                        "displayName": "Styled(Styled(styled.button))",
                                        "foldedComponentIds": Array [
                                          "sc-dnqmqq",
                                          "sc-gqjmRU",
                                        ],
                                        "render": [Function],
                                        "styledComponentId": "sc-fjdhpX",
                                        "target": "button",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="sc-dnqmqq sc-gqjmRU sc-fjdhpX fEyguh"
                                      data-testhook="cancel-button"
                                      onClick={[Function]}
                                      type="button"
                                    >
                                      Cancel
                                    </button>
                                  </StyledComponent>
                                </Styled(Styled(styled.button))>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </form>
                      </div>
                    </StyledComponent>
                  </Styled(styled.div)>
                </GenericForm>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <Panel
    last={true}
    title=""
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header
            last={true}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
            >
              <header
                className="sc-hMqMXs eOyAbK"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    />
                  </StyledComponent>
                </styled.p>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            last={true}
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ ecDmnM"
              >
                <NotificationsList
                  notifications={Array []}
                >
                  <ul />
                </NotificationsList>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
</ManageLayoutPanel>
`;

exports[`validates a faulty layout and returns errors 1`] = `
<ManageLayoutPanel>
  <Panel
    resizable={true}
    title="Manage layout"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <header
                className="sc-hMqMXs fatvBW"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    >
                      Manage layout
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.div
                  onClick={[Function]}
                  shrink={false}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jnyPyM",
                          "rules": Array [
                            "
  padding: ",
                            [Function],
                            ";
  display: flex;

  &:hover {
    cursor: pointer;
  }

  > svg:hover {
    fill-opacity: 0.8;
  }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                    shrink={false}
                  >
                    <div
                      className="sc-kkGfuU jnyPyM"
                      onClick={[Function]}
                    >
                      <ShrinkIcon
                        color="#1779ba"
                        size={16}
                      >
                        <svg
                          height={16}
                          version="1.1"
                          viewBox="0 0 32 32"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M14 18v13l-5-5-6 6-3-3 6-6-5-5zM32 3l-6 6 5 5h-13v-13l5 5 6-6z"
                            fill="#1779ba"
                          />
                        </svg>
                      </ShrinkIcon>
                    </div>
                  </StyledComponent>
                </styled.div>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ cSOUui"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "dBcMBO",
                          "rules": Array [
                            "
  font-style: italic;
  font-size: 0.8rem;
  margin: 0.2rem;
  color: ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-bdVaJa dBcMBO"
                    >
                      Selected: 
                      label / 
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": false,
                                "lastClassName": "kRrzIn",
                                "rules": Array [
                                  "
  color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="sc-bwzfXH kRrzIn"
                          >
                             / 
                            layout
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </p>
                  </StyledComponent>
                </styled.p>
                <styled.hr>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "dfMPxs",
                          "rules": Array [
                            "
  padding: 0;
  margin: 0 0 1rem;
  border: 0;
  border-bottom: 1px solid
    ",
                            [Function],
                            ";
",
                          ],
                        },
                        "displayName": "styled.hr",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "hr",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <hr
                      className="sc-htpNat dfMPxs"
                    />
                  </StyledComponent>
                </styled.hr>
                <GenericForm
                  cancellationLabel="Cancel"
                  confirmationLabel="Sign and Submit"
                  initialValues={Object {}}
                  isLoading={false}
                  onCancel={[Function]}
                  onSubmit={[Function]}
                  permission="READ"
                  schema={
                    Array [
                      Object {
                        "formType": "textArea",
                        "labelValue": "Layout*",
                        "name": "layout",
                      },
                    ]
                  }
                  validate={[Function]}
                >
                  <Styled(styled.div)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jzJRlG",
                            "isStatic": false,
                            "lastClassName": "jNQHJE",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
",
                              "
  display: flex;
  flex-direction: column;
  width: 100%;
",
                            ],
                          },
                          "displayName": "Styled(styled.div)",
                          "foldedComponentIds": Array [
                            "sc-VigVT",
                          ],
                          "render": [Function],
                          "styledComponentId": "sc-jzJRlG",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-VigVT sc-jzJRlG jNQHJE"
                      >
                        <form
                          onSubmit={[Function]}
                        >
                          <FormInput
                            disabled={true}
                            formType="textArea"
                            height="25rem"
                            labelValue="Layout*"
                            name="layout"
                            onBlur={[Function]}
                            onInput={[Function]}
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-gzVnrw",
                                      "isStatic": false,
                                      "lastClassName": "kvhoeX",
                                      "rules": Array [
                                        "
  display: flex;
  flex-direction: column;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-gzVnrw",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-gzVnrw kvhoeX"
                                >
                                  <styled.label>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ifAKCX",
                                            "isStatic": false,
                                            "lastClassName": "jaSwOJ",
                                            "rules": Array [
                                              "
  font-size: 0.875rem;
  font-weight: normal;
  line-height: 1.8;
  color: #0a0a0a;
",
                                            ],
                                          },
                                          "displayName": "styled.label",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ifAKCX",
                                          "target": "label",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <label
                                        className="sc-ifAKCX jaSwOJ"
                                      >
                                        Layout*
                                      </label>
                                    </StyledComponent>
                                  </styled.label>
                                  <styled.textarea
                                    disabled={true}
                                    height="25rem"
                                    name="layout"
                                    onBlur={[Function]}
                                    onInput={[Function]}
                                  >
                                    <StyledComponent
                                      disabled={true}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bZQynM",
                                            "isStatic": false,
                                            "lastClassName": "ifPtDs",
                                            "rules": Array [
                                              "
  ",
                                              "
  overflow: visible;
  box-sizing: border-box;
  height: ",
                                              [Function],
                                              ";
  margin: 0 0 1rem;
  padding: 0.5rem;
  border: 1px solid #cacaca;
  border-radius: 0;
  background-color: ",
                                              [Function],
                                              ";
  box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.1);
  font-family: inherit;
  font-size: 1rem;
  font-weight: normal;
  line-height: 1.5;
  color: #0a0a0a;
  transition: box-shadow 0.5s, border-color 0.25s ease-in-out,
    -webkit-box-shadow 0.5s;

  &:hover {
    cursor: ",
                                              [Function],
                                              ";
  }

  &:focus {
    outline: none;
    border: 1px solid #8a8a8a;
    box-shadow: 0 0 5px #cacaca;
  }
",
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.textarea",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bZQynM",
                                          "target": "textarea",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      height="25rem"
                                      name="layout"
                                      onBlur={[Function]}
                                      onInput={[Function]}
                                    >
                                      <textarea
                                        className="sc-bZQynM ifPtDs"
                                        disabled={true}
                                        height="25rem"
                                        name="layout"
                                        onBlur={[Function]}
                                        onInput={[Function]}
                                      />
                                    </StyledComponent>
                                  </styled.textarea>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </FormInput>
                        </form>
                      </div>
                    </StyledComponent>
                  </Styled(styled.div)>
                </GenericForm>
                <NoCryptoWarning>
                  <Warning
                    message="The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge"
                  >
                    <styled.section>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-kpOJdX",
                              "isStatic": false,
                              "lastClassName": "kUNWdS",
                              "rules": Array [
                                "
  display: flex;
  align-items: center;
  border: 1px solid ",
                                [Function],
                                ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
                              ],
                            },
                            "displayName": "styled.section",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-kpOJdX",
                            "target": "section",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <section
                          className="sc-kpOJdX kUNWdS"
                        >
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-ckVGcZ",
                                    "isStatic": false,
                                    "lastClassName": "dbPkiQ",
                                    "rules": Array [
                                      "
  margin: 0 2rem 0 0;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-ckVGcZ",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-ckVGcZ dbPkiQ"
                              >
                                <WarningIcon
                                  color="red"
                                  size={48}
                                >
                                  <svg
                                    height={48}
                                    version="1.1"
                                    viewBox="0 0 32 32"
                                    width={48}
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <title>
                                      warning
                                    </title>
                                    <path
                                      d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                      fill="red"
                                    />
                                     
                                    <path
                                      d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                      fill="red"
                                    />
                                     
                                    <path
                                      d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                      fill="red"
                                    />
                                  </svg>
                                </WarningIcon>
                              </div>
                            </StyledComponent>
                          </styled.div>
                          <styled.p>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-dxgOiQ",
                                    "isStatic": false,
                                    "lastClassName": "goaGPw",
                                    "rules": Array [
                                      "
  color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "displayName": "styled.p",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-dxgOiQ",
                                  "target": "p",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <p
                                className="sc-dxgOiQ goaGPw"
                              >
                                The web crypto api is not present in the browser your using. Argos Notary is only supported by a recent version of Chrome, Firefox, Safari or Edge
                              </p>
                            </StyledComponent>
                          </styled.p>
                        </section>
                      </StyledComponent>
                    </styled.section>
                  </Warning>
                </NoCryptoWarning>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
  <Panel
    last={true}
    title="Validation errors"
    width="37.5vw"
  >
    <styled.section
      shrink={false}
      width="37.5vw"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-jKJlTe",
              "isStatic": false,
              "lastClassName": "kgYnza",
              "rules": Array [
                "
  flex: ",
                [Function],
                ";
  flex-grow: ",
                [Function],
                ";
  ",
                [Function],
                ";
  max-width: ",
                [Function],
                ";
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-jKJlTe",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        shrink={false}
        width="37.5vw"
      >
        <section
          className="sc-jKJlTe kgYnza"
          width="37.5vw"
        >
          <styled.header
            last={true}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-hMqMXs",
                    "isStatic": false,
                    "lastClassName": "eOyAbK",
                    "rules": Array [
                      "
  margin: ",
                      [Function],
                      ";
  padding: 0.5rem 1rem;
  background-color: #fff;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 2.5rem;
  font-weight: bolder;
",
                    ],
                  },
                  "displayName": "styled.header",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-hMqMXs",
                  "target": "header",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
            >
              <header
                className="sc-hMqMXs eOyAbK"
              >
                <styled.p>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kEYyzF",
                          "isStatic": false,
                          "lastClassName": "bwpSFX",
                          "rules": Array [
                            "
  justify-self: center;
",
                          ],
                        },
                        "displayName": "styled.p",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kEYyzF",
                        "target": "p",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <p
                      className="sc-kEYyzF bwpSFX"
                    >
                      Validation errors
                    </p>
                  </StyledComponent>
                </styled.p>
              </header>
            </StyledComponent>
          </styled.header>
          <styled.main
            last={true}
            shrink={false}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-eNQAEJ",
                    "isStatic": false,
                    "lastClassName": "ecDmnM",
                    "rules": Array [
                      "
  overflow-y: auto;
  height: calc(100vh - 7.7rem);
  background-color: ",
                      [Function],
                      ";
  margin: ",
                      [Function],
                      ";
  padding: 1rem;
  display: flex;
  flex-direction: column;

  > * {
    display: ",
                      [Function],
                      ";
  }
",
                    ],
                  },
                  "displayName": "styled.main",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-eNQAEJ",
                  "target": "main",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              last={true}
              shrink={false}
            >
              <main
                className="sc-eNQAEJ ecDmnM"
              >
                <NotificationsList
                  notifications={
                    Array [
                      Object {
                        "body": "authorizedKeyIds size must be between 1 and 2147483647",
                        "type": "ERROR",
                      },
                      Object {
                        "body": "expectedEndProducts size must be between 1 and 2147483647",
                        "type": "ERROR",
                      },
                      Object {
                        "body": "keys size must be between 1 and 2147483647",
                        "type": "ERROR",
                      },
                      Object {
                        "body": "layoutSegments size must be between 1 and 2147483647",
                        "type": "ERROR",
                      },
                    ]
                  }
                >
                  <ul>
                    <li
                      key="0"
                    >
                      <Notification
                        notification="authorizedKeyIds size must be between 1 and 2147483647"
                        type="ERROR"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hSdWYo",
                                  "isStatic": false,
                                  "lastClassName": "dKbfDW",
                                  "rules": Array [
                                    "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hSdWYo",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hSdWYo dKbfDW"
                            >
                              <styled.div
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cvbbAY",
                                        "isStatic": false,
                                        "lastClassName": "kSOtcS",
                                        "rules": Array [
                                          "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-cvbbAY",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-cvbbAY kSOtcS"
                                    color="red"
                                  >
                                    <WarningIcon
                                      color="#fff"
                                      size={22}
                                    >
                                      <svg
                                        height={22}
                                        version="1.1"
                                        viewBox="0 0 32 32"
                                        width={22}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <title>
                                          warning
                                        </title>
                                        <path
                                          d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                          fill="#fff"
                                        />
                                      </svg>
                                    </WarningIcon>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.p
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
                                        "lastClassName": "gcNXgz",
                                        "rules": Array [
                                          "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                          [Function],
                                          ";
  color: ",
                                          [Function],
                                          ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                        ],
                                      },
                                      "displayName": "styled.p",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "p",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <p
                                    className="sc-eHgmQL gcNXgz"
                                    color="red"
                                  >
                                    <styled.span
                                      color="red"
                                    >
                                      <StyledComponent
                                        color="red"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jWBwVP",
                                              "isStatic": false,
                                              "lastClassName": "eIYbtF",
                                              "rules": Array [
                                                "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                [Function],
                                                ";
  padding-right: 0.5rem;
",
                                              ],
                                            },
                                            "displayName": "styled.span",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jWBwVP",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="sc-jWBwVP eIYbtF"
                                          color="red"
                                        />
                                      </StyledComponent>
                                    </styled.span>
                                    authorizedKeyIds size must be between 1 and 2147483647
                                  </p>
                                </StyledComponent>
                              </styled.p>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </Notification>
                    </li>
                    <li
                      key="1"
                    >
                      <Notification
                        notification="expectedEndProducts size must be between 1 and 2147483647"
                        type="ERROR"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hSdWYo",
                                  "isStatic": false,
                                  "lastClassName": "dKbfDW",
                                  "rules": Array [
                                    "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hSdWYo",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hSdWYo dKbfDW"
                            >
                              <styled.div
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cvbbAY",
                                        "isStatic": false,
                                        "lastClassName": "kSOtcS",
                                        "rules": Array [
                                          "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-cvbbAY",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-cvbbAY kSOtcS"
                                    color="red"
                                  >
                                    <WarningIcon
                                      color="#fff"
                                      size={22}
                                    >
                                      <svg
                                        height={22}
                                        version="1.1"
                                        viewBox="0 0 32 32"
                                        width={22}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <title>
                                          warning
                                        </title>
                                        <path
                                          d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                          fill="#fff"
                                        />
                                      </svg>
                                    </WarningIcon>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.p
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
                                        "lastClassName": "gcNXgz",
                                        "rules": Array [
                                          "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                          [Function],
                                          ";
  color: ",
                                          [Function],
                                          ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                        ],
                                      },
                                      "displayName": "styled.p",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "p",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <p
                                    className="sc-eHgmQL gcNXgz"
                                    color="red"
                                  >
                                    <styled.span
                                      color="red"
                                    >
                                      <StyledComponent
                                        color="red"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jWBwVP",
                                              "isStatic": false,
                                              "lastClassName": "eIYbtF",
                                              "rules": Array [
                                                "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                [Function],
                                                ";
  padding-right: 0.5rem;
",
                                              ],
                                            },
                                            "displayName": "styled.span",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jWBwVP",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="sc-jWBwVP eIYbtF"
                                          color="red"
                                        />
                                      </StyledComponent>
                                    </styled.span>
                                    expectedEndProducts size must be between 1 and 2147483647
                                  </p>
                                </StyledComponent>
                              </styled.p>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </Notification>
                    </li>
                    <li
                      key="2"
                    >
                      <Notification
                        notification="keys size must be between 1 and 2147483647"
                        type="ERROR"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hSdWYo",
                                  "isStatic": false,
                                  "lastClassName": "dKbfDW",
                                  "rules": Array [
                                    "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hSdWYo",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hSdWYo dKbfDW"
                            >
                              <styled.div
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cvbbAY",
                                        "isStatic": false,
                                        "lastClassName": "kSOtcS",
                                        "rules": Array [
                                          "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-cvbbAY",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-cvbbAY kSOtcS"
                                    color="red"
                                  >
                                    <WarningIcon
                                      color="#fff"
                                      size={22}
                                    >
                                      <svg
                                        height={22}
                                        version="1.1"
                                        viewBox="0 0 32 32"
                                        width={22}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <title>
                                          warning
                                        </title>
                                        <path
                                          d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                          fill="#fff"
                                        />
                                      </svg>
                                    </WarningIcon>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.p
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
                                        "lastClassName": "gcNXgz",
                                        "rules": Array [
                                          "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                          [Function],
                                          ";
  color: ",
                                          [Function],
                                          ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                        ],
                                      },
                                      "displayName": "styled.p",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "p",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <p
                                    className="sc-eHgmQL gcNXgz"
                                    color="red"
                                  >
                                    <styled.span
                                      color="red"
                                    >
                                      <StyledComponent
                                        color="red"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jWBwVP",
                                              "isStatic": false,
                                              "lastClassName": "eIYbtF",
                                              "rules": Array [
                                                "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                [Function],
                                                ";
  padding-right: 0.5rem;
",
                                              ],
                                            },
                                            "displayName": "styled.span",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jWBwVP",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="sc-jWBwVP eIYbtF"
                                          color="red"
                                        />
                                      </StyledComponent>
                                    </styled.span>
                                    keys size must be between 1 and 2147483647
                                  </p>
                                </StyledComponent>
                              </styled.p>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </Notification>
                    </li>
                    <li
                      key="3"
                    >
                      <Notification
                        notification="layoutSegments size must be between 1 and 2147483647"
                        type="ERROR"
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-hSdWYo",
                                  "isStatic": false,
                                  "lastClassName": "dKbfDW",
                                  "rules": Array [
                                    "
  display: flex;
  flex-direction: row;
  margin: 0 0 1rem;
  background-color: ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-hSdWYo",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-hSdWYo dKbfDW"
                            >
                              <styled.div
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-cvbbAY",
                                        "isStatic": false,
                                        "lastClassName": "kSOtcS",
                                        "rules": Array [
                                          "
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-cvbbAY",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-cvbbAY kSOtcS"
                                    color="red"
                                  >
                                    <WarningIcon
                                      color="#fff"
                                      size={22}
                                    >
                                      <svg
                                        height={22}
                                        version="1.1"
                                        viewBox="0 0 32 32"
                                        width={22}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <title>
                                          warning
                                        </title>
                                        <path
                                          d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                          fill="#fff"
                                        />
                                         
                                        <path
                                          d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                          fill="#fff"
                                        />
                                      </svg>
                                    </WarningIcon>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.p
                                color="red"
                              >
                                <StyledComponent
                                  color="red"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
                                        "lastClassName": "gcNXgz",
                                        "rules": Array [
                                          "
  display: flex;
  flex: 1 1 auto;
  align-items: center;
  justify-content: flex-start;
  border: 1px solid ",
                                          [Function],
                                          ";
  color: ",
                                          [Function],
                                          ";
  padding: 0.5rem 1rem 0.5rem 0;
  font-size: 0.9rem;
  word-break: break-word;
",
                                        ],
                                      },
                                      "displayName": "styled.p",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "p",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <p
                                    className="sc-eHgmQL gcNXgz"
                                    color="red"
                                  >
                                    <styled.span
                                      color="red"
                                    >
                                      <StyledComponent
                                        color="red"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jWBwVP",
                                              "isStatic": false,
                                              "lastClassName": "eIYbtF",
                                              "rules": Array [
                                                "
  position: relative;
  left: -1px;
  display: flex;
  width: 0;
  height: 0;
  border-top: 0.5rem solid transparent;
  border-bottom: 0.5rem solid transparent;
  border-left: 0.5rem solid ",
                                                [Function],
                                                ";
  padding-right: 0.5rem;
",
                                              ],
                                            },
                                            "displayName": "styled.span",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jWBwVP",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <span
                                          className="sc-jWBwVP eIYbtF"
                                          color="red"
                                        />
                                      </StyledComponent>
                                    </styled.span>
                                    layoutSegments size must be between 1 and 2147483647
                                  </p>
                                </StyledComponent>
                              </styled.p>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </Notification>
                    </li>
                  </ul>
                </NotificationsList>
              </main>
            </StyledComponent>
          </styled.main>
        </section>
      </StyledComponent>
    </styled.section>
  </Panel>
</ManageLayoutPanel>
`;
