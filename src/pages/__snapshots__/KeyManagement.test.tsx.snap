// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when Continue is clicked on modal window it should show password view modal window 1`] = `
<KeyManagement>
  <styled.h1>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "aaPtj",
            "rules": Array [
              "
  border-bottom: 1px solid ",
              [Function],
              ";
  padding: 1rem 0 1.25rem;
  margin: 0 0 0.6rem;
  font-size: 2rem;
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <h1
        className="sc-dnqmqq aaPtj"
      >
        Key management
      </h1>
    </StyledComponent>
  </styled.h1>
  <KeyContainer
    clipboardIconSize={16}
    clipboardWrapperCss={
      Array [
        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
      ]
    }
    copyInputWrapperCss={
      Array [
        "
  margin: 0;
  width: 30vw;
",
      ]
    }
    inputCss={
      Array [
        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
      ]
    }
  >
    <styled.p>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kGXeez",
              "isStatic": false,
              "lastClassName": "doJMEi",
              "rules": Array [
                "
  font-weight: bold;
  font-size: 0.875rem;
",
              ],
            },
            "displayName": "styled.p",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kGXeez",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <p
          className="sc-kGXeez doJMEi"
        >
          Key id
        </p>
      </StyledComponent>
    </styled.p>
    <styled.div
      copyInputWrapperCss={
        Array [
          "
  margin: 0;
  width: 30vw;
",
        ]
      }
    >
      <StyledComponent
        copyInputWrapperCss={
          Array [
            "
  margin: 0;
  width: 30vw;
",
          ]
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kpOJdX",
              "isStatic": false,
              "lastClassName": "cNcSPB",
              "rules": Array [
                "
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kpOJdX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-kpOJdX cNcSPB"
        >
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value=""
          >
            <styled.input
              readOnly={true}
              value=""
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value=""
                    />,
                  }
                }
                readOnly={true}
                value=""
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value=""
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "faDdou",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      />
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "oZosW",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kGXeez",
                    "isStatic": false,
                    "lastClassName": "doJMEi",
                    "rules": Array [
                      "
  font-weight: bold;
  font-size: 0.875rem;
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kGXeez",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-kGXeez doJMEi"
              >
                Public key
              </p>
            </StyledComponent>
          </styled.p>
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value=""
          >
            <styled.input
              readOnly={true}
              value=""
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value=""
                    />,
                  }
                }
                readOnly={true}
                value=""
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value=""
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "faDdou",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      />
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "oZosW",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
        </div>
      </StyledComponent>
    </styled.div>
  </KeyContainer>
  <KeyManagementModal
    cbKeyCreated={[Function]}
    createFirstKey={false}
    displayModal={true}
    setDisplayModal={[Function]}
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "lastClassName": "fmfPDt",
              "rules": Array [
                "
  background: ",
                [Function],
                ";
  padding: 1rem 2rem;
  width: 30rem;
  position: absolute;
  top: 33%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 4;
  min-height: 10rem;
  display: flex;
  align-items: stretch;
  justify-content: center;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-ifAKCX fmfPDt"
        >
          <Styled(styled.div)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-EHOje",
                    "isStatic": false,
                    "lastClassName": "kmJovf",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: column;
",
                      "
  display: flex;
  flex: 1;
  align-items: center;
",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-bxivhb",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-EHOje",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-bxivhb sc-EHOje kmJovf"
              >
                <styled.main>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "lastClassName": "gkeQQr",
                          "rules": Array [
                            "
  display: flex;
  flex: 1;
  width: 100%;
  justify-content: center;
  align-items: center;
",
                          ],
                        },
                        "displayName": "styled.main",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "main",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <main
                      className="sc-bZQynM gkeQQr"
                    >
                      <PasswordView>
                        <styled.section>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "fajOkX",
                                  "rules": Array [
                                    "
  background: #fff;
  display: flex;
  align-items: center;
  border: 1px solid ",
                                    [Function],
                                    ";
  margin: ",
                                    [Function],
                                    ";
  padding: 1.25rem 1.5rem;
  width: 100%;
",
                                  ],
                                },
                                "displayName": "styled.section",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": "section",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <section
                              className="sc-jzJRlG fajOkX"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-bxivhb",
                                        "isStatic": false,
                                        "lastClassName": "glCqXO",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-bxivhb",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-bxivhb glCqXO"
                                  >
                                    <styled.p>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-cSHVUG",
                                              "isStatic": false,
                                              "lastClassName": "jogDuG",
                                              "rules": Array [
                                                "
  color: ",
                                                [Function],
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.p",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-cSHVUG",
                                            "target": "p",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <p
                                          className="sc-cSHVUG jogDuG"
                                        >
                                          Key has been generated with the following passphrase:
                                        </p>
                                      </StyledComponent>
                                    </styled.p>
                                    <Styled(styled.div)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-kgoBCf",
                                              "isStatic": false,
                                              "lastClassName": "cGmCGv",
                                              "rules": Array [
                                                "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                [Function],
                                                ";
",
                                                "
  justify-content: center;
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.div)",
                                            "foldedComponentIds": Array [
                                              "sc-gZMcBi",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-kgoBCf",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-gZMcBi sc-kgoBCf cGmCGv"
                                        >
                                          <Styled(styled.div)>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-kAzzGY",
                                                    "isStatic": false,
                                                    "lastClassName": "lmKQwb",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                      [Function],
                                                      ";
",
                                                      "
  margin: 1rem 0;
  align-items: center;
",
                                                    ],
                                                  },
                                                  "displayName": "Styled(styled.div)",
                                                  "foldedComponentIds": Array [
                                                    "sc-gZMcBi",
                                                  ],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-kAzzGY",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gZMcBi sc-kAzzGY lmKQwb"
                                              >
                                                <styled.div>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-chPdSV",
                                                          "isStatic": false,
                                                          "lastClassName": "diDnfJ",
                                                          "rules": Array [
                                                            "
  position: relative;
  top: 3px;
  margin: 0.4rem 0.5rem 0.3rem;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-chPdSV",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <div
                                                      className="sc-chPdSV diDnfJ"
                                                    >
                                                      <KeyIcon
                                                        color="orange"
                                                        size={32}
                                                      >
                                                        <svg
                                                          height={32}
                                                          version="1.1"
                                                          viewBox="0 0 32 32"
                                                          width={32}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <title>
                                                            key
                                                          </title>
                                                          <path
                                                            d="M22 0c-5.523 0-10 4.477-10 10 0 0.626 0.058 1.238 0.168 1.832l-12.168 12.168v6c0 1.105 0.895 2 2 2h2v-2h4v-4h4v-4h4l2.595-2.595c1.063 0.385 2.209 0.595 3.405 0.595 5.523 0 10-4.477 10-10s-4.477-10-10-10zM24.996 10.004c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3z"
                                                            fill="orange"
                                                          />
                                                        </svg>
                                                      </KeyIcon>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                                <CopyInput
                                                  clipboardIconSize={24}
                                                  clipboardWrapperCss={
                                                    Array [
                                                      "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                    ]
                                                  }
                                                  inputCss={
                                                    Array [
                                                      "
  margin: 0.75rem 1rem;
  color: ",
                                                      [Function],
                                                      ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                    ]
                                                  }
                                                >
                                                  <styled.input
                                                    readOnly={true}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-gqjmRU",
                                                            "isStatic": false,
                                                            "lastClassName": "fktYVK",
                                                            "rules": Array [
                                                              "
  position: absolute;
  left: -1000%;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.input",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-gqjmRU",
                                                          "target": "input",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={
                                                        Object {
                                                          "current": <input
                                                            class="sc-gqjmRU fktYVK"
                                                            readonly=""
                                                            value=""
                                                          />,
                                                        }
                                                      }
                                                      readOnly={true}
                                                    >
                                                      <input
                                                        className="sc-gqjmRU fktYVK"
                                                        readOnly={true}
                                                      />
                                                    </StyledComponent>
                                                  </styled.input>
                                                  <Styled(styled.div)
                                                    disableWrap={true}
                                                  >
                                                    <StyledComponent
                                                      disableWrap={true}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-fjdhpX",
                                                            "isStatic": false,
                                                            "lastClassName": "ifepHu",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                              [Function],
                                                              ";
",
                                                              "
  align-items: center;
  justify-content: flex-start;
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.div)",
                                                          "foldedComponentIds": Array [
                                                            "sc-gZMcBi",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-fjdhpX",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="sc-gZMcBi sc-fjdhpX ifepHu"
                                                      >
                                                        <styled.p
                                                          inputCss={
                                                            Array [
                                                              "
  margin: 0.75rem 1rem;
  color: ",
                                                              [Function],
                                                              ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                            ]
                                                          }
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-VigVT",
                                                                  "isStatic": false,
                                                                  "lastClassName": "faDdou",
                                                                  "rules": Array [
                                                                    "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                                                                    [Function],
                                                                    ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                                                                    [Function],
                                                                    "
",
                                                                  ],
                                                                },
                                                                "displayName": "styled.p",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-VigVT",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            inputCss={
                                                              Array [
                                                                "
  margin: 0.75rem 1rem;
  color: ",
                                                                [Function],
                                                                ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                              ]
                                                            }
                                                          >
                                                            <p
                                                              className="sc-VigVT faDdou"
                                                            />
                                                          </StyledComponent>
                                                        </styled.p>
                                                        <styled.button
                                                          clipboardWrapperCss={
                                                            Array [
                                                              "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                            ]
                                                          }
                                                          onClick={[Function]}
                                                          title="Copy value to clipboard"
                                                        >
                                                          <StyledComponent
                                                            clipboardWrapperCss={
                                                              Array [
                                                                "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                              ]
                                                            }
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-jTzLTM",
                                                                  "isStatic": false,
                                                                  "lastClassName": "oZosW",
                                                                  "rules": Array [
                                                                    "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                                                                    [Function],
                                                                    ";

    svg path {
      fill: ",
                                                                    [Function],
                                                                    ";
    }
  }

  ",
                                                                    [Function],
                                                                    "
",
                                                                  ],
                                                                },
                                                                "displayName": "styled.button",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-jTzLTM",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                            title="Copy value to clipboard"
                                                          >
                                                            <button
                                                              className="sc-jTzLTM oZosW"
                                                              onClick={[Function]}
                                                              title="Copy value to clipboard"
                                                            >
                                                              <ClipboardIcon
                                                                color="#8D99AE"
                                                                size={24}
                                                              >
                                                                <svg
                                                                  height={24}
                                                                  version="1.1"
                                                                  viewBox="0 0 27.5 27.5"
                                                                  width={24}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                                                                    fill="#8D99AE"
                                                                  />
                                                                </svg>
                                                              </ClipboardIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </styled.button>
                                                      </div>
                                                    </StyledComponent>
                                                  </Styled(styled.div)>
                                                </CopyInput>
                                              </div>
                                            </StyledComponent>
                                          </Styled(styled.div)>
                                        </div>
                                      </StyledComponent>
                                    </Styled(styled.div)>
                                    <styled.p>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-cSHVUG",
                                              "isStatic": false,
                                              "lastClassName": "jogDuG",
                                              "rules": Array [
                                                "
  color: ",
                                                [Function],
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.p",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-cSHVUG",
                                            "target": "p",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <p
                                          className="sc-cSHVUG jogDuG"
                                        >
                                          Do not forget to copy the passphrase before closing this message.
                                        </p>
                                      </StyledComponent>
                                    </styled.p>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </section>
                          </StyledComponent>
                        </styled.section>
                      </PasswordView>
                    </main>
                  </StyledComponent>
                </styled.main>
                <styled.footer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "dbrqNe",
                          "rules": Array [
                            "
  width: 100%;
  text-align: center;
",
                          ],
                        },
                        "displayName": "styled.footer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "footer",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <footer
                      className="sc-htoDjs dbrqNe"
                    >
                      <styled.button
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gzVnrw",
                                "isStatic": false,
                                "lastClassName": "bpbtQ",
                                "rules": Array [
                                  "
  margin: 0 2rem 0.5rem;
  background: none;
  border: 0;
  color: ",
                                  [Function],
                                  ";
  font-size: 1rem;
  outline: 0;

  &:hover {
    color: ",
                                  [Function],
                                  ";
    text-decoration: underline;
    cursor: pointer;
  }
",
                                ],
                              },
                              "displayName": "styled.button",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gzVnrw",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <button
                            className="sc-gzVnrw bpbtQ"
                            onClick={[Function]}
                          >
                            Close
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </footer>
                  </StyledComponent>
                </styled.footer>
              </div>
            </StyledComponent>
          </Styled(styled.div)>
        </section>
      </StyledComponent>
    </styled.section>
  </KeyManagementModal>
</KeyManagement>
`;

exports[`when create key is clicked and key is present it should display create new key window  1`] = `
<KeyManagement>
  <styled.h1>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "aaPtj",
            "rules": Array [
              "
  border-bottom: 1px solid ",
              [Function],
              ";
  padding: 1rem 0 1.25rem;
  margin: 0 0 0.6rem;
  font-size: 2rem;
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <h1
        className="sc-dnqmqq aaPtj"
      >
        Key management
      </h1>
    </StyledComponent>
  </styled.h1>
  <Styled(styled.div)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jKJlTe",
            "isStatic": false,
            "lastClassName": "cDlKLq",
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
",
              "
  height: 100%;
  justify-content: center;
  align-items: center;
",
            ],
          },
          "displayName": "Styled(styled.div)",
          "foldedComponentIds": Array [
            "sc-bxivhb",
          ],
          "render": [Function],
          "styledComponentId": "sc-jKJlTe",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-bxivhb sc-jKJlTe cDlKLq"
      >
        <LoaderIcon
          color="#1779ba"
          size={32}
        >
          <svg
            height={32}
            stroke="#1779ba"
            viewBox="0 0 38 38"
            width={32}
            xmlns="http://www.w3.org/2000/svg"
          >
            <g
              fill="none"
              fillRule="evenodd"
            >
              <g
                strokeWidth="2"
                transform="translate(1 1)"
              >
                <circle
                  cx="18"
                  cy="18"
                  r="18"
                  strokeOpacity=".5"
                />
                <path
                  d="M36 18c0-9.94-8.06-18-18-18"
                >
                  <animateTransform
                    attributeName="transform"
                    dur="1s"
                    from="0 18 18"
                    repeatCount="indefinite"
                    to="360 18 18"
                    type="rotate"
                  />
                </path>
              </g>
            </g>
          </svg>
        </LoaderIcon>
      </div>
    </StyledComponent>
  </Styled(styled.div)>
  <KeyManagementModal
    cbKeyCreated={[Function]}
    createFirstKey={false}
    displayModal={true}
    setDisplayModal={[Function]}
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "lastClassName": "fmfPDt",
              "rules": Array [
                "
  background: ",
                [Function],
                ";
  padding: 1rem 2rem;
  width: 30rem;
  position: absolute;
  top: 33%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 4;
  min-height: 10rem;
  display: flex;
  align-items: stretch;
  justify-content: center;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-ifAKCX fmfPDt"
        >
          <Styled(styled.div)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-EHOje",
                    "isStatic": false,
                    "lastClassName": "kmJovf",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: column;
",
                      "
  display: flex;
  flex: 1;
  align-items: center;
",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-bxivhb",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-EHOje",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-bxivhb sc-EHOje kmJovf"
              >
                <styled.main>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "lastClassName": "gkeQQr",
                          "rules": Array [
                            "
  display: flex;
  flex: 1;
  width: 100%;
  justify-content: center;
  align-items: center;
",
                          ],
                        },
                        "displayName": "styled.main",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "main",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <main
                      className="sc-bZQynM gkeQQr"
                    >
                      <Warning
                        message="Existing key will be deactivated. Are you sure you want to continue?"
                      >
                        <styled.section>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": false,
                                  "lastClassName": "itGnUS",
                                  "rules": Array [
                                    "
  display: flex;
  align-items: center;
  border: 1px solid ",
                                    [Function],
                                    ";
  margin: 1rem 0;
  padding: 1rem;
  width: 100%;
",
                                  ],
                                },
                                "displayName": "styled.section",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "section",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <section
                              className="sc-bdVaJa itGnUS"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-htpNat",
                                        "isStatic": false,
                                        "lastClassName": "fTbmGC",
                                        "rules": Array [
                                          "
  margin: 0 2rem 0 0;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-htpNat",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-htpNat fTbmGC"
                                  >
                                    <WarningIcon
                                      color="red"
                                      size={48}
                                    >
                                      <svg
                                        height={48}
                                        version="1.1"
                                        viewBox="0 0 32 32"
                                        width={48}
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <title>
                                          warning
                                        </title>
                                        <path
                                          d="M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z"
                                          fill="red"
                                        />
                                         
                                        <path
                                          d="M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z"
                                          fill="red"
                                        />
                                         
                                        <path
                                          d="M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z"
                                          fill="red"
                                        />
                                      </svg>
                                    </WarningIcon>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                              <styled.p>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-bwzfXH",
                                        "isStatic": false,
                                        "lastClassName": "bukUYK",
                                        "rules": Array [
                                          "
  color: ",
                                          [Function],
                                          ";
",
                                        ],
                                      },
                                      "displayName": "styled.p",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-bwzfXH",
                                      "target": "p",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <p
                                    className="sc-bwzfXH bukUYK"
                                  >
                                    Existing key will be deactivated. Are you sure you want to continue?
                                  </p>
                                </StyledComponent>
                              </styled.p>
                            </section>
                          </StyledComponent>
                        </styled.section>
                      </Warning>
                    </main>
                  </StyledComponent>
                </styled.main>
                <styled.footer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "dbrqNe",
                          "rules": Array [
                            "
  width: 100%;
  text-align: center;
",
                          ],
                        },
                        "displayName": "styled.footer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "footer",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <footer
                      className="sc-htoDjs dbrqNe"
                    >
                      <styled.button
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gzVnrw",
                                "isStatic": false,
                                "lastClassName": "bpbtQ",
                                "rules": Array [
                                  "
  margin: 0 2rem 0.5rem;
  background: none;
  border: 0;
  color: ",
                                  [Function],
                                  ";
  font-size: 1rem;
  outline: 0;

  &:hover {
    color: ",
                                  [Function],
                                  ";
    text-decoration: underline;
    cursor: pointer;
  }
",
                                ],
                              },
                              "displayName": "styled.button",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gzVnrw",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <button
                            className="sc-gzVnrw bpbtQ"
                            onClick={[Function]}
                          >
                            No
                          </button>
                        </StyledComponent>
                      </styled.button>
                      <styled.button
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gzVnrw",
                                "isStatic": false,
                                "lastClassName": "bpbtQ",
                                "rules": Array [
                                  "
  margin: 0 2rem 0.5rem;
  background: none;
  border: 0;
  color: ",
                                  [Function],
                                  ";
  font-size: 1rem;
  outline: 0;

  &:hover {
    color: ",
                                  [Function],
                                  ";
    text-decoration: underline;
    cursor: pointer;
  }
",
                                ],
                              },
                              "displayName": "styled.button",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gzVnrw",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <button
                            className="sc-gzVnrw bpbtQ"
                            onClick={[Function]}
                          >
                            Continue
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </footer>
                  </StyledComponent>
                </styled.footer>
              </div>
            </StyledComponent>
          </Styled(styled.div)>
        </section>
      </StyledComponent>
    </styled.section>
  </KeyManagementModal>
</KeyManagement>
`;

exports[`when create key is clicked and no key is present it should display password generated window 1`] = `
<KeyManagement>
  <styled.h1>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "aaPtj",
            "rules": Array [
              "
  border-bottom: 1px solid ",
              [Function],
              ";
  padding: 1rem 0 1.25rem;
  margin: 0 0 0.6rem;
  font-size: 2rem;
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <h1
        className="sc-dnqmqq aaPtj"
      >
        Key management
      </h1>
    </StyledComponent>
  </styled.h1>
  <KeyContainer
    clipboardIconSize={16}
    clipboardWrapperCss={
      Array [
        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
      ]
    }
    copyInputWrapperCss={
      Array [
        "
  margin: 0;
  width: 30vw;
",
      ]
    }
    inputCss={
      Array [
        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
      ]
    }
  >
    <styled.p>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kGXeez",
              "isStatic": false,
              "lastClassName": "doJMEi",
              "rules": Array [
                "
  font-weight: bold;
  font-size: 0.875rem;
",
              ],
            },
            "displayName": "styled.p",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kGXeez",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <p
          className="sc-kGXeez doJMEi"
        >
          Key id
        </p>
      </StyledComponent>
    </styled.p>
    <styled.div
      copyInputWrapperCss={
        Array [
          "
  margin: 0;
  width: 30vw;
",
        ]
      }
    >
      <StyledComponent
        copyInputWrapperCss={
          Array [
            "
  margin: 0;
  width: 30vw;
",
          ]
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kpOJdX",
              "isStatic": false,
              "lastClassName": "cNcSPB",
              "rules": Array [
                "
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kpOJdX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-kpOJdX cNcSPB"
        >
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value=""
          >
            <styled.input
              readOnly={true}
              value=""
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value=""
                    />,
                  }
                }
                readOnly={true}
                value=""
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value=""
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "faDdou",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      />
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "oZosW",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kGXeez",
                    "isStatic": false,
                    "lastClassName": "doJMEi",
                    "rules": Array [
                      "
  font-weight: bold;
  font-size: 0.875rem;
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kGXeez",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-kGXeez doJMEi"
              >
                Public key
              </p>
            </StyledComponent>
          </styled.p>
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value=""
          >
            <styled.input
              readOnly={true}
              value=""
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value=""
                    />,
                  }
                }
                readOnly={true}
                value=""
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value=""
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "faDdou",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      />
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "oZosW",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
        </div>
      </StyledComponent>
    </styled.div>
  </KeyContainer>
  <KeyManagementModal
    cbKeyCreated={[Function]}
    createFirstKey={false}
    displayModal={true}
    setDisplayModal={[Function]}
  >
    <styled.section>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "lastClassName": "fmfPDt",
              "rules": Array [
                "
  background: ",
                [Function],
                ";
  padding: 1rem 2rem;
  width: 30rem;
  position: absolute;
  top: 33%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 4;
  min-height: 10rem;
  display: flex;
  align-items: stretch;
  justify-content: center;
  box-shadow: 0 3px 20px 0px rgba(0, 0, 0, 0.1);
",
              ],
            },
            "displayName": "styled.section",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": "section",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <section
          className="sc-ifAKCX fmfPDt"
        >
          <Styled(styled.div)>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-EHOje",
                    "isStatic": false,
                    "lastClassName": "kmJovf",
                    "rules": Array [
                      "
  display: flex;
  flex-direction: column;
",
                      "
  display: flex;
  flex: 1;
  align-items: center;
",
                    ],
                  },
                  "displayName": "Styled(styled.div)",
                  "foldedComponentIds": Array [
                    "sc-bxivhb",
                  ],
                  "render": [Function],
                  "styledComponentId": "sc-EHOje",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-bxivhb sc-EHOje kmJovf"
              >
                <styled.main>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bZQynM",
                          "isStatic": false,
                          "lastClassName": "gkeQQr",
                          "rules": Array [
                            "
  display: flex;
  flex: 1;
  width: 100%;
  justify-content: center;
  align-items: center;
",
                          ],
                        },
                        "displayName": "styled.main",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bZQynM",
                        "target": "main",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <main
                      className="sc-bZQynM gkeQQr"
                    >
                      <PasswordView>
                        <styled.section>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "fajOkX",
                                  "rules": Array [
                                    "
  background: #fff;
  display: flex;
  align-items: center;
  border: 1px solid ",
                                    [Function],
                                    ";
  margin: ",
                                    [Function],
                                    ";
  padding: 1.25rem 1.5rem;
  width: 100%;
",
                                  ],
                                },
                                "displayName": "styled.section",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": "section",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <section
                              className="sc-jzJRlG fajOkX"
                            >
                              <styled.div>
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-bxivhb",
                                        "isStatic": false,
                                        "lastClassName": "glCqXO",
                                        "rules": Array [
                                          "
  display: flex;
  flex-direction: column;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-bxivhb",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
                                    className="sc-bxivhb glCqXO"
                                  >
                                    <styled.p>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-cSHVUG",
                                              "isStatic": false,
                                              "lastClassName": "jogDuG",
                                              "rules": Array [
                                                "
  color: ",
                                                [Function],
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.p",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-cSHVUG",
                                            "target": "p",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <p
                                          className="sc-cSHVUG jogDuG"
                                        >
                                          Key has been generated with the following passphrase:
                                        </p>
                                      </StyledComponent>
                                    </styled.p>
                                    <Styled(styled.div)>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-kgoBCf",
                                              "isStatic": false,
                                              "lastClassName": "cGmCGv",
                                              "rules": Array [
                                                "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                [Function],
                                                ";
",
                                                "
  justify-content: center;
",
                                              ],
                                            },
                                            "displayName": "Styled(styled.div)",
                                            "foldedComponentIds": Array [
                                              "sc-gZMcBi",
                                            ],
                                            "render": [Function],
                                            "styledComponentId": "sc-kgoBCf",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-gZMcBi sc-kgoBCf cGmCGv"
                                        >
                                          <Styled(styled.div)>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-kAzzGY",
                                                    "isStatic": false,
                                                    "lastClassName": "lmKQwb",
                                                    "rules": Array [
                                                      "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                      [Function],
                                                      ";
",
                                                      "
  margin: 1rem 0;
  align-items: center;
",
                                                    ],
                                                  },
                                                  "displayName": "Styled(styled.div)",
                                                  "foldedComponentIds": Array [
                                                    "sc-gZMcBi",
                                                  ],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-kAzzGY",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="sc-gZMcBi sc-kAzzGY lmKQwb"
                                              >
                                                <styled.div>
                                                  <StyledComponent
                                                    forwardedComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "attrs": Array [],
                                                        "componentStyle": ComponentStyle {
                                                          "componentId": "sc-chPdSV",
                                                          "isStatic": false,
                                                          "lastClassName": "diDnfJ",
                                                          "rules": Array [
                                                            "
  position: relative;
  top: 3px;
  margin: 0.4rem 0.5rem 0.3rem;
",
                                                          ],
                                                        },
                                                        "displayName": "styled.div",
                                                        "foldedComponentIds": Array [],
                                                        "render": [Function],
                                                        "styledComponentId": "sc-chPdSV",
                                                        "target": "div",
                                                        "toString": [Function],
                                                        "warnTooManyClasses": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    forwardedRef={null}
                                                  >
                                                    <div
                                                      className="sc-chPdSV diDnfJ"
                                                    >
                                                      <KeyIcon
                                                        color="orange"
                                                        size={32}
                                                      >
                                                        <svg
                                                          height={32}
                                                          version="1.1"
                                                          viewBox="0 0 32 32"
                                                          width={32}
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <title>
                                                            key
                                                          </title>
                                                          <path
                                                            d="M22 0c-5.523 0-10 4.477-10 10 0 0.626 0.058 1.238 0.168 1.832l-12.168 12.168v6c0 1.105 0.895 2 2 2h2v-2h4v-4h4v-4h4l2.595-2.595c1.063 0.385 2.209 0.595 3.405 0.595 5.523 0 10-4.477 10-10s-4.477-10-10-10zM24.996 10.004c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3z"
                                                            fill="orange"
                                                          />
                                                        </svg>
                                                      </KeyIcon>
                                                    </div>
                                                  </StyledComponent>
                                                </styled.div>
                                                <CopyInput
                                                  clipboardIconSize={24}
                                                  clipboardWrapperCss={
                                                    Array [
                                                      "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                    ]
                                                  }
                                                  inputCss={
                                                    Array [
                                                      "
  margin: 0.75rem 1rem;
  color: ",
                                                      [Function],
                                                      ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                    ]
                                                  }
                                                >
                                                  <styled.input
                                                    readOnly={true}
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-gqjmRU",
                                                            "isStatic": false,
                                                            "lastClassName": "fktYVK",
                                                            "rules": Array [
                                                              "
  position: absolute;
  left: -1000%;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.input",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-gqjmRU",
                                                          "target": "input",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={
                                                        Object {
                                                          "current": <input
                                                            class="sc-gqjmRU fktYVK"
                                                            readonly=""
                                                            value=""
                                                          />,
                                                        }
                                                      }
                                                      readOnly={true}
                                                    >
                                                      <input
                                                        className="sc-gqjmRU fktYVK"
                                                        readOnly={true}
                                                      />
                                                    </StyledComponent>
                                                  </styled.input>
                                                  <Styled(styled.div)
                                                    disableWrap={true}
                                                  >
                                                    <StyledComponent
                                                      disableWrap={true}
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-fjdhpX",
                                                            "isStatic": false,
                                                            "lastClassName": "ifepHu",
                                                            "rules": Array [
                                                              "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                                                              [Function],
                                                              ";
",
                                                              "
  align-items: center;
  justify-content: flex-start;
",
                                                            ],
                                                          },
                                                          "displayName": "Styled(styled.div)",
                                                          "foldedComponentIds": Array [
                                                            "sc-gZMcBi",
                                                          ],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-fjdhpX",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <div
                                                        className="sc-gZMcBi sc-fjdhpX ifepHu"
                                                      >
                                                        <styled.p
                                                          inputCss={
                                                            Array [
                                                              "
  margin: 0.75rem 1rem;
  color: ",
                                                              [Function],
                                                              ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                            ]
                                                          }
                                                        >
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-VigVT",
                                                                  "isStatic": false,
                                                                  "lastClassName": "faDdou",
                                                                  "rules": Array [
                                                                    "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                                                                    [Function],
                                                                    ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                                                                    [Function],
                                                                    "
",
                                                                  ],
                                                                },
                                                                "displayName": "styled.p",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-VigVT",
                                                                "target": "p",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            inputCss={
                                                              Array [
                                                                "
  margin: 0.75rem 1rem;
  color: ",
                                                                [Function],
                                                                ";
  font-size: 1.6rem;
  border: none;
  outline: none;
  max-width: 14rem;
  text-align: center;
",
                                                              ]
                                                            }
                                                          >
                                                            <p
                                                              className="sc-VigVT faDdou"
                                                            />
                                                          </StyledComponent>
                                                        </styled.p>
                                                        <styled.button
                                                          clipboardWrapperCss={
                                                            Array [
                                                              "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                            ]
                                                          }
                                                          onClick={[Function]}
                                                          title="Copy value to clipboard"
                                                        >
                                                          <StyledComponent
                                                            clipboardWrapperCss={
                                                              Array [
                                                                "
  padding: 0.4rem 0.5rem 0.3rem;
",
                                                              ]
                                                            }
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "sc-jTzLTM",
                                                                  "isStatic": false,
                                                                  "lastClassName": "oZosW",
                                                                  "rules": Array [
                                                                    "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                                                                    [Function],
                                                                    ";

    svg path {
      fill: ",
                                                                    [Function],
                                                                    ";
    }
  }

  ",
                                                                    [Function],
                                                                    "
",
                                                                  ],
                                                                },
                                                                "displayName": "styled.button",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "sc-jTzLTM",
                                                                "target": "button",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                            onClick={[Function]}
                                                            title="Copy value to clipboard"
                                                          >
                                                            <button
                                                              className="sc-jTzLTM oZosW"
                                                              onClick={[Function]}
                                                              title="Copy value to clipboard"
                                                            >
                                                              <ClipboardIcon
                                                                color="#8D99AE"
                                                                size={24}
                                                              >
                                                                <svg
                                                                  height={24}
                                                                  version="1.1"
                                                                  viewBox="0 0 27.5 27.5"
                                                                  width={24}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                                                                    fill="#8D99AE"
                                                                  />
                                                                </svg>
                                                              </ClipboardIcon>
                                                            </button>
                                                          </StyledComponent>
                                                        </styled.button>
                                                      </div>
                                                    </StyledComponent>
                                                  </Styled(styled.div)>
                                                </CopyInput>
                                              </div>
                                            </StyledComponent>
                                          </Styled(styled.div)>
                                        </div>
                                      </StyledComponent>
                                    </Styled(styled.div)>
                                    <styled.p>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-cSHVUG",
                                              "isStatic": false,
                                              "lastClassName": "jogDuG",
                                              "rules": Array [
                                                "
  color: ",
                                                [Function],
                                                ";
",
                                              ],
                                            },
                                            "displayName": "styled.p",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-cSHVUG",
                                            "target": "p",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <p
                                          className="sc-cSHVUG jogDuG"
                                        >
                                          Do not forget to copy the passphrase before closing this message.
                                        </p>
                                      </StyledComponent>
                                    </styled.p>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </section>
                          </StyledComponent>
                        </styled.section>
                      </PasswordView>
                    </main>
                  </StyledComponent>
                </styled.main>
                <styled.footer>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": false,
                          "lastClassName": "dbrqNe",
                          "rules": Array [
                            "
  width: 100%;
  text-align: center;
",
                          ],
                        },
                        "displayName": "styled.footer",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "footer",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <footer
                      className="sc-htoDjs dbrqNe"
                    >
                      <styled.button
                        onClick={[Function]}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-gzVnrw",
                                "isStatic": false,
                                "lastClassName": "bpbtQ",
                                "rules": Array [
                                  "
  margin: 0 2rem 0.5rem;
  background: none;
  border: 0;
  color: ",
                                  [Function],
                                  ";
  font-size: 1rem;
  outline: 0;

  &:hover {
    color: ",
                                  [Function],
                                  ";
    text-decoration: underline;
    cursor: pointer;
  }
",
                                ],
                              },
                              "displayName": "styled.button",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-gzVnrw",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                        >
                          <button
                            className="sc-gzVnrw bpbtQ"
                            onClick={[Function]}
                          >
                            Close
                          </button>
                        </StyledComponent>
                      </styled.button>
                    </footer>
                  </StyledComponent>
                </styled.footer>
              </div>
            </StyledComponent>
          </Styled(styled.div)>
        </section>
      </StyledComponent>
    </styled.section>
  </KeyManagementModal>
</KeyManagement>
`;

exports[`when key is present it should display keycontainer 1`] = `
<KeyManagement>
  <styled.h1>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "aaPtj",
            "rules": Array [
              "
  border-bottom: 1px solid ",
              [Function],
              ";
  padding: 1rem 0 1.25rem;
  margin: 0 0 0.6rem;
  font-size: 2rem;
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <h1
        className="sc-dnqmqq aaPtj"
      >
        Key management
      </h1>
    </StyledComponent>
  </styled.h1>
  <KeyContainer
    clipboardIconSize={16}
    clipboardWrapperCss={
      Array [
        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
      ]
    }
    copyInputWrapperCss={
      Array [
        "
  margin: 0;
  width: 30vw;
",
      ]
    }
    inputCss={
      Array [
        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
      ]
    }
    publicKey={
      Object {
        "encryptedPrivateKey": "privateKey",
        "keyId": "keyid",
        "publicKey": "publicKey",
      }
    }
  >
    <styled.p>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kGXeez",
              "isStatic": false,
              "lastClassName": "doJMEi",
              "rules": Array [
                "
  font-weight: bold;
  font-size: 0.875rem;
",
              ],
            },
            "displayName": "styled.p",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kGXeez",
            "target": "p",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <p
          className="sc-kGXeez doJMEi"
        >
          Key id
        </p>
      </StyledComponent>
    </styled.p>
    <styled.div
      copyInputWrapperCss={
        Array [
          "
  margin: 0;
  width: 30vw;
",
        ]
      }
    >
      <StyledComponent
        copyInputWrapperCss={
          Array [
            "
  margin: 0;
  width: 30vw;
",
          ]
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-kpOJdX",
              "isStatic": false,
              "lastClassName": "cNcSPB",
              "rules": Array [
                "
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-kpOJdX",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-kpOJdX cNcSPB"
        >
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value="keyid"
          >
            <styled.input
              readOnly={true}
              value="keyid"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value="keyid"
                    />,
                  }
                }
                readOnly={true}
                value="keyid"
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value="keyid"
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "MRPrb",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      >
                        keyid
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "iNngVg",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
          <styled.p>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kGXeez",
                    "isStatic": false,
                    "lastClassName": "doJMEi",
                    "rules": Array [
                      "
  font-weight: bold;
  font-size: 0.875rem;
",
                    ],
                  },
                  "displayName": "styled.p",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kGXeez",
                  "target": "p",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <p
                className="sc-kGXeez doJMEi"
              >
                Public key
              </p>
            </StyledComponent>
          </styled.p>
          <CopyInput
            clipboardIconSize={16}
            clipboardWrapperCss={
              Array [
                "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
              ]
            }
            inputCss={
              Array [
                "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
              ]
            }
            value="publicKey"
          >
            <styled.input
              readOnly={true}
              value="publicKey"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gqjmRU",
                      "isStatic": false,
                      "lastClassName": "fktYVK",
                      "rules": Array [
                        "
  position: absolute;
  left: -1000%;
",
                      ],
                    },
                    "displayName": "styled.input",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gqjmRU",
                    "target": "input",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={
                  Object {
                    "current": <input
                      class="sc-gqjmRU fktYVK"
                      readonly=""
                      value="publicKey"
                    />,
                  }
                }
                readOnly={true}
                value="publicKey"
              >
                <input
                  className="sc-gqjmRU fktYVK"
                  readOnly={true}
                  value="publicKey"
                />
              </StyledComponent>
            </styled.input>
            <Styled(styled.div)
              disableWrap={true}
            >
              <StyledComponent
                disableWrap={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "ifepHu",
                      "rules": Array [
                        "
  display: flex;
  flex-direction: row;
  flex-wrap: ",
                        [Function],
                        ";
",
                        "
  align-items: center;
  justify-content: flex-start;
",
                      ],
                    },
                    "displayName": "Styled(styled.div)",
                    "foldedComponentIds": Array [
                      "sc-gZMcBi",
                    ],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-gZMcBi sc-fjdhpX ifepHu"
                >
                  <styled.p
                    inputCss={
                      Array [
                        "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                      ]
                    }
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-VigVT",
                            "isStatic": false,
                            "lastClassName": "MRPrb",
                            "rules": Array [
                              "
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  background: ",
                              [Function],
                              ";
  padding: 0 0.2rem;
  border-radius: 0.1rem;
  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-VigVT",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inputCss={
                        Array [
                          "
  border: 0;
  outline: 0;
  font-size: 0.8rem;
",
                        ]
                      }
                    >
                      <p
                        className="sc-VigVT MRPrb"
                      >
                        publicKey
                      </p>
                    </StyledComponent>
                  </styled.p>
                  <styled.button
                    clipboardWrapperCss={
                      Array [
                        "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                      ]
                    }
                    onClick={[Function]}
                    title="Copy value to clipboard"
                  >
                    <StyledComponent
                      clipboardWrapperCss={
                        Array [
                          "
  padding: 0.4rem;
  margin: 0 1rem;
  height: 1.8rem;
",
                        ]
                      }
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-jTzLTM",
                            "isStatic": false,
                            "lastClassName": "iNngVg",
                            "rules": Array [
                              "
  display: flex;
  background: transparent;
  border: 0;
  outline: 0;

  &:hover {
    cursor: pointer;
    background-color: ",
                              [Function],
                              ";

    svg path {
      fill: ",
                              [Function],
                              ";
    }
  }

  ",
                              [Function],
                              "
",
                            ],
                          },
                          "displayName": "styled.button",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-jTzLTM",
                          "target": "button",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Copy value to clipboard"
                    >
                      <button
                        className="sc-jTzLTM iNngVg"
                        onClick={[Function]}
                        title="Copy value to clipboard"
                      >
                        <ClipboardIcon
                          color="#8D99AE"
                          size={16}
                        >
                          <svg
                            height={16}
                            version="1.1"
                            viewBox="0 0 27.5 27.5"
                            width={16}
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M12 26h14v-10h-6.5c-0.828 0-1.5-0.672-1.5-1.5v-6.5h-6v18zM16 3.5v-1c0-0.266-0.234-0.5-0.5-0.5h-11c-0.266 0-0.5 0.234-0.5 0.5v1c0 0.266 0.234 0.5 0.5 0.5h11c0.266 0 0.5-0.234 0.5-0.5zM20 14h4.672l-4.672-4.672v4.672zM28 16v10.5c0 0.828-0.672 1.5-1.5 1.5h-15c-0.828 0-1.5-0.672-1.5-1.5v-2.5h-8.5c-0.828 0-1.5-0.672-1.5-1.5v-21c0-0.828 0.672-1.5 1.5-1.5h17c0.828 0 1.5 0.672 1.5 1.5v5.125c0.203 0.125 0.391 0.266 0.562 0.437l6.375 6.375c0.594 0.594 1.062 1.734 1.062 2.562z"
                              fill="#8D99AE"
                            />
                          </svg>
                        </ClipboardIcon>
                      </button>
                    </StyledComponent>
                  </styled.button>
                </div>
              </StyledComponent>
            </Styled(styled.div)>
          </CopyInput>
        </div>
      </StyledComponent>
    </styled.div>
  </KeyContainer>
  <Styled(styled.button)
    onClick={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dxgOiQ",
            "isStatic": false,
            "lastClassName": "dOvbJl",
            "rules": Array [
              "
  display: flex;
  align-items: center;
  min-height: 2.5rem;
  max-width: 11.5rem;
  font-size: 0.9rem;
  background-color: transparent;
  border: 1px solid
    ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  text-decoration: none;
  padding: 0 1rem 2px;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    cursor: pointer;
    background-color: ",
              [Function],
              ";
    border: 1px solid
      ",
              [Function],
              ";
    color: ",
              [Function],
              ";

    > svg > path {
      fill: #fff;
    }
  }

  > svg {
    max-width: 1.25rem;
    margin: 0 1rem 0 0;
  }
",
              "
  margin: 1.3rem 0;
",
            ],
          },
          "displayName": "Styled(styled.button)",
          "foldedComponentIds": Array [
            "sc-iwsKbI",
          ],
          "render": [Function],
          "styledComponentId": "sc-dxgOiQ",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onClick={[Function]}
    >
      <button
        className="sc-iwsKbI sc-dxgOiQ dOvbJl"
        onClick={[Function]}
      >
        <PlusIcon
          color="#1779ba"
          size={32}
        >
          <svg
            height={32}
            version="1.1"
            viewBox="0 0 32 32"
            width={32}
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>
              plus
            </title>
            <path
              d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
              fill="#1779ba"
            />
          </svg>
        </PlusIcon>
        Create new key
      </button>
    </StyledComponent>
  </Styled(styled.button)>
</KeyManagement>
`;

exports[`when no key is present it should display warning message 1`] = `
<KeyManagement>
  <styled.h1>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "aaPtj",
            "rules": Array [
              "
  border-bottom: 1px solid ",
              [Function],
              ";
  padding: 1rem 0 1.25rem;
  margin: 0 0 0.6rem;
  font-size: 2rem;
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <h1
        className="sc-dnqmqq aaPtj"
      >
        Key management
      </h1>
    </StyledComponent>
  </styled.h1>
  <styled.p>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ckVGcZ",
            "isStatic": false,
            "lastClassName": "Dlegt",
            "rules": Array [
              "
  margin: 0.25rem 0 0;
  padding: 1rem;
  max-width: 50%;
  color: ",
              [Function],
              ";
  border: 1px solid
    ",
              [Function],
              ";
  background: white;
",
            ],
          },
          "displayName": "styled.p",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ckVGcZ",
          "target": "p",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <p
        className="sc-ckVGcZ Dlegt"
      >
        There is no key currently active. Please create a new key.
      </p>
    </StyledComponent>
  </styled.p>
  <Styled(styled.button)
    onClick={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dxgOiQ",
            "isStatic": false,
            "lastClassName": "dOvbJl",
            "rules": Array [
              "
  display: flex;
  align-items: center;
  min-height: 2.5rem;
  max-width: 11.5rem;
  font-size: 0.9rem;
  background-color: transparent;
  border: 1px solid
    ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  text-decoration: none;
  padding: 0 1rem 2px;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;

  &:hover {
    cursor: pointer;
    background-color: ",
              [Function],
              ";
    border: 1px solid
      ",
              [Function],
              ";
    color: ",
              [Function],
              ";

    > svg > path {
      fill: #fff;
    }
  }

  > svg {
    max-width: 1.25rem;
    margin: 0 1rem 0 0;
  }
",
              "
  margin: 1.3rem 0;
",
            ],
          },
          "displayName": "Styled(styled.button)",
          "foldedComponentIds": Array [
            "sc-iwsKbI",
          ],
          "render": [Function],
          "styledComponentId": "sc-dxgOiQ",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onClick={[Function]}
    >
      <button
        className="sc-iwsKbI sc-dxgOiQ dOvbJl"
        onClick={[Function]}
      >
        <PlusIcon
          color="#1779ba"
          size={32}
        >
          <svg
            height={32}
            version="1.1"
            viewBox="0 0 32 32"
            width={32}
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>
              plus
            </title>
            <path
              d="M31 12h-11v-11c0-0.552-0.448-1-1-1h-6c-0.552 0-1 0.448-1 1v11h-11c-0.552 0-1 0.448-1 1v6c0 0.552 0.448 1 1 1h11v11c0 0.552 0.448 1 1 1h6c0.552 0 1-0.448 1-1v-11h11c0.552 0 1-0.448 1-1v-6c0-0.552-0.448-1-1-1z"
              fill="#1779ba"
            />
          </svg>
        </PlusIcon>
        Create new key
      </button>
    </StyledComponent>
  </Styled(styled.button)>
</KeyManagement>
`;
